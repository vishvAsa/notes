<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>&#43;Function classes on Vishvas&#39;s notes</title>
    <link>file:///storage/emulated/0/notesData/notes/math/booleanFunctions/function_classes/</link>
    <description>Recent content in &#43;Function classes on Vishvas&#39;s notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="file:///storage/emulated/0/notesData/notes/math/booleanFunctions/function_classes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Automata</title>
      <link>file:///storage/emulated/0/notesData/notes/math/booleanFunctions/function_classes/automata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>file:///storage/emulated/0/notesData/notes/math/booleanFunctions/function_classes/automata/</guid>
      <description>Grammar Definition A grammar specifies a language by describing structural rules which can be used to accept or reject a sentence. So, each grammar is associated with a language.
It is fully described by (Variables, Terminal chars/ alphabet, Start symbol, Production rules).
Production rules are of the form: string including variable V \(\to\) string with variables and terminal symbols, formed by replacing \(V\) with somwething else.
A given string is accepted if, starting with the start symbol, using a finite number of production rules, one can arrive at the string.</description>
    </item>
    
    <item>
      <title>Decision trees</title>
      <link>file:///storage/emulated/0/notesData/notes/math/booleanFunctions/function_classes/decision_trees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>file:///storage/emulated/0/notesData/notes/math/booleanFunctions/function_classes/decision_trees/</guid>
      <description>Decision lists Decision list is fully specified by a sequence of \(k\) variables \((x_{i})\) and outputs \(r(x_{i}), r&amp;rsquo;(x_k)\). It is like an &amp;lsquo;if .. elseif .. elseif .. else&amp;rsquo; statement. It can be visualised as a chain of variables, each with one outgoing edges representing an output.
In a d-decision list, \(d-CNF\)&amp;rsquo;s are used in place of \(\set{x_i}\).
Generality This can be writ as halfspace: \(sign(\sum 2^{k-i}x_{i}o(x_{i}))\).
We can write conjunctions, disjunctions as decision lists.</description>
    </item>
    
    <item>
      <title>Misc Function classes</title>
      <link>file:///storage/emulated/0/notesData/notes/math/booleanFunctions/function_classes/misc_function_classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>file:///storage/emulated/0/notesData/notes/math/booleanFunctions/function_classes/misc_function_classes/</guid>
      <description>Conjunctions and disjunctions View as a set.
Boolean functions from real valued functions Take epigraph or subgraph. See complex analysis ref.
Halfspace Aka Linear Threshold fn (LTF). \(f=sign(\sum a_{i}x_{i} + c) = sgn(a^{T}x + c)\), \(a_{i}, c \in Z\). x called the weight vector, c called the bias.
\(a^{T}x + c = 0\) is a Hyperplane: take pts x and x&amp;rsquo; on the hyperplane, use \(a^{T}(x-x&amp;rsquo;) = 0\); so a specifies orientation.</description>
    </item>
    
  </channel>
</rss>