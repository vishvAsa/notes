[[data]]
Language = 'C++'
"Operand Type" = 'mapreduce'
Feature = 'controller'
Subfeature = 'general specification'
Importance = ''
"Implementation Type" = ''
Syntax = '''
  MapReduceController();
  MapReduceSpecification spec;
  spec.set_name("scorer");
  spec->set_machines(num);'''
Description = 'Called from main().'

[[data]]
Language = 'C++'
"Operand Type" = 'mapreduce'
Feature = 'controller'
Subfeature = 'input'
Importance = ''
"Implementation Type" = ''
Syntax = '''
MapReduceInput* input = spec.add_input();
input->set_format("sstable");
input->set_filepattern(..);
input->set_mapper_class("MapperSubclass");'''
Description = 'Can define multiple such inputs.'

[[data]]
Language = 'C++'
"Operand Type" = 'mapreduce'
Feature = 'controller'
Subfeature = 'joined input'
Importance = ''
"Implementation Type" = ''
Syntax = '''
MapReduceInput::JoinedInput *s = input->add_joinedinput();
// set up file format, pattern as usual'''
Description = 'SSTab only. 0 or 1 values per key.'

[[data]]
Language = 'C++'
"Operand Type" = 'mapreduce'
Feature = 'controller'
Subfeature = 'output'
Importance = ''
"Implementation Type" = ''
Syntax = '''
MapReduceOutput* o = spec.mutable_output();
o->set_reducer_class("ReducerSubclass");
o->set_combiner_class("FrequencyCombiner");
o->set_format(..);
o->set_filebase(..); o->set_num_shards(num);'''
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'mapreduce'
Feature = 'mapper'
Subfeature = 'setup'
Importance = ''
"Implementation Type" = ''
Syntax = '''
#include "mapreduce/../mapper.h"
class XYZ : public Mapper{
virtual void Start() { }
virtual void Map(const MapInput& input) {
input.value();}
virtual void Flush();
}
REGISTER_MAPPER(WordCounterMapper);'''
Description = 'REGISTER_MAPPER(WordCounterMapper); code ought to be executed even when the header file is not included as long as the code is part of the linked library. So, put this line in the .cc file rathern than the .h file.'

[[data]]
Language = 'C++'
"Operand Type" = 'mapreduce'
Feature = 'mapper'
Subfeature = 'thread-safe'
Importance = ''
"Implementation Type" = ''
Syntax = 'class XYZ : public ThreadSafeMapper'
Description = 'Multiple threads can use same object in a worker.'

[[data]]
Language = 'C++'
"Operand Type" = 'mapreduce'
Feature = 'columnio'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
#include "file/columnio/public/map-reader.h"
class MapClassName : public Mapper {
 private:
  file::columnio::RecordReader* reader_;
  file::columnio::FieldReader* foo_;
  file::columnio::FieldReader* bar_;

 public:
  virtual void Start() {
    reader_ = file::columnio::GetMapInputReader(this);
    foo_ = reader_->GetFieldReader(0);
    bar_ = reader_->GetFieldReader(1);
  }

  virtual void Map(const MapInput& input) {
    ProcessField(foo_->field_descriptor(), foo_->value(),
                 bar_->field_descriptor(), bar_->value());
    ProcessRecord(input->value());
  }
};
REGISTER_MAPPER(MapClassName);'''
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'mapreduce'
Feature = 'MapInput'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
string v = in.value();
string k = in.key();'''
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'mapreduce'
Feature = 'MapInput'
Subfeature = 'secondary inputs'
Importance = ''
"Implementation Type" = ''
Syntax = '''
// present in addition to in.value()
CHECK( input.num_columns() == k);
for (int i = 0; i < input.num_columns(); i++) {
if (input.has_column(i)) { ..
input.column(i); }}'''
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'mapreduce'
Feature = 'mapper'
Subfeature = 'output'
Importance = ''
"Implementation Type" = ''
Syntax = '''
Output(keyStr, valStr);
OutputWithSecondaryKey(key, secKey, val);
current_map_shard()'''
Description = '''
Can be in any mapreduce method - even Start(), Flush(), Map().
secKey is used for sorting before reduce phase.'''

[[data]]
Language = 'C++'
"Operand Type" = 'mapreduce'
Feature = 'reducer'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
virtual void Reduce(ReduceInput* input){
for (; !input->done(); input->NextValue()) {
val = input->value();
Output(val);}
REGISTER_REDUCER(SumReducer);

'''
Description = 'Simply use identity reducer with appropriate flags to just record mapper outputs.'
