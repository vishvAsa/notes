[[data]]
Language = 'Kotlin'
"Operand Type" = 'statement'
Feature = 'comments'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '// like java'
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'statement'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
    println("Hello, world!!!")
'''
Description = 'semicolon optional'

[[data]]
Language = 'Kotlin'
"Operand Type" = 'statement'
Feature = 'block'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
{
    println("Hello, world!!!")
}'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'conditional'
Feature = 'ternary operator'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'val l = if (b != null) b.length else -1'
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'conditional'
Feature = 'switch case'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
when (x) {
    1 -> print("x == 1")
    2, 3 -> print("x == 2 or 3")
    else -> { // Note the block
        print("x is neither 1 nor 2 or 3")
    }
}'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'conditional'
Feature = 'switch case'
Subfeature = 'extra checks'
Importance = ''
"Implementation Type" = ''
Syntax = '''
    parseInt(s) -> print("s encodes x")
 in 1..10 -> print("x is in the range")
is String -> x.startsWith("prefix")'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'conditional'
Feature = 'if else if'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
when {
    x.isOdd() -> print("x is odd")
    x.isEven() -> print("x is even")
    else -> print("x is funny")
}'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'variable'
Feature = 'define'
Subfeature = 'var val'
Importance = ''
"Implementation Type" = ''
Syntax = '''
var a: String = "abc"
val b: String = "abc"'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'variable'
Feature = 'define'
Subfeature = 'non-nullable'
Importance = ''
"Implementation Type" = ''
Syntax = '''
var a: String = "abc"
a = null // compilation error'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'variable'
Feature = 'define'
Subfeature = 'nullable'
Importance = ''
"Implementation Type" = ''
Syntax = '''
var b: String? = "abc"
b = null // ok'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'function'
Feature = 'define'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
fun main() {
    println("Hello, world!!!")
}
fun start(): String = "OK"
fun foo(name: String, number: Int = 42, toUpperCase: Boolean = false) =
        (if (toUpperCase) name.toUpperCase() else name) + number'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'function'
Feature = 'define'
Subfeature = 'anonymous'
Importance = ''
"Implementation Type" = ''
Syntax = 'x -> x%2==0 '
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'function'
Feature = 'call'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'options.joinToString(prefix="[", postfix="]")'
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'collection'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = 'Uses Java collections with extension functions.'

[[data]]
Language = 'Kotlin'
"Operand Type" = 'collection'
Feature = 'convert'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'someList.toSet()'
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'collection'
Feature = 'concatenate'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'options.joinToString(prefix="[", postfix="]", separator=", ")'
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'collection'
Feature = 'filter'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'numbers.filter { it > 0 } == listOf(1, 2)'
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'collection'
Feature = 'map'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'numbers.map { it * it } == listOf(1, 1, 4)'
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'collection'
Feature = 'flatmap'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'listOf("abc", "12").flatMap { it.toCharList() }'
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'collection'
Feature = 'check'
Subfeature = 'all'
Importance = ''
"Implementation Type" = ''
Syntax = 'collection.all { x -> x%2==0 }'
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'collection'
Feature = 'check'
Subfeature = 'any'
Importance = ''
"Implementation Type" = ''
Syntax = 'collection.any { x -> x%2==0 }'
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'collection'
Feature = 'find'
Subfeature = 'max min'
Importance = ''
"Implementation Type" = ''
Syntax = '''
listOf(1, 42, 4).max() == 42
listOf("a", "ab").minBy { it.length } == "a"'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'collection'
Feature = 'sort'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
listOf("bbb", "a", "cc").sorted() == listOf("a", "bbb", "cc")
listOf("bbb", "a", "cc").sortedBy { it.length } == listOf("a", "cc", "bbb")'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'collection'
Feature = 'sum'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
listOf(1, 5, 3).sum() == 9
listOf("a", "b", "cc").sumBy { it.length() } == 4'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'collection'
Feature = 'iterate'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
for (item in listWithNulls) {
}'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'collection'
Feature = 'group'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'val result = listOf("a", "b", "ba", "ccc", "ad").groupBy { it.length() }'
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'collection'
Feature = 'group'
Subfeature = 'partition'
Importance = ''
"Implementation Type" = ''
Syntax = '''
val (positive, negative) = numbers.partition { it > 0 }
'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'collection'
Feature = 'fold'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
listOf(1, 2, 3, 4).fold(1, {
    partProduct, element ->
    element * partProduct
}) == 24'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'collection'
Feature = 'iterate on non-nulls'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
for (item in listWithNulls) {
    item?.let { println(it) } // prints A and ignores null
}'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'collection'
Feature = 'filter non-null'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
val nullableList: List<Int?> = listOf(1, 2, null, 4)
val intList: List<Int> = nullableList.filterNotNull()
x= arrayListOf(1, 5, 2)'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'collection'
Feature = 'instantiate'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'val listWithNulls: List<String?> = listOf("Kotlin", null)'
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'map'
Feature = 'initialize'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'mapOf(1 to listOf("a", "b"), 2 to listOf("ba", "ad"), 3 to listOf("ccc"))'
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'string'
Feature = 'formatting'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
"""dadsf ${month} ""
"asdf"'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'string'
Feature = 'length'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'b.length'
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'data class'
Feature = 'define'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
data class Person(var name: String, var age: Int)
'''
Description = 'Generates equals/hashCode, toString etc..'

[[data]]
Language = 'Kotlin'
"Operand Type" = 'data class'
Feature = 'instantiate'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'Person("Alice", 29)'
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'option'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'option'
Feature = 'get contained object'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'xyz!!'
Description = 'possibly null!'

[[data]]
Language = 'Kotlin'
"Operand Type" = 'option'
Feature = 'safe call'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
val b: String? = null
println(b?.length) // Int? return type, prints null'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'option'
Feature = 'safe call with default'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'val l = b?.length ?: -1'
Description = 'Aka Elvis operator'

[[data]]
Language = 'Kotlin'
"Operand Type" = 'option'
Feature = 'assignment'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'person?.department?.head = managersPool.getManager()'
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'interface'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
interface Foo {
    val count: Int
}'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'class'
Feature = 'companion object'
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = 'classes do not have static methods. Hence companion singletons.'

[[data]]
Language = 'Kotlin'
"Operand Type" = 'class'
Feature = 'companion object'
Subfeature = 'define'
Importance = ''
"Implementation Type" = ''
Syntax = '''
class MyClass {
    companion object Factory {
        fun create(): MyClass = MyClass()
    }
}'''
Description = 'The name of the companion object can be omitted, in which case the name Companion will be used'

[[data]]
Language = 'Kotlin'
"Operand Type" = 'class'
Feature = 'companion object'
Subfeature = 'call static function'
Importance = ''
"Implementation Type" = ''
Syntax = '''
val instance = MyClass.create()
'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'class'
Feature = 'hierarchy'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'Any is the root. '
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'class'
Feature = 'cast'
Subfeature = 'null safe'
Importance = ''
"Implementation Type" = ''
Syntax = 'val aInt: Int? = a as? Int'
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'class'
Feature = 'define'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'class Invoice { ... }'
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'class'
Feature = 'define'
Subfeature = 'abstract'
Importance = ''
"Implementation Type" = ''
Syntax = '''
abstract class Derived : Base() {
    override abstract fun f()
}'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'class'
Feature = 'extend'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'class Derived(p: Int) : Base(p)'
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'class'
Feature = 'constructor'
Subfeature = 'primary'
Importance = ''
"Implementation Type" = ''
Syntax = '''
class Person constructor(firstName: String) {...}
class Person(firstName: String) { ... }'''
Description = 'If the constructor has annotations or visibility modifiers, the constructor keyword is required, and the modifiers go before it.'

[[data]]
Language = 'Kotlin'
"Operand Type" = 'class'
Feature = 'constructor'
Subfeature = 'secondary'
Importance = ''
"Implementation Type" = ''
Syntax = '''
class Person {
    constructor(parent: Person) {
        super(parent)
        parent.children.add(this)
    }
}'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'class'
Feature = 'method'
Subfeature = 'override'
Importance = ''
"Implementation Type" = ''
Syntax = '''
class Derived() : Base() {
    override fun v() { ... }
}'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'class'
Feature = 'method'
Subfeature = 'call superclass fn'
Importance = ''
"Implementation Type" = ''
Syntax = '''
super.f()
class Bar : Foo() {
 inner class Baz {
        fun g() {
            super@Bar.f() // Calls Foo's implementation of f()
            println(super@Bar.x) // Uses Foo's implementation of x's getter
        }
    }
}'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'class'
Feature = 'property'
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = 'a getter-setter pair - backed by another property or field.'

[[data]]
Language = 'Kotlin'
"Operand Type" = 'class'
Feature = 'property'
Subfeature = 'override'
Importance = ''
"Implementation Type" = ''
Syntax = '''
    override var count: Int = 0
'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'class'
Feature = 'property'
Subfeature = 'define'
Importance = ''
"Implementation Type" = ''
Syntax = '''
val allByDefault: Int?
var initialized = 1
lateinit var subject: TestSubject
'''
Description = '''
vars should be initialized, vals must be initialized in constructor.
Come with default getters and setters.'''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'class'
Feature = 'property'
Subfeature = 'define'
Importance = ''
"Implementation Type" = ''
Syntax = '''
val isEmpty: Boolean
    get() = this.size == 0
    set(value) {
        ...
    }
val isEmpty get() = this.size == 0 '''
Description = 'can omit the property type if it can be inferred from the getter'

[[data]]
Language = 'Kotlin'
"Operand Type" = 'class'
Feature = 'property'
Subfeature = 'define: implicit backing field'
Importance = ''
"Implementation Type" = ''
Syntax = '''
var counter = 0 // Note: the initializer assigns the backing field directly
    set(value) {
        if (value >= 0) field = value
    }'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'class'
Feature = 'extension method'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
fun MutableList<Int>.swap(index1: Int, index2: Int) {
    val tmp = this[index1] // 'this' corresponds to the list
    this[index1] = this[index2]
    this[index2] = tmp
}'''
Description = '''
Class being extended is called "receiver class".
Extensions are resolved statically, not dynamically.
member function cannot be overridden with an extension.'''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'class (nullable)'
Feature = 'extension method'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
fun Any?.toString(): String {
    if (this == null) return "null"
    // after the null check, 'this' is autocast to a non-null type, so the toString() below
    // resolves to the member function of the Any class
    return toString()
}'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'class'
Feature = 'extension property'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
val <T> List<T>.lastIndex: Int
    get() = size - 1'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'singleton'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
object DataProviderManager {
...
}'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'singleton'
Feature = 'anonymous'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
object : MouseAdapter() {
    override fun mouseClicked(e: MouseEvent) { ... }

    override fun mouseEntered(e: MouseEvent) { ... }
}'''
Description = ''

[[data]]
Language = 'Kotlin'
"Operand Type" = 'singleton'
Feature = 'anonymous'
Subfeature = 'single abstract method'
Importance = ''
"Implementation Type" = ''
Syntax = 'Collections.sort(arrayList, { x, y -> y-x })'
Description = ''
