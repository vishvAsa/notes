[[data]]
Language = 'Scala, Java'
"Operand Type" = 'Akka'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = '''
toolkit for building highly concurrent, distributed, and resilient message-driven applications for Java and Scala.
Can easily keep a ready threadpool and let "actors" use them as needed.  A good way of managing available threads.'''

[[data]]
Language = 'Scala, Java'
"Operand Type" = 'Akka Actor'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = '''
Actors are objects which communicate exclusively by exchanging messages.
A container for State, Behavior, a Mailbox, Child Actors and a Supervisor Strategy. '''

[[data]]
Language = 'Scala, Java'
"Operand Type" = 'Akka Actor'
Feature = 'lifecycle'
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = '''
context.actorOf() creates actor. preStart() called.
Restart() - preRestart(), new incarnation created, postRestart() called.
Resume()
Stop() or context.stop() or PoisonPill message destroys actor incarnation. postStop called.'''

[[data]]
Language = 'Scala, Java'
"Operand Type" = 'Akka Actor'
Feature = 'hierarchy'
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = ' Actors form hierarchies based on supervision. supervisor delegates tasks to subordinates and therefore must respond to their failures. '

[[data]]
Language = 'Scala, Java'
"Operand Type" = 'Akka Actor'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'best practices'
Syntax = ''
Description = '''
 avoid blocking and hogging resources.
Do not pass mutable objects between actors. 
not routinely send behavior within messages (which may be tempting using Scala closures)'''

[[data]]
Language = 'Scala, Java'
"Operand Type" = 'Akka ActorRef'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = '''
within an actor object:
.self, .children, .parent
context.actorSelection("../brother")
context.actorSelection("../*")'''
Description = 'Represents an incarnation; has a path, UID. main purpose is to support sending messages to the actor it represents.'

[[data]]
Language = 'Scala, Java'
"Operand Type" = 'Akka Actor System'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = 'A container of Actors + resources (threads. logging, config etc..) to run them. implements trait ActorRefFactory'

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Actor System'
Feature = 'instantiate'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '    val system = ActorSystem("pingpong")'
Description = ''

[[data]]
Language = 'Scala, Java'
"Operand Type" = 'Akka Execution Context'
Feature = 'from actor system'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
implicit val context = system.dispatcher
'''
Description = ''

[[data]]
Language = 'Scala, Java'
"Operand Type" = 'Akka Execution Context'
Feature = 'global'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'import scala.concurrent.ExecutionContext.Implicits.global'
Description = ''

[[data]]
Language = 'Scala, Java'
"Operand Type" = 'Akka Actor Path'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = '''
someActorRef.path
somePath.parent'''
Description = '''
Place in an actor system with actors. 
A path can only contain one running actor.'''

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Actor'
Feature = 'construct'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
import akka.event.Logging

class MyActor extends Actor {
  val log = Logging(context.system, this)

  def receive = {
    case "test" => log.info("received test")
    case SomeCaseObj => {...}
    case _      => log.info("received unknown message")
  }
}'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Actor'
Feature = 'construct'
Subfeature = 'with extra args'
Importance = ''
"Implementation Type" = ''
Syntax = '''
class Ponger(pinger: ActorRef) extends Actor {
  def receive = {
    case Ping =>
      pinger ! Pong
  }
}'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Actor'
Feature = 'handle messages'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
def receive = {
    case Ping =>
      sender() ! Pong
  }'''
Description = 'sender() gets the ActorRef of the sender.'

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Actor'
Feature = 'send message'
Subfeature = 'fire and forget'
Importance = ''
"Implementation Type" = ''
Syntax = 'actorRef ! messageCaseObj // aka tell'
Description = 'send a message asynchronously and return immediately. Also known as tell.'

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Actor'
Feature = 'send message'
Subfeature = 'fire and get answer'
Importance = ''
"Implementation Type" = ''
Syntax = '''
implicit val timeout = Timeout(5 seconds)
actorRef ? messageCaseObj // aka ask'''
Description = 'sends a message asynchronously and returns a Future representing a possible reply.'

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Actor'
Feature = 'send Future message'
Subfeature = ''
Importance = ''
"Implementation Type" = 'caveat'
Syntax = '''
http.singleRequest(HttpRequest(uri = "http://akka.io"))
      .pipeTo(sender())'''
Description = ' you should not access the actor’s state (eg. sender()) from within the Future’s callbacks (such as map, onComplete, …) and instead you should use the pipeTo pattern'

[[data]]
Language = 'Scala, Java'
"Operand Type" = 'Akka Actor Props'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = 'configuration class, freely shareable recipe for creating an actor including associated deployment information'

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Actor Props'
Feature = 'instantiate'
Subfeature = 'extra ActorRef'
Importance = ''
"Implementation Type" = ''
Syntax = 'Props(classOf[Ponger], pinger)'
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Actor Props'
Feature = 'instantiate'
Subfeature = 'extra args'
Importance = ''
"Implementation Type" = ''
Syntax = '''
Props(classOf[ValueClassActor], arg.value)
Props(new ValueClassActor(arg))'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Actor'
Feature = 'instantiate'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
    val pinger = system.actorOf(Props[Pinger], "pinger")
context.actorOf(...) // within supervisor'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Actor'
Feature = 'get from path'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
context.actorSelection("/user/serviceA/aggregator")
'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Actor'
Feature = 'stop'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
system.stop(...)
context.stop(child)'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Stream'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = '''
A graph of processing elements, each with bounded memory. Uses asynchronous, non-blocking backpressure .
This property of bounded buffers is one of the differences from the actor model, where each actor usually has an unbounded, or a bounded, but dropping mailbox. '''

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Stream Element'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = 'An element is the processing unit of streams. All operations transform and transfer elements from upstream to downstream.'

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Stream Processing Stage'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = '''
Nodes for operations like map(), filter(), custom GraphStage s and graph junctions like Merge or Broadcast.
They're immutable - so assign to new vars.
They may have side-channels - to let other threads communicate (eg - insert values into source stream, read values from an output.)'''

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Stream Source'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = '''
A processing stage with exactly one output, emitting data elements whenever downstream processing stages are ready to receive them.
Source + flow = new source'''

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Stream Source'
Feature = 'instantiate'
Subfeature = 'from iterable'
Importance = ''
"Implementation Type" = ''
Syntax = 'val source: Source[Int, NotUsed] = Source(1 to 100)'
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Stream Source'
Feature = 'instantiate'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
Source.fromFuture(Future.successful("Hello Streams!"))
Source.single("only one element")
Source.empty'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Stream Source'
Feature = 'instantiate'
Subfeature = 'side channel'
Importance = ''
"Implementation Type" = ''
Syntax = 'val source: Source[Int, Promise[Option[Int]]] = Source.maybe[Int]'
Description = 'An external thread can supply a value to this source using this side channel.'

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Stream Source'
Feature = 'instantiate'
Subfeature = 'composite'
Importance = ''
"Implementation Type" = ''
Syntax = '''
val source: Source[Int, Promise[Option[Int]]] = Source.maybe[Int]
val flow1: Flow[Int, Int, NotUsed] = Flow[Int].take(100)
val nestedSource: Source[Int, Promise[Option[Int]]] =
  source.viaMat(flow1)(Keep.left).named("nestedSource")'''
Description = 'nestedSource uses the side-channel for source here, thanks to Keep.left.'

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Stream Source'
Feature = 'instantiate'
Subfeature = 'composite'
Importance = ''
"Implementation Type" = ''
Syntax = '''
newSource = someSource.via(someFlow)
// Sortcut for the viaMat shown above.'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Stream Sink'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = '''
A processing stage with exactly one input, requesting and accepting data elements possibly slowing down the upstream producer of elements
flow + sink = new sink'''

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Stream Sink'
Feature = 'instantiate'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
val sink = Sink.fold[Int, Int](0)(_ + _)
Sink.head
Sink.ignore
Sink.foreach[String](println(_))
newSink = someFlow.to(someSink)'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Stream Sink'
Feature = 'instantiate'
Subfeature = 'side channel'
Importance = ''
"Implementation Type" = ''
Syntax = '''
val nestedSink: Sink[Int, (Future[OutgoingConnection], Future[String])] =
  nestedFlow.toMat(sink)(Keep.both)'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Stream Flow'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = 'A processing stage which has exactly one input and output, which connects its up- and downstreams by transforming the data elements flowing through it.'

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Stream Flow'
Feature = 'instantiate'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
Flow[Int].map(_ * 2)
Flow[Int].filter(_ != 0) 
Flow[Int].take(100)'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Stream Flow'
Feature = 'instantiate'
Subfeature = 'throttler'
Importance = ''
"Implementation Type" = ''
Syntax = 'val flow: Flow[Int, Int, Cancellable] = throttler'
Description = '''
A flow that internally throttles elements to 1/second, and returns a Cancellable
// which can be used to shut down the stream'''

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Stream Flow'
Feature = 'instantiate'
Subfeature = 'side-channel'
Importance = ''
"Implementation Type" = ''
Syntax = '''
// stuff gets emitted to outgoing connection too.
val flow3: Flow[ByteString, ByteString, Future[OutgoingConnection]] =
  Tcp().outgoingConnection("localhost", 8080)'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Stream RunnableGraph'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = 'A Flow that has both ends “attached” to a Source and Sink respectively, and is ready to be run() after materializing'

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Stream RunnableGraph'
Feature = 'instantiate'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'Source(1 to 6).via(someFlow).to(Sink.foreach(println(_)))'
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Stream RunnableGraph'
Feature = 'instantiate'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'val runnable: RunnableGraph[Future[Int]] = source.toMat(sink)(Keep.right)'
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Stream RunnableGraph'
Feature = 'instantiate'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
import GraphDSL.Implicits._
RunnableGraph.fromGraph(GraphDSL.create() { implicit builder =>
  val A: Outlet[Int]                  = builder.add(Source.single(0)).out
  val B: UniformFanOutShape[Int, Int] = builder.add(Broadcast[Int](2))
  val C: UniformFanInShape[Int, Int]  = builder.add(Merge[Int](2))
  val F: UniformFanInShape[Int, Int]  = builder.add(Merge[Int](2))
  val G: Inlet[Any]                   = builder.add(Sink.foreach(println)).in
                C     <~      F
  A  ~>  B  ~>  C     ~>      F
  ClosedShape
})'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Stream RunnableGraph'
Feature = 'instantiate'
Subfeature = 'Broadcast'
Importance = ''
"Implementation Type" = ''
Syntax = '''
val otherSink: Sink[Int, NotUsed] =
  Flow[Int].alsoTo(Sink.foreach(println(_))).to(Sink.ignore)
Source(1 to 6).to(otherSink)'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Stream RunnableGraph'
Feature = 'instantiate'
Subfeature = 'parallelize'
Importance = ''
"Implementation Type" = ''
Syntax = '''
Source(List(1, 2, 3))
  .map(_ + 1).async
  .map(_ * 2)
  .to(Sink.ignore)'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Stream RunnableGraph'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'val sum: Future[Int] = runnable.run()'
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Stream RunnableGraph'
Feature = 'construct and run'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
val sum: Future[Int] = source.runWith(sink)
'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Stream RunnableGraph'
Feature = 'run'
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = 'A graph is a blueprint.  Stream materialization takes the blueprint, adds resources and gets it to run. '

[[data]]
Language = 'Scala'
"Operand Type" = 'Akka Stream RunnableGraph'
Feature = 'run'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'someGraph.run()'
Description = 'Materialization is triggered at so called “terminal operations”. '
