[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'stdout'
Subfeature = 'output'
Importance = ''
"Implementation Type" = 'operator'
Syntax = 'print'
Description = '''
To be sure, convert unicode strings using
str.encode('utf-8')'''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'stderr'
Subfeature = 'exit with output'
Importance = ''
"Implementation Type" = 'function'
Syntax = 'sys.exit(msgStr)'
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'stderr'
Subfeature = 'file object'
Importance = ''
"Implementation Type" = ''
Syntax = 'sys.stderr'
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'stderr'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
 import sys

 print >> sys.stderr, 'spam'

 sys.stderr.write('spam\n')
'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'stdin'
Subfeature = 'input with prompt'
Importance = ''
"Implementation Type" = ''
Syntax = 'raw\_input("Enter name: ")'
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'stdin'
Subfeature = 'file object'
Importance = ''
"Implementation Type" = ''
Syntax = 'sys.stdin'
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'stdin'
Subfeature = 'set encoding'
Importance = ''
"Implementation Type" = ''
Syntax = '''
UTF8Reader = codecs.getreader('utf8')
sys.stdin = UTF8Reader(sys.stdin)'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'stdin'
Subfeature = 'set encoding'
Importance = ''
"Implementation Type" = ''
Syntax = '''
import sys
reload(sys) # required for below
sys.setdefaultencoding(‘utf-8’)'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'file'
Subfeature = 'open'
Importance = ''
"Implementation Type" = ''
Syntax = '''f = open(filename, 'r')'''
Description = 'Other modes: w, r+, a'

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'unicode file'
Subfeature = 'open'
Importance = 'write'
"Implementation Type" = ''
Syntax = ''' codecs.open(out_file, 'w', 'utf-8') as outfile'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'unicode file'
Subfeature = 'open'
Importance = ''
"Implementation Type" = ''
Syntax = '''
import codecs
f = codecs.open('unicode.rst', encoding='utf-8')
for line in f:
    print repr(line)'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'directory'
Subfeature = 'list'
Importance = ''
"Implementation Type" = ''
Syntax = 'os.listdir(mypath)'
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'directory'
Subfeature = 'list'
Importance = ''
"Implementation Type" = ''
Syntax = 'dir_entries = os.scandir(somepath)'
Description = '''
 DirEntry exposes file type and attribute info.
'''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'directory'
Subfeature = 'get files'
Importance = ''
"Implementation Type" = ''
Syntax = '''onlyfiles = [ f for f in listdir(mypath) if isfile(join(mypath,f)) and f.startswith('v')]'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'directory'
Subfeature = 'delete'
Importance = ''
"Implementation Type" = ''
Syntax = 'shutil.rmtree(path=export_dir, ignore_errors=True)'
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'file'
Subfeature = 'make parent directories'
Importance = ''
"Implementation Type" = ''
Syntax = 'os.makedirs(path, exist_ok=True)'
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'file'
Subfeature = 'copy'
Importance = ''
"Implementation Type" = ''
Syntax = 'shutil.copyfile(src, dest)'
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'file'
Subfeature = 'read lines'
Importance = ''
"Implementation Type" = ''
Syntax = 'lines = f.readlines()'
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'file'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'lines = fileinput.input(fileName)'
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'file'
Subfeature = 'read'
Importance = ''
"Implementation Type" = ''
Syntax = 'text = f.read()'
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'file'
Subfeature = 'write'
Importance = ''
"Implementation Type" = ''
Syntax = 'f.write(str)'
Description = 'Works for unicode files opened with codex.open'

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'file'
Subfeature = 'write line'
Importance = ''
"Implementation Type" = ''
Syntax = 'print >>file, ..'
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'file'
Subfeature = 'close'
Importance = ''
"Implementation Type" = ''
Syntax = 'f.close()'
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'stringIO'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'f = cStringIO.StringIO()'
Description = 'Useful for testing methods which write to or read from files.'

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'temp file'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
import tempfile

(file_handle, abs_path) = tempfile.mkstemp(suffix='somesuffix')'''
Description = '''
Very secure - no race conditions.
Caller is responsible for deletion.'''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'path'
Subfeature = 'absolute path'
Importance = ''
"Implementation Type" = ''
Syntax = 'os.path.abspath(str)'
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'path'
Subfeature = 'directory path'
Importance = ''
"Implementation Type" = ''
Syntax = 'os.path.dirname(..)'
Description = 'get parent dir'

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'path'
Subfeature = 'remove extension'
Importance = ''
"Implementation Type" = ''
Syntax = 'os.path.splitext(..)'
Description = 'Deals with file.sadf.ext and .file well.'

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'path'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'os.path.join(..)'
Description = 'Inserts / where necessary.'

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'path'
Subfeature = 'file name'
Importance = ''
"Implementation Type" = ''
Syntax = 'os.path.basename(..)'
Description = '''returns '' if the path is itself a directory'''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'path'
Subfeature = 'check'
Importance = ''
"Implementation Type" = ''
Syntax = 'os.path.exists'
Description = 'follows symlinks'

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'path'
Subfeature = 'visit all'
Importance = ''
"Implementation Type" = ''
Syntax = '''
def fn(arg, dir, files):...
os.path.walk(path, fn, arg)'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'path'
Subfeature = 'script path'
Importance = ''
"Implementation Type" = ''
Syntax = '''
__location__ = os.path.realpath(
    os.path.join(os.getcwd(), os.path.dirname(__file__)))'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'http'
Subfeature = 'get'
Importance = ''
"Implementation Type" = ''
Syntax = 'urllib.urlget(url) '
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'internetarchive'
Subfeature = 'get item'
Importance = ''
"Implementation Type" = ''
Syntax = 'archive_item = internetarchive.get_item("mahAbhArata-mUla-paThanam-GP")'
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'internetarchive'
Subfeature = 'upload'
Importance = ''
"Implementation Type" = ''
Syntax = 'responses = archive_item.upload(upload_locus_to_local_file_map, verbose=False, checksum=True, verify=False)'
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'internetarchive'
Subfeature = 'delete'
Importance = ''
"Implementation Type" = ''
Syntax = '''
internetarchive.delete(archive_item.identifier, files=obsolete_original_item_file_names, cascade_delete=True)
internetarchive.delete(archive_item.identifier, glob_pattern="*", verbose=True)
'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'directory'
Subfeature = 'list matches'
Importance = ''
"Implementation Type" = ''
Syntax = '''glob.glob('?.gif')'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'directory'
Subfeature = 'current'
Importance = ''
"Implementation Type" = ''
Syntax = 'os.getcwd'
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'csv'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
import csv
with open(data_file, 'rb') as csvfile:
  chandas_reader = csv.reader(csvfile)
  for row in chandas_reader:
    row.join(',')'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'csv'
Subfeature = 'unicode'
Importance = ''
"Implementation Type" = ''
Syntax = '''
with open(data_file, 'r') as csvfile:
  chandas_reader =  unicodecsv.reader(csvfile, encoding='utf-8')

spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'csv'
Subfeature = 'operate on lines in memory'
Importance = ''
"Implementation Type" = ''
Syntax = '''
with open(data_file, 'r') as f:
    lines.extend(f.readlines())
    f.close()
col1 = [row[0] for row in csv.reader(lines)]'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'csv'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
import pandas as pd
print pd.read_csv('value.txt')
'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'logging'
Subfeature = 'concept'
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = '''
Loggers expose the interface that application code directly uses.
Handlers send the log records (created by loggers) to the appropriate destination.
Filters provide a finer grained facility for determining which log records to output.
Formatters specify the layout of log records in the final output.'''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'logging'
Subfeature = 'setup'
Importance = ''
"Implementation Type" = ''
Syntax = '''
import logging
logging.basicConfig(
# This should be at the top of the file to preempt earlier imports from resetting the level.
    level=logging.DEBUG,
    format="%(levelname)s: %(asctime)s %(filename)s:%(lineno)d %(message)s"
)'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'logging'
Subfeature = 'resetup'
Importance = ''
"Implementation Type" = ''
Syntax = '''
# Remove all handlers associated with the root logger object.
for handler in logging.root.handlers[:]:
    logging.root.removeHandler(handler)
logging.basicConfig(
    level=logging.DEBUG,
    format="%(levelname)s:%(asctime)s:%(module)s:%(filename)s:%(lineno)d %(message)s"
)
'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'logging'
Subfeature = 'log'
Importance = ''
"Implementation Type" = ''
Syntax = '''
logging.info(str)
logging.critical(..)'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'IO'
Feature = 'logging'
Subfeature = 'set level for module'
Importance = ''
"Implementation Type" = ''
Syntax = '''logging.getLogger('internetarchive').setLevel(logging.WARNING)'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'http'
Feature = 'url parsing'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
from urlparse import urlparse
parsed = urlparse('http://user:pass@NetLoc:80/path;parameters?query=argument#fragment')'''
Description = '''
scheme  : http
netloc  : user:pass@NetLoc:80
path    : /path
params  : parameters
query   : query=argument
fragment: fragment
username: user
password: pass
hostname: netloc (netloc in lower case)
port    : 80'''

[[data]]
Language = 'Python'
"Operand Type" = 'http'
Feature = 'set headers'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
from urllib3.connectionpool import log as urllibLogger
urllibLogger.setLevel(logging.WARNING)
# Set headers
headers = requests.utils.default_headers()
headers.update({ 'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0'})'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'http'
Feature = 'request'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '    result = requests.get(url, headers)'
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'http'
Feature = 'request'
Subfeature = 'instantiation'
Importance = ''
"Implementation Type" = ''
Syntax = '''
data = urllib.urlencode(paramMap)
request = urllib2.Request(url, data)'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'http'
Feature = 'request'
Subfeature = 'send'
Importance = ''
"Implementation Type" = ''
Syntax = '''
try:        
  response = open_url(request)
  content = response.read()
except urllib2.HTTPError, ex:
  if ex.code == 500: ..'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'http'
Feature = 'rest call'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
import requests
url = "https://api.vedavaapi.org/scala/grammar/v1/generators/alternateFormsWx/yAwi/karwari/lot/pra/1/parasmEpaxI"
response = requests.get(url)
response.json()'''
Description = ''
