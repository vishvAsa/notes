[[data]]
Language = 'Bash'
"Operand Type" = 'verbosity'
Feature = 'echo commands before running'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
set -o verbose
set -x #echo on'''
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'arguments'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '$1 $2 $3...'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'arguments'
Feature = 'quoted'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
MYARG="my multiword argument"
command "$MYARG"'''
Description = '''
These wont work.
MYARG="\"my multiword argument\""
somecommand $MYARG

### THIS IS NOT (!!!!) THE SAME AS ###
command "my multiword argument"
'''

[[data]]
Language = 'Bash'
"Operand Type" = 'script directory'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '`dirname $0`'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'expansion'
Feature = 'Force evaluation without escaping.'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
$ x="{z,b,c}"
$ eval echo "a${x}"
az ab ac
$echo "a${x}"
a{z,b,c}'''
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'expansion'
Feature = 'command'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '`expr`'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'expansion'
Feature = 'command'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '$(command)'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'expansion'
Feature = 'parameter'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
 Preferred style for 'special' variables:
echo "Positional: $1" "$5" "$3"
echo "Specials: !=$!, -=$-, _=$_. ?=$?, #=$# *=$* @=$@ \$=$$ ..."

# Braces necessary:
echo "many parameters: ${10}"
# Braces avoiding confusion:
# Output is "a0b0c0"
set -- a b c
echo "${1}0${2}0${3}0"
'''
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'expansion'
Feature = 'parameter'
Subfeature = 'default value'
Importance = ''
"Implementation Type" = ''
Syntax = '''
${parameter:-word}
${parameter:=word} // set if null
${parameter:?word} // print word if null
${parameter:+word} // replace if set'''
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'expansion'
Feature = 'parameters by prefix'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
${!prefix*}
${!prefix@}'''
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'expansion'
Feature = 'brace expansion'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
 echo a{d,c,b}e
mkdir /usr/local/src/bash/{old,new,dist,bugs}'''
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'expansion'
Feature = 'filename'
Subfeature = 'multiple characters'
Importance = ''
"Implementation Type" = ''
Syntax = 'ls *'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'expansion'
Feature = 'filename'
Subfeature = 'single character'
Importance = ''
"Implementation Type" = ''
Syntax = 'ls ??'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'expansion'
Feature = 'filename'
Subfeature = 'character match'
Importance = ''
"Implementation Type" = ''
Syntax = '''
[â€¦]
classes: alnum   alpha   ascii   blank   cntrl   digit   graph   lower
print   punct   space   upper   word    xdigit'''
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'expansion'
Feature = 'extglob regex'
Subfeature = 'zero or one'
Importance = ''
"Implementation Type" = ''
Syntax = '''
shopt -s extglob
?(pattern-list)'''
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'expansion'
Feature = 'extglob regex'
Subfeature = 'zero or more'
Importance = ''
"Implementation Type" = ''
Syntax = '''
shopt -s extglob
*(pattern-list)'''
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'expansion'
Feature = 'extglob regex'
Subfeature = 'one or more'
Importance = ''
"Implementation Type" = ''
Syntax = '''
shopt -s extglob
+(pattern-list)'''
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'expansion'
Feature = 'extglob regex'
Subfeature = 'match one of'
Importance = ''
"Implementation Type" = ''
Syntax = '@(pattern-list)'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'expansion'
Feature = 'extglob regex'
Subfeature = '''don't match'''
Importance = ''
"Implementation Type" = ''
Syntax = '!(pattern-list)'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'expansion'
Feature = 'case options'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'shopt -s nocaseglob'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'expansion'
Feature = 'include .files'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'shopt -s dotglob'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'expansion'
Feature = 'arithmatic'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '$(( expression ))'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'statement'
Feature = 'codeblock'
Subfeature = 'abort on failure'
Importance = ''
"Implementation Type" = ''
Syntax = 'cmd1&& cmd2'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'statement'
Feature = 'assignment'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'VAR1 = val'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'statement'
Feature = 'decision'
Subfeature = 'if'
Importance = ''
"Implementation Type" = ''
Syntax = '''
* Two [[ better in bash.
if [[ cond ]]; then st1 elif .. else .. fi
OR
if [[ cond ]]
then
st1
else
..
fi'''
Description = 'Note space when specifying condition.'

[[data]]
Language = 'Bash'
"Operand Type" = 'loop'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'ls dli|while read f; do echo $f; mv "dli/$f/tifs.zip" "dli/$f/$f.zip"; done;'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'loop'
Feature = ''
Subfeature = 'over files'
Importance = ''
"Implementation Type" = ''
Syntax = '''
for f in $(ls $prod/??/{abc,xyz}.txt); do
...
done
for i in "${arrayName[@]}"; ...
'''
Description = '''
this does not work, though:
for f in $(ls $prod/??/{abc}.txt); do
...
done'''

[[data]]
Language = 'Bash'
"Operand Type" = 'function'
Feature = 'definition'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'fnName(){...}'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'function'
Feature = 'definition'
Subfeature = 'arguments'
Importance = ''
"Implementation Type" = ''
Syntax = ' $1 etc..'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'function'
Feature = 'call'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'func2 arg1'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'IO'
Feature = 'print'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'echo "abcd $asdf"'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'IO'
Feature = 'print'
Subfeature = 'multi-line'
Importance = ''
"Implementation Type" = ''
Syntax = '''
cat << EOF
multipleLines; EOF '''
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'IO'
Feature = ''
Subfeature = 'read into variable'
Importance = ''
"Implementation Type" = ''
Syntax = 'read -r -p "Are you sure? [y/N] " response'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'variable'
Feature = 'declaration'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ' -z $VARNAME'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'variable'
Feature = 'check existence'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '[ -x $VAR ]'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'variable'
Feature = 'reference'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '$VAR_NAME ${VAR_NAME}'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'string'
Feature = 'instantiation'
Subfeature = 'formatted'
Importance = ''
"Implementation Type" = ''
Syntax = '"$stringA$stringB"'
Description = 'created in heap space, returns pointer?'

[[data]]
Language = 'Bash'
"Operand Type" = 'string'
Feature = 'instantiation'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = " 'asdf#d$s'"
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'string'
Feature = 'matching'
Subfeature = 'substring'
Importance = ''
"Implementation Type" = ''
Syntax = '''
${stringOrVar%%substring}
"$str1" =~ substr'''
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'string'
Feature = 'matching'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
string='My long string';

if [[ $string == *"My long"* ]]
then
  echo "It's there!";
fi'''
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'string'
Feature = 'comparison'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
"$str1" == "$str2" # same as =
!= < >
-z "$str" # length check'''
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'string'
Feature = 'regex check'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]] ; then ... fi'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'string'
Feature = 'file basename'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '${full_path_name##*/}'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'integer'
Feature = 'comparison'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '$a -eq $b'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'OS'
Feature = 'execute command'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'eval $STRVAR'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'UTF8'
Feature = 'octal'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'array'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'ARRAY=(one two three)'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'array'
Feature = 'indexing'
Subfeature = ''
Importance = ''
"Implementation Type" = 'Operator'
Syntax = '${area2[0]}'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'array'
Feature = 'reference'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '${colors[@]}'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'sequence'
Feature = 'instantiation'
Subfeature = 'literal'
Importance = ''
"Implementation Type" = 'operator'
Syntax = '{0..7}'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'sequence'
Feature = 'instantiation'
Subfeature = 'literal'
Importance = ''
"Implementation Type" = 'function'
Syntax = 'seq 0 7'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'sequence'
Feature = 'check empty'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'if test ! -z "$jobs"; then ... fi'
Description = ''

[[data]]
Language = 'Bash'
"Operand Type" = 'sequence'
Feature = 'iteration'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
for i in `seq $maxMachineNumber`;
do
 echo $i 
done'''
Description = ''
