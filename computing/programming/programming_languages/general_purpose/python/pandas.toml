[[data]]
Language = 'Python'
"Operand Type" = 'pandas'
Feature = 'concept'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'easy-to-use data structures and data analysis tools for the Python'

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.Series'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ' s = pd.Series([1,3,5,np.nan,6,8])'
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = 'concept'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = '''
Two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes (rows and columns). Rows and Columns can have labels (col C) as well as positions (3rd col).
Can be thought of as a dict-like container for Series objects. '''

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'axis'
Syntax = ''
Description = '''
0=down and 1=across.
Use axis=0 to apply a method down each column, or to the row labels (the index).
Use axis=1 to apply a method across each row, or to the column labels.'''

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = 'instiantiation'
Subfeature = 'with DateTimeIndex'
Importance = ''
"Implementation Type" = ''
Syntax = '''
dates = pd.date_range('20130101', periods=6)
df = pd.DataFrame(np.random.randn(6,4), index=dates, columns=list('ABCD'))
'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = 'instiantiation'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'pandas.DataFrame(data=None, index=None, columns=None, dtype=None, copy=False)'
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = 'instiantiation'
Subfeature = 'list of row lists'
Importance = ''
"Implementation Type" = ''
Syntax = 'pandas.DataFrame(data=[[...], [...]])'
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = 'instiantiation'
Subfeature = 'from dict'
Importance = ''
"Implementation Type" = ''
Syntax = '''
pd.DataFrame.from_dict(data)

# A column matrix
pd.DataFrame.from_dict(data, orient='index')'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = 'instiantiation'
Subfeature = 'from column dicts'
Importance = ''
"Implementation Type" = ''
Syntax = '''
 df2 = pd.DataFrame({ 'A' : 1.,
   ....:                      'B' : pd.Timestamp('20130102'),
   ....:                      'C' : pd.Series(1,index=list(range(4)),dtype='float32'),
   ....:                      'D' : np.array([3] * 4,dtype='int32'),
   ....:                      'E' : pd.Categorical(["test","train","test","train"]),
   ....:                      'F' : 'foo' })'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = 'instiantiation'
Subfeature = 'from csv'
Importance = ''
"Implementation Type" = ''
Syntax = '''
with file.Open(filename) as csv_file:
    frame = pd.read_csv(csv_file, sep='\t', header=None, index_col=0, 
    names=[0, 'asdf'], # Includes index column
    dtype={‘a’: np.float64, ‘b’: np.int32})'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = 'indexing'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'adhyaaya_data = adhyaaya_data.set_index("पर्व-अध्यायः")'
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = 'fill default values'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ' frame.colName.fillna(1.0, inplace=True)'
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = 'fix empty strings'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
frame = pd.read_csv(csv_file)
frame.fillna('')'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = 'introspect'
Subfeature = 'print snippets and stats'
Importance = ''
"Implementation Type" = ''
Syntax = '''
df.head()
df.tail(3)
df.describe()'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = 'introspect'
Subfeature = 'get row index'
Importance = ''
"Implementation Type" = ''
Syntax = 'df.index # returns index object'
Description = ' When slicing, the start bounds is included, while the upper bound is excluded. '

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = 'introspect'
Subfeature = 'get columns'
Importance = ''
"Implementation Type" = ''
Syntax = 'df.columns'
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = 'transpose'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'df.T'
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = 'sort rows or cols (not _by_ cols)'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'df.sort_index(axis=1, ascending=False)'
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = 'sort by col'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''' df.sort_values(by='B')'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = 'indexing'
Subfeature = 'by col label'
Importance = ''
"Implementation Type" = ''
Syntax = '''
df['A'] # This too will have an index?
df.at[dates[0],'A']
df.as_matrix(columns=df.columns[1:])
df.A.values'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = 'indexing'
Subfeature = 'row, col name'
Importance = ''
"Implementation Type" = ''
Syntax = '''
df1.loc[['a', 'b', 'd'], :]
adhyaaya_data.loc["001-001", "पठिता"]'''
Description = 'Note the square brackets!'

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = 'indexing'
Subfeature = 'row slize'
Importance = ''
"Implementation Type" = ''
Syntax = '''
df[0:3]
df['20130102':'20130104']'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = 'indexing'
Subfeature = 'by ordinal'
Importance = ''
"Implementation Type" = ''
Syntax = '''
df.iloc[0,1,2] = df.iloc[:3]
df.iloc[3]'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = 'indexing'
Subfeature = 'boolean '
Importance = ''
"Implementation Type" = ''
Syntax = '''
 df[df.A > 0]
df[df > 0]
df2[df2['E'].isin(['two','four'])]'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = 'indexing'
Subfeature = 'row filter'
Importance = ''
"Implementation Type" = ''
Syntax = '''
    filtered_index = df.apply(row_filter_fn, axis=1)
    filtered_df = df[filtered_index]
'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = 'iterate over rows'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
for (index, row) in livesite_cr2_correlation.iterrows():
  print row'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = 'add column'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''df2['E'] = ['one', 'one','two','three','four','three']'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = 'set value'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
df.at[dates[0],'A'] = 0
df.iat[0,1] = 0
df.loc[:,'D'] = np.array([5] * len(df))
'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = 'merge join concatenate'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
result = pd.concat( [df1, df2, df3], axis=1, join='inner')
pd.concat(objs, axis=0, join='outer', join_axes=None, ignore_index=False,
       keys=None, levels=None, names=None, verify_integrity=False)'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = 'map rows'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''movie_data_df[['viShayaH', 'tolana-TippaNiH']].apply(lambda x: " ".join(x).strip(), axis=1)'''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.DataFrame'
Feature = 'map elements'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
frame.applymap(someLambda)
someSeries.map(someLambda) '''
Description = ''

[[data]]
Language = 'Python'
"Operand Type" = 'pandas.Index'
Feature = 'get values'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'df.index.values # Returns ndarray'
Description = ''
