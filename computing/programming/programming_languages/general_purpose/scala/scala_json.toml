[[data]]
Language = 'Scala'
"Operand Type" = 'json4s'
Feature = 'concept'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = '''
provides uniform interface to several json libraries (lift, jackson)
Provides a common AST, case class conversion etc.. for all.
Just see liftweb details for parsing etc..'''

[[data]]
Language = 'Scala'
"Operand Type" = 'json4s'
Feature = 'setup'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
import org.json4s._
import org.json4s.jackson.JsonMethods._
'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'json play lib: JsPath'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = 'JsPath holds a JSON path'
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'json play lib: JsValue'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = 'JsValue holds a JSON or values therein'
Description = 'subtypes : JsString JsNumber JsBoolean JsObject JsArray JsNull'

[[data]]
Language = 'Scala'
"Operand Type" = 'json play lib: JsValue'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
val latPath = JsPath \ "location" \ "lat"
'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'json play lib: JsValue'
Feature = 'instantiate'
Subfeature = 'from string'
Importance = ''
"Implementation Type" = ''
Syntax = '''
import play.api.libs.json._

val rawJson = """{"hello": "world", "age": 42}"""
val r: JsValue = Json.parse(rawJson)'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'json play lib: JsValue'
Feature = 'instantiate'
Subfeature = 'construct'
Importance = ''
"Implementation Type" = ''
Syntax = '''
val json: JsValue = JsObject(Seq(
  "name" -> JsString("Watership Down")
))'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'json play lib: JsValue'
Feature = 'instantiate'
Subfeature = 'construct'
Importance = ''
"Implementation Type" = ''
Syntax = '''
import play.api.libs.json.{ JsNull, Json, JsString, JsValue }

val json: JsValue = Json.obj(
  "name" -> "Watership Down"
)'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'json play lib: JsValue'
Feature = 'instantiate'
Subfeature = 'from case class'
Importance = ''
"Implementation Type" = ''
Syntax = '''
implicit val placeWrites = new Writes[Place] {
  def writes(place: Place) = Json.obj(
    "name" -> place.name,
    "location" -> place.location,
    "residents" -> place.residents
  )
}
val place = Place(
  "Watership Down",
  Location(51.235685, -1.309197),
  Seq(
    Resident("Fiver", 4, None),
    Resident("Bigwig", 6, Some("Owsla"))
  )
)

val json = Json.toJson(place)'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'json play lib: JsValue'
Feature = 'get field as JsLookupResult'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
val lat = (json \ "location" \ "lat").get
val name = (json \ "name").as[String]
val nameOption = (json \ "name").asOpt[String]'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'json play lib: JsValue'
Feature = 'get field as JsLookupResult'
Subfeature = 'include sub-objects'
Importance = ''
"Implementation Type" = ''
Syntax = 'val names = json \\ "name"'
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'json play lib: JsValue'
Feature = 'get field'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
json("name")
json("residents")(1)'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = '''
json play lib: 
JsArray or JsObject'''
Feature = 'to string'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
val minifiedString: String = Json.stringify(json)
val readableString: String = Json.prettyPrint(json)'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'json play lib: JsValue'
Feature = 'to case class'
Subfeature = 'define deserializer'
Importance = ''
"Implementation Type" = ''
Syntax = '''
import play.api.libs.json._
import play.api.libs.functional.syntax._
case class Location(lat: Double, long: Double)
implicit val locationReads: Reads[Location] = (
  (JsPath \ "lat").read[Double] and
  (JsPath \ "long").read[Double]
)(Location.apply _)
'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'json play lib: JsValue'
Feature = 'to case class'
Subfeature = 'define deserializer'
Importance = ''
"Implementation Type" = ''
Syntax = 'implicit val personReads = Json.reads[Person]'
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'json play lib: JsValue'
Feature = 'to case class'
Subfeature = 'define deserializer'
Importance = ''
"Implementation Type" = ''
Syntax = '''
        implicit val itemMetadataReads = Json.reads[ItemMetadata]
        implicit val itemInfoReads = Json.reads[ItemInfo]
'''
Description = 'ItemInfo includes ItemMetadata, so the implicit reader for the former should be declared first.'

[[data]]
Language = 'Scala'
"Operand Type" = 'json play lib: JsValue'
Feature = 'to case class'
Subfeature = 'convert'
Importance = ''
"Implementation Type" = ''
Syntax = '''
// having defined implicit deserializer
(response.json \ "metadata" ).as[ItemMetadata]'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'json play lib: JsValue'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'json lift lib'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'caveat'
Syntax = ''
Description = 'Constructors can mess with JSON (de)serialization'

[[data]]
Language = 'Scala'
"Operand Type" = 'json lift lib'
Feature = 'Jobject'
Subfeature = 'from string'
Importance = ''
"Implementation Type" = ''
Syntax = '''
import net.liftweb.json._  (or use json4s)
val rawJson = """{"hello": "world", "age": 42}"""
val r = Json.parse(rawJson)
'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'json lift lib'
Feature = 'Jobject'
Subfeature = 'get field'
Importance = ''
"Implementation Type" = ''
Syntax = '''
val r1 = res0 \ "nested" \ "deeper" \ "treasure"
val elements: JObject = json \\ "spouse" (deep search)
val elements = (json \\ "emailAccount").children
'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'json lift lib'
Feature = 'Jobject'
Subfeature = 'literal'
Importance = ''
"Implementation Type" = ''
Syntax = '''
import net.liftweb.json.JsonDSL._
val jobj = ("hello" -> "world") ~ ("age" -> 42)'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'json lift lib'
Feature = 'Jobject'
Subfeature = 'to string'
Importance = ''
"Implementation Type" = ''
Syntax = '''
ser = pretty(render(json))
ser = compact(render(json))
json.extract[String]'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'json lift lib'
Feature = 'Jobject'
Subfeature = 'to map'
Importance = ''
"Implementation Type" = ''
Syntax = '      val jsonMap: Map[String,Any] = quoteTextJobj.values.asInstanceOf[Map[String,Any]]'
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'json lift lib'
Feature = 'JValue'
Subfeature = 'to scala type'
Importance = ''
"Implementation Type" = ''
Syntax = 'json.extract[String] ...'
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'json lift lib'
Feature = 'case class'
Subfeature = 'allow missing values'
Importance = ''
"Implementation Type" = ''
Syntax = '    case class Model(hello: String, age: Option[Int])'
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'json lift lib'
Feature = 'case class'
Subfeature = 'from string'
Importance = ''
"Implementation Type" = ''
Syntax = '''
    import net.liftweb.json._
    implicit val formats = DefaultFormats
 
    case class Model(hello: String, age: Int)
    val rawJson = """{"hello": "world", "age": 42}"""
 
    println(parse(rawJson).extract[Model])'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'json lift lib'
Feature = 'case class'
Subfeature = 'from string'
Importance = ''
"Implementation Type" = ''
Syntax = '''
scala> import net.liftweb.json._
scala> import net.liftweb.json.Serialization.{read, write}
scala> val ser = write(Child("Mary", 5, None)) 
scala> read[Child](ser)
'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'json lift lib'
Feature = 'case class'
Subfeature = 'from JObject'
Importance = ''
"Implementation Type" = ''
Syntax = '''
case class Kid(name: String, age: Int)
    for (acct <- elements) {
        val m = acct.extract[Kid]
    }
case class Kid(name: String, age: Int)
(json \ "kids").extract[List[Kid]]'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'json lift lib'
Feature = 'serialization format'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
import net.liftweb.json._
import net.liftweb.json.Serialization.{read, write} (or use json4s)
implicit val formats = Serialization.formats(NoTypeHints)
implicit val formats = Serialization.formats(ShortTypeHints(List(classOf[Dog], classOf[Fish])))
'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'json lift lib'
Feature = 'case class or map'
Subfeature = 'to string'
Importance = ''
"Implementation Type" = ''
Syntax = '''
val ser = write(Child("Mary", 5, None))

trait Animal
case class Dog(name: String) extends Animal
case class Fish(weight: Double) extends Animal
case class Animals(animals: List[Animal])
val ser = write(Animals(Dog("pluto") :: Fish(1.2) :: Nil))'''
Description = '''
Output: ser: String = {"animals":[{"jsonClass":"Dog","name":"pluto"},{"jsonClass":"Fish","weight":1.2}]}

Serialization supports:

Arbitrarily deep case class graphs
All primitive types, including BigInt and Symbol
List, Seq, Array, Set and Map (note, keys of the Map must be strings: Map[String, _])
scala.Option
java.util.Date
Polymorphic Lists (see below)
Recursive types
Serialization of fields of a class (see below)
Custom serializer functions for types which are not supported'''

[[data]]
Language = 'Scala'
"Operand Type" = 'json lift lib'
Feature = 'case class'
Subfeature = 'to JObject'
Importance = ''
"Implementation Type" = ''
Syntax = 'Extraction.decompose(Doc("foo", ...))'
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'spray json'
Feature = 'setup'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
case class Color(name: String, red: Int, green: Int, blue: Int)

object MyJsonProtocol extends DefaultJsonProtocol {
  implicit val colorFormat = jsonFormat4(Color)
}

import MyJsonProtocol._
import spray.json._'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'spray json'
Feature = 'to json'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
val json = Color("CadetBlue", 95, 158, 160).toJson
'''
Description = ''

[[data]]
Language = 'Scala'
"Operand Type" = 'spray json'
Feature = 'to case class'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'val color = json.convertTo[Color]'
Description = ''
