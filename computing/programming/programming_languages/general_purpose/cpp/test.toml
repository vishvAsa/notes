[[data]]
Language = 'C++'
"Operand Type" = 'gUnit'
Feature = 'setup'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
#include "testing/base/public/gunit.h"
int main(int argc, char **argv){
::testing::InitGoogleTest(&argc, argv);
return RUN_ALL_TESTS();
}'''
Description = 'Build-rule alternatives exist.'

[[data]]
Language = 'C++'
"Operand Type" = 'gUnit'
Feature = 'test case'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
TEST(TestCaseName, TestName) {}
'''
Description = '''
Assertions in tests in test-cases in test programs.

'''

[[data]]
Language = 'C++'
"Operand Type" = 'gUnit'
Feature = 'test case'
Subfeature = 'with test fixture'
Importance = ''
"Implementation Type" = ''
Syntax = 'TEST_F(TestFixtureClass, testName) {}'
Description = '''
These test cases expand into methods in a descendent of TestFixtureClass.
'''

[[data]]
Language = 'C++'
"Operand Type" = 'gUnit'
Feature = 'test class name'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
GTEST_TEST_CLASS_NAME_ yields
TestCaseName_TestName_Test'''
Description = '''
Useful for declaring friend classes when testing protected methods.
Alternative: have the text fixture extend the class being tested.'''

[[data]]
Language = 'C++'
"Operand Type" = 'gUnit'
Feature = 'test fixture'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
class MyTest : public testing::Test
[, TestedClass]{}
Protected members:
// Per Test set-up
virtual void SetUp(){}
virtual void TearDown(){}
// Per-test-case set-up.
  // Called before the first test in this test case.
static void SetUpTestCase(){}'''
Description = '''
Extending the tested class gives the test class access to internal members.
Test cases will be subclasses of this class.'''

[[data]]
Language = 'C++'
"Operand Type" = 'gUnit'
Feature = 'assertion'
Subfeature = 'non fatal'
Importance = ''
"Implementation Type" = ''
Syntax = '''
EXPECT_XYZ 
EXPECT_TRUE
EXPECT_NE EXPECT_GE
 EXPECT_NEAR(v1, v2, 1e-7)
EXPECT_PROTO_EQ??

#include "testing/base/public/gmock.h"
EXPECT_THAT(v, ElementsAre(5, 10, 15));
'''
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'gUnit'
Feature = 'assertion'
Subfeature = 'fatal'
Importance = ''
"Implementation Type" = ''
Syntax = '''
ASSERT_EQ, STREQ, STRNE, STRCASEEQ..

'''
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'gUnit'
Feature = 'test private methods'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
class Foo {
 private:
   friend class FooPeer;
   int bar();
}
class FooPeer : public Foo {
 public:
   using Foo::bar;
}
TEST(Foo, TestIt) {
  FooPeer sut;
  sut.bar()
  ASSERT();
}'''
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'gMock'
Feature = 'class'
Subfeature = 'define'
Importance = ''
"Implementation Type" = ''
Syntax = '''
#include "gmock/gmock.h"
class MockFoo : public Foo {
  MOCK_CONST_METHOD0(GetSize, int());
  MOCK_METHOD1(Describe, string(const char* name));
  MOCK_METHOD1(Describe, string(int type));
  MOCK_METHOD2(Process, bool(Bar elem, int count));
};'''
Description = '''
For:
class Foo {  ...  virtual ~Foo();  virtual int GetSize() const = 0;
virtual string Describe(const char* name) = 0;  virtual string Describe(int type) = 0;  virtual bool Process(Bar elem, int count) = 0;};'''

[[data]]
Language = 'C++'
"Operand Type" = 'gMock'
Feature = 'class'
Subfeature = 'instantiate - nice'
Importance = ''
"Implementation Type" = ''
Syntax = 'NiceMock<MockFoo> nice_foo;     // The type is a subclass of MockFoo.'
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'gMock'
Feature = 'class'
Subfeature = 'instantiate - fail on uninteresting calls'
Importance = ''
"Implementation Type" = ''
Syntax = '''
StrictMock<MockFoo> strict_foo; // The type is a subclass of MockFoo.

'''
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'gMock'
Feature = 'return'
Subfeature = 'default'
Importance = ''
"Implementation Type" = ''
Syntax = '''
ON_CALL(foo, GetSize())
.WillByDefault(Return(1));'''
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'gMock'
Feature = 'call test'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
EXPECT_CALL(foo, Describe(5)).Times(3)
      .WillRepeatedly(Return("Category 5"));'''
Description = ''
