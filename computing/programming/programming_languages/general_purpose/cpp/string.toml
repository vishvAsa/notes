[[data]]
Language = 'C++'
"Operand Type" = 'StringPiece'
Feature = 'concept'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = '''
Implicit, efficient conversion from string or char * arguments. 
So declare functions accepting StringPiece.
'''

[[data]]
Language = 'C++'
"Operand Type" = 'StringPiece'
Feature = 'concept'
Subfeature = ''
Importance = ''
"Implementation Type" = 'convention'
Syntax = ''
Description = '''
Passing stringpieces by value is effiecient.
So, always pass by value.'''

[[data]]
Language = 'C++'
"Operand Type" = 'StringPiece'
Feature = 'to string'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'ToString() or as_string()'
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'StringPiece'
Feature = 'Get c string'
Subfeature = 'caveat'
Importance = ''
"Implementation Type" = ''
Syntax = 'str.data()'
Description = '''
StringPiece is not necessarily NUL-terminated.  Thus, it's not generally safe to write:
      printf("%s\n", sp.data());    // DONâ€™T DO THIS
However, the following is fine:
      printf("%.*s\n", static_cast<int>(sp.size()), sp.data());'''

[[data]]
Language = 'C++'
"Operand Type" = 'StringPiece'
Feature = 'substring check'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
StringPiece(x).starts_with(y) / ends_with(y)
'''
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'StringPiece'
Feature = 'split'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
// Splits on commas. Stores in vector of StringPiece (no copies).
vector<StringPiece> v = strings::Split("a,b,c", ",");

'''
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'StringPiece'
Feature = 'split'
Subfeature = 'as string vector'
Importance = ''
"Implementation Type" = ''
Syntax = '''
// Splits on commas. Stores in vector of string (data copied once).
vector<string> v = strings::Split("a,b,c", ",");

'''
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'StringPiece'
Feature = 'join'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
#include "strings/strcat.h"
result = StrCat(...);
StrAppend(&s1, str2, str3)'
strings::Join() joins a collection of strings, ints, floats, any StrCat-compatible type.'''
Description = 'more efficient than +='

[[data]]
Language = 'C++'
"Operand Type" = 'string'
Feature = 'instantiation'
Subfeature = 'type casting'
Importance = ''
"Implementation Type" = 'Operator'
Syntax = ' ='
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'string'
Feature = 'instantiation'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'char b[5]; sprintf(b, fmtStr, ...);'
Description = 'deprecated'

[[data]]
Language = 'C++'
"Operand Type" = 'string'
Feature = 'instantiation'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'string s = StringPrintf(fmt,..);'
Description = '%s matches char* not a string object.'

[[data]]
Language = 'C++'
"Operand Type" = 'string'
Feature = 'instantiation'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
int a = 10;
stringstream ss;
ss << a;
string str = ss.str();'''
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'string'
Feature = 'instantiation'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
const char *p = R"(a\
b
c)";
assert(std::strcmp(p, "a\\\nb\nc") == 0);'''
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'string'
Feature = 'instantiation'
Subfeature = 'literal'
Importance = ''
"Implementation Type" = ''
Syntax = '''
char arr[ ] = "This is a test";
arr2[] = R"(multi line1
line2)";
string str(arr);'''
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'string'
Feature = 'length'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'str.length()'
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'string'
Feature = 'length'
Subfeature = 'emptiness'
Importance = ''
"Implementation Type" = ''
Syntax = 'if(str.empty())'
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'string'
Feature = 'split'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
#include <boost/algorithm/string.hpp>
boost::split( fields, s, is_any_of( "," ) );'''
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'string'
Feature = 'parse'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'atoi(str)'
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'string'
Feature = 'format'
Subfeature = 'unsigned int64'
Importance = ''
"Implementation Type" = ''
Syntax = '%llu'
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'string'
Feature = 'format'
Subfeature = 'int'
Importance = ''
"Implementation Type" = ''
Syntax = '%d'
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'string'
Feature = 'format'
Subfeature = 'float'
Importance = ''
"Implementation Type" = ''
Syntax = '%[4.2]f %e %g (shorter of the preceeding)'
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'string'
Feature = 'format'
Subfeature = 'double'
Importance = ''
"Implementation Type" = ''
Syntax = '%lf??'
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'string'
Feature = 'concatenate'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
"str1" "str2"
// strcat from stdio.h'''
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'string'
Feature = 'substring'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ' std::string str2 = str.substr (12,12);  '
Description = '''
First val should be >=0. 
second param should be < str.length()'''

[[data]]
Language = 'C++'
"Operand Type" = 'string'
Feature = 'substring'
Subfeature = 'find'
Importance = ''
"Implementation Type" = ''
Syntax = 'std::size_t found = str.find(str2);'
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'string'
Feature = 'compare'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'str1 == str2'
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'string'
Feature = 'using position'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
// Using positions:                 0123456789*123456789*12345
  std::string str=base;           // "this is a test string."
  str.replace(9,5,str2);          // "this is an example string." (1)
  str.replace(19,6,str3,7,6);     // "this is an example phrase." (2)
  str.replace(8,10,"just a");     // "this is just a phrase."     (3)
  str.replace(8,6,"a shorty",7);  // "this is a short phrase."    (4)
  str.replace(22,1,3,'!');        // "this is a short phrase!!!"  (5)'''
Description = ''

[[data]]
Language = 'C++'
"Operand Type" = 'string'
Feature = 'replace all occurances of char'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
#include <algorithm>
#include <string>
std::string s = "example string";
  std::replace( s.begin(), s.end(), 'x', 'y');'''
Description = ''
