[[data]]
"Operand Type" = ''
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = '''
a declarative, efficient, and flexible JavaScript library for building user interfaces.
let you describe UI component tree as a function of state. single page js apps use and save much state.
The same class controls state and renders it - yet state - view separation is clear (just not in different files/ technologies - so UI and state may need to work on same file/ code).'''

[[data]]
"Operand Type" = 'develop'
Feature = 'debug UI'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'extension for chrome and firefox'

[[data]]
"Operand Type" = 'component'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = 'A component takes in parameters, called props, and returns a hierarchy of views to display (as a react element) via the render method.'

[[data]]
"Operand Type" = 'class component'
Feature = 'construct'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
class ShoppingList extends React.Component {
  constructor() {
    super();
    this.state = {
      value: null,
    };
  }
}'''
Description = ''

[[data]]
"Operand Type" = 'class component'
Feature = 'state'
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = '''setState({value: 'X'})'''
Description = '''
State is stored in this.state dict.
Whenever this.setState is called, an update to the component is scheduled, causing React to merge in the passed state update and rerender the component along with its descendants.'''

[[data]]
"Operand Type" = 'class component'
Feature = 'state'
Subfeature = ''
Importance = ''
"Implementation Type" = 'design'
Syntax = ''
Description = '''

When you want to aggregate data from multiple children or to have two child components communicate with each other, move the state upwards so that it lives in the parent component. The parent can then pass the state back down to the children via props, so that the child components are always in sync with each other and with the parent.'''

[[data]]
"Operand Type" = 'class component'
Feature = 'state'
Subfeature = ''
Importance = ''
"Implementation Type" = 'caveat'
Syntax = '''
const squares = this.state.squares.slice();
    squares[i] = 'X';
    this.setState({squares: squares});'''
Description = '''For performance, do a shallow copy of any list you're updating.'''

[[data]]
"Operand Type" = 'class component'
Feature = 'render'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
render() {
    return someReactElement;
  }'''
Description = ''

[[data]]
"Operand Type" = 'functional component'
Feature = 'construct'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
function Square(props) {
  return (   <button className="square" onClick={props.onClick}>
      {props.value}   </button>  );
}'''
Description = ''

[[data]]
"Operand Type" = 'react element'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = '''
a lightweight description of something (say a react component) to render.
A Javascript object.'''

[[data]]
"Operand Type" = 'react element'
Feature = 'instantiate with jsx'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
(
      <div className="shopping-list">
        <h1>Shopping List for {this.props.name}</h1>
      </div>
    )'''
Description = 'Shows property access too.'

[[data]]
"Operand Type" = 'react element'
Feature = 'instantiate with jsx'
Subfeature = 'JS expression'
Importance = ''
"Implementation Type" = ''
Syntax = '{expression}'
Description = ''

[[data]]
"Operand Type" = 'react element'
Feature = 'instantiate with jsx'
Subfeature = 'from react component'
Importance = ''
"Implementation Type" = ''
Syntax = '''
<Square value={i} />
 <ShoppingList name="Mark" />'''
Description = 'Square in example is a react component'

[[data]]
"Operand Type" = 'react element'
Feature = 'instantiate'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
React.createElement('div', {className: 'shopping-list'},
  React.createElement('h1', /* ... h1 children ... */),
  React.createElement('ul', /* ... ul children ... */)
);'''
Description = ''

[[data]]
"Operand Type" = 'react element'
Feature = 'instantiate'
Subfeature = 'access properties'
Importance = ''
"Implementation Type" = ''
Syntax = '{this.props.something}'
Description = '''
this points to the react component which is instantiating the react element.
props stores properties passed when rendering : eg. with 
 <Square value={i} />
'''

[[data]]
"Operand Type" = 'react element'
Feature = 'instantiate'
Subfeature = 'access state'
Importance = ''
"Implementation Type" = ''
Syntax = '        {this.state.something}'
Description = 'this points to the react component which is instantiating the react element.'

[[data]]
"Operand Type" = 'react button'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = 'a react element'

[[data]]
"Operand Type" = 'react button'
Feature = 'instantiate'
Subfeature = 'on click'
Importance = ''
"Implementation Type" = ''
Syntax = '''
<button className="square" onClick={() => this.someFun(3)}>
        {this.state.value}
      </button>'''
Description = 'this points to the react component which is instantiating the react element.'

[[data]]
"Operand Type" = 'react list'
Feature = 'instantiate'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<ol><li key={user.id}>{user.name}: {user.taskCount} tasks left</li>
</ol>'''
Description = '''
key property is important - lets react keep track of added or modified items - thereby enabling efficient rendering updates
By default uses array index.'''

[[data]]
"Operand Type" = ''
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = '''
Redux emits state updates in response to actions.
Can be used with react (describes ui as function of state), angular js etc..'''
