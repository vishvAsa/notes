[[data]]
"Operand Type" = ''
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = 'See basics sheet for core JS'

[[data]]
"Operand Type" = 'implementation variations'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'JavaScript and DOM implementations vary across browsers - even from the standards. So, scripts must be tested on different target browsers.'

[[data]]
"Operand Type" = 'security'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = '''
First, scripts run in a sandbox in which they can only perform web-related actions, not general-purpose programming tasks like creating files. 
Second, scripts are constrained by the same origin policy: scripts from one web site do not have access to information such as usernames, passwords, or cookies sent to another site.'''

[[data]]
"Operand Type" = 'development Chrome'
Feature = 'setup'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'Can associate with local sources, add break points, examine variables and elements'

[[data]]
"Operand Type" = 'development Chrome'
Feature = 'Interactive shell'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'Javascript console : Ctrl + Shift + J'

[[data]]
"Operand Type" = 'development'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'http://jsfiddle.net/'
Description = ''

[[data]]
"Operand Type" = 'development'
Feature = 'IDE'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'brackets.io'
Description = '''
Rich featured html css support
fast autocomplete'''

[[data]]
"Operand Type" = 'development'
Feature = 'IDE'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'bluefish'

[[data]]
"Operand Type" = 'IO'
Feature = 'http'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
var xmlHttp = new XMLHttpRequest(); 
xmlHttp.onreadystatechange = processResponseFn;
xmlHttp.open( "GET", Url, true );
xmlHttp.send( null );'''
Description = 'The processResponse function should then check the xmlHttp.readyState and xmlHttp.status'

[[data]]
"Operand Type" = 'IO'
Feature = 'console'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
console.log(obj1 [, obj2, ..., objN]);
console.log(msg [, subst1, ..., substN]);
console.info("My first car was a", car, ". The object is: ", someObject);'''
Description = ''

[[data]]
"Operand Type" = 'browser IO'
Feature = 'alert'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'alert(msg)'
Description = '''Won't show up if called from within an alert() call!'''

[[data]]
"Operand Type" = 'browser IO'
Feature = 'prompt'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'var x = prompt(optionalString);'
Description = ''

[[data]]
"Operand Type" = 'browser IO'
Feature = 'events : mouse'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
mousedown, mouseup, mouseout, mousemove, mouseover, click
// These include pageX, pageY properties.'''
Description = ''

[[data]]
"Operand Type" = 'browser IO'
Feature = 'event listener'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'removeEventListener()'
Description = ''

[[data]]
"Operand Type" = 'browser IO'
Feature = 'event listener'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
addEventListener(eventTypeStr, listener, bCapture)
xyz.addEventListener('kick', function (e) {
        console.log(e.detail.kicked); // true
    })'''
Description = ''

[[data]]
"Operand Type" = 'browser IO'
Feature = 'event listener'
Subfeature = 'onload'
Importance = ''
"Implementation Type" = ''
Syntax = 'window.onload(..)'
Description = '''can be overridden by another script's onload. Prefer adding a listener instead.'''

[[data]]
"Operand Type" = 'browser IO'
Feature = 'event listener'
Subfeature = 'onload'
Importance = ''
"Implementation Type" = ''
Syntax = '''window.addEventListener('load', appendTool)'''
Description = ''

[[data]]
"Operand Type" = 'browser IO'
Feature = 'get selection'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'document.getSelection()'
Description = ''

[[data]]
"Operand Type" = 'browser IO'
Feature = 'read file'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
       document.getElementById('file').addEventListener('change', readFile, false);

       function readFile (evt) {
           var files = evt.target.files;
           var file = files[0];           
           var reader = new FileReader();
           reader.onload = function() {
             console.log(this.result);     
           }
           reader.readAsText(file)
        }'''
Description = ''

[[data]]
"Operand Type" = 'html DOM'
Feature = 'document'
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = 'A document is a special element node.'

[[data]]
"Operand Type" = 'html DOM'
Feature = 'document'
Subfeature = 'set html'
Importance = ''
"Implementation Type" = ''
Syntax = 'document.writeln()'
Description = ''

[[data]]
"Operand Type" = 'html DOM'
Feature = 'document'
Subfeature = 'get element node by id'
Importance = ''
"Implementation Type" = ''
Syntax = 'metadata = document.getElementById("metadata")'
Description = ''

[[data]]
"Operand Type" = 'html DOM'
Feature = 'document'
Subfeature = 'get element'
Importance = ''
"Implementation Type" = ''
Syntax = '''
var el = document.querySelector(".myclass");
var el = document.querySelector("div.user-panel.main input[name='login']");
'''
Description = ''

[[data]]
"Operand Type" = 'html DOM'
Feature = 'element node'
Subfeature = 'get element node by tagName'
Importance = ''
"Implementation Type" = ''
Syntax = '''getElementsByTagName('a')'''
Description = ''

[[data]]
"Operand Type" = 'html DOM'
Feature = 'element node'
Subfeature = 'inner html'
Importance = ''
"Implementation Type" = ''
Syntax = 'v.innerHTML = "sadfasd"'
Description = ''

[[data]]
"Operand Type" = 'html DOM'
Feature = 'element node'
Subfeature = 'child nodes : get'
Importance = ''
"Implementation Type" = ''
Syntax = 'v.childNodes'
Description = ''

[[data]]
"Operand Type" = 'html DOM'
Feature = 'element node'
Subfeature = 'child nodes : add'
Importance = ''
"Implementation Type" = ''
Syntax = '''
appendChild
document.body.appendChild(script);'''
Description = ''

[[data]]
"Operand Type" = 'html DOM'
Feature = 'element node'
Subfeature = 'attribute'
Importance = ''
"Implementation Type" = ''
Syntax = '''
v.setAttribute('rel', 'me')
element.attributeName = 'value'
'''
Description = ''

[[data]]
"Operand Type" = 'html DOM'
Feature = 'element node'
Subfeature = 'create'
Importance = ''
"Implementation Type" = ''
Syntax = '''var script = document.createElement('script');'''
Description = ''

[[data]]
"Operand Type" = 'html DOM'
Feature = 'element list'
Subfeature = 'to array'
Importance = ''
"Implementation Type" = ''
Syntax = '''
var array = Array.from(children);
'''
Description = ''

[[data]]
"Operand Type" = 'JSON'
Feature = 'call'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<script 
    type=""text/javascript"" 
    src=""http://..?..&callback=showMyVideos"">
</script>'''
Description = 'calls the callback JS Function.'

[[data]]
"Operand Type" = 'JSON'
Feature = 'call'
Subfeature = 'in script'
Importance = ''
"Implementation Type" = ''
Syntax = '''
var script = document.createElement('script');
script.type = 'text/javascript';
script.src = theUrlForTheApi;
document.body.appendChild(script);'''
Description = ''

[[data]]
"Operand Type" = 'JSON'
Feature = 'parse'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'var jobj = JSON.parse(someString);'
Description = ''

[[data]]
"Operand Type" = 'JSON'
Feature = 'serialize'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'var someStr = JSON.stringify(data, null, 2);'
Description = ''

[[data]]
"Operand Type" = 'local storage'
Feature = 'concept'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = '''
no expiration. cannot be read by server, unlike cookies.
localStorage is synchronous in nature, meaning when it loads it can block the main document from rendering.
3. localStorage is persistent. Not using a service or never visit a web site again, the data is still loaded when its browser started every time.'''

[[data]]
"Operand Type" = 'local + session storage'
Feature = 'space limit'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = '''
Mobile Browser: (Chrome: 10MB, Android: 2MB, Firefox: 10MB, IOS Safari: 5MB)
Desktop Browser: (Chrome: 10MB, Opera: 10MB, Firefox: 10MB, Safari: 5MB, IE: 10MB)'''

[[data]]
"Operand Type" = 'local + session storage'
Feature = 'check support'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
(typeof(Storage) !== "undefined");
(typeof(localStorage) !== "undefined");
(typeof(sessionStorage) !== "undefined");
(typeof(window.Storage) !== "undefined");
(typeof(window.localStorage) !== "undefined");
(typeof(window.sessionStorage) !== "undefined");'''
Description = ''

[[data]]
"Operand Type" = 'local storage'
Feature = 'set'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''localStorage.setItem('firstname', 'Keith');'''
Description = ''

[[data]]
"Operand Type" = 'session storage'
Feature = 'concept'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'sessionStorage // interface like localStorage'
Description = 'sessionStorage gets cleared when the page closed (session ends).'

[[data]]
"Operand Type" = 'local storage'
Feature = 'check existance'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
(name in localStorage)
(!!localStorage[name]);'''
Description = ''

[[data]]
"Operand Type" = 'indexed db'
Feature = 'concept'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = '''
JSON based. Can index.
It's like localStorage, so it's cross-session, meaning restarting browser or system won't affect what is stored in it. However, user / browser can clear it like clearing cookie. '''

[[data]]
"Operand Type" = 'indexed db'
Feature = 'storage limits 2017'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = '''
stored on hard disk. firefox: asks user to store more than 50MB.
chrome (even Android 4.4+), opera : limit calculated automatically
IE: 250 MB, with user dialog at 10MB
'''

[[data]]
"Operand Type" = 'indexed db'
Feature = 'setup and open'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
var request = indexedDB.open("MyTestDatabase");
var request = window.indexedDB.open("MyTestDatabase", 3);

var db;
request.onerror = function(event) {
  alert("Database error: " + event.target.errorCode);
};
request.onsuccess = function(event) {
  db = event.target.result;
};'''
Description = ''

[[data]]
"Operand Type" = 'indexed db'
Feature = 'setup db'
Subfeature = 'update collection/ object store version'
Importance = ''
"Implementation Type" = ''
Syntax = '''
request.onupgradeneeded = function(event) { 
  var db = event.target.result;

  // Create an objectStore for this database
  var objectStore = db.createObjectStore("name", { keyPath: "myKey" });
};'''
Description = ''

[[data]]
"Operand Type" = 'indexed db'
Feature = 'object store'
Subfeature = 'create index'
Importance = ''
"Implementation Type" = ''
Syntax = '''
  objectStore.createIndex("name", "name", { unique: false });
'''
Description = ''

[[data]]
"Operand Type" = 'indexed db'
Feature = 'object store or index'
Subfeature = 'iterate'
Importance = ''
"Implementation Type" = ''
Syntax = '''
objectStore.openCursor().onsuccess = function(event) {
  var cursor = event.target.result;
  if (cursor) {
    alert("Name for SSN " + cursor.key + " is " + cursor.value.name);
    cursor.continue();
  }
  else {
    alert("No more entries!");
  }
};'''
Description = ''

[[data]]
"Operand Type" = 'indexed db'
Feature = 'index'
Subfeature = 'get item'
Importance = ''
"Implementation Type" = ''
Syntax = '''
index.get("Donna").onsuccess = function(event) {
  alert("Donna's SSN is " + event.target.result.ssn);
};'''
Description = ''

[[data]]
"Operand Type" = 'indexed db'
Feature = 'index'
Subfeature = 'iterate keys'
Importance = ''
"Implementation Type" = ''
Syntax = '''
index.openKeyCursor().onsuccess = function(event) {
  var cursor = event.target.result;
  if (cursor) {
    // cursor.key is a name, like "Bill", and cursor.value is the SSN.
    // No way to directly get the rest of the stored object.
    alert("Name: " + cursor.key + ", SSN: " + cursor.value);
    cursor.continue();
  }
};'''
Description = ''

[[data]]
"Operand Type" = 'indexed db'
Feature = 'index'
Subfeature = 'iterate range'
Importance = ''
"Implementation Type" = ''
Syntax = '''
var boundKeyRange = IDBKeyRange.bound("Bill", "Donna", false, true);
index.openCursor(boundKeyRange).onsuccess = function(event) {
  var cursor = event.target.result;
  if (cursor) {
    // Do something with the matches.
    cursor.continue();
  }
};'''
Description = '''
// Only match "Donna"
var singleKeyRange = IDBKeyRange.only("Donna");
// Match anything past "Bill", including "Bill"
var lowerBoundKeyRange = IDBKeyRange.lowerBound("Bill");
// Match anything past "Bill", but don't include "Bill"
var lowerBoundOpenKeyRange = IDBKeyRange.lowerBound("Bill", true);
// Match anything up to, but not including, "Donna"
var upperBoundOpenKeyRange = IDBKeyRange.upperBound("Donna", true);
// Match anything between "Bill" and "Donna", but not including "Donna"
var boundKeyRange = IDBKeyRange.bound("Bill", "Donna", false, true);'''

[[data]]
"Operand Type" = 'indexed db'
Feature = 'item'
Subfeature = 'add'
Importance = ''
"Implementation Type" = ''
Syntax = '''
    var customerObjectStore = db.transaction("customers", "readwrite").objectStore("customers");
      customerObjectStore.add(customerData);
transaction.oncomplete = function(event) {
};
transaction.onerror = function(event) {
};'''
Description = ''

[[data]]
"Operand Type" = 'indexed db'
Feature = 'item'
Subfeature = 'delete'
Importance = ''
"Implementation Type" = ''
Syntax = '''
var request = db.transaction(["customers"], "readwrite")
                .objectStore("customers")
                .delete("444-44-4444");
transaction.oncomplete = function(event) {
};
transaction.onerror = function(event) {
};'''
Description = ''

[[data]]
"Operand Type" = 'indexed db'
Feature = 'item'
Subfeature = 'get'
Importance = ''
"Implementation Type" = ''
Syntax = '''
var request = objectStore.get("444-44-4444");
request.onerror = function(event) {
};
request.onsuccess = function(event) {
  alert("Name for SSN 444-44-4444 is " + request.result.name);
};
'''
Description = ''

[[data]]
"Operand Type" = 'indexed db'
Feature = 'item'
Subfeature = 'update'
Importance = ''
"Implementation Type" = ''
Syntax = '''
  var requestUpdate = objectStore.put(data);
   requestUpdate.onerror = function(event) {
     // Do something with the error
   };
   requestUpdate.onsuccess = function(event) {
     // Success - the data is updated!
   };'''
Description = ''

[[data]]
"Operand Type" = 'service worker'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = '''
Rich offline experiences, periodic background syncs, push notifications—functionality that would normally require a native application—are coming to the web. Service workers provide the technical foundation that all these features rely on.
a script that your browser runs in the background, separate from a web page, opening the door to features that don't need a web page or user interaction'''
