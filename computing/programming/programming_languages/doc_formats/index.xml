<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>&#43;Doc formats on Vishvas&#39;s notes</title>
    <link>https://vishvAsa.github.io/notes/computing/programming/programming_languages/doc_formats/</link>
    <description>Recent content in &#43;Doc formats on Vishvas&#39;s notes</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://vishvAsa.github.io/notes/computing/programming/programming_languages/doc_formats/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Character encoding</title>
      <link>https://vishvAsa.github.io/notes/computing/programming/programming_languages/doc_formats/character_encoding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://vishvAsa.github.io/notes/computing/programming/programming_languages/doc_formats/character_encoding/</guid>
      <description>&lt;p&gt;Displaying, accepting and writing to files characters readable by humans are common tasks in many programs, irrespective of language.&lt;/p&gt;&#xA;&lt;p&gt;So, common standards have evolved to represent these characters with natural numbers or characters visible on most English keyboards or arbitrary bytes.&lt;/p&gt;&#xA;&lt;h2 id=&#34;ascii&#34;&gt;ASCII&lt;/h2&gt;&#xA;&lt;p&gt;This represents the Latin alphabet plus some common characters. Range: 0:255.&lt;/p&gt;&#xA;&lt;p&gt;Special characters include control characters.&lt;/p&gt;&#xA;&lt;h3 id=&#34;control-characters&#34;&gt;Control characters&lt;/h3&gt;&#xA;&lt;p&gt;Carriage return (move cursor to beginning of current line), line-feed (start a new line), tab (a long horizontal space). Their popular latin/ symbolic representations are: &amp;lsquo;\r\n\t&amp;rsquo;. Carriage return without line-feed is often used to overwrite text.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Latex</title>
      <link>https://vishvAsa.github.io/notes/computing/programming/programming_languages/doc_formats/latex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://vishvAsa.github.io/notes/computing/programming/programming_languages/doc_formats/latex/</guid>
      <description>&lt;p&gt;Both declarative (rule-based) and imperative specification of document display is possible.&lt;/p&gt;&#xA;&lt;p&gt;A document element is defined to either be a command and or an environment - which are distinguished based on the input they accept.&lt;/p&gt;&#xA;&lt;h2 id=&#34;common-commands-environments&#34;&gt;Common commands, environments&lt;/h2&gt;&#xA;&lt;p&gt;Common commands include section, subsection, paragraph, subsubsection, title, author. Common environments include list (itemize and enumerate), tabular etc..&lt;/p&gt;&#xA;&lt;h3 id=&#34;templates&#34;&gt;Templates&lt;/h3&gt;&#xA;&lt;p&gt;Rules which map commands and environments to imperative display rules are collected together in templates. These rules may be overriden. Every document must be based on some template.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TOML</title>
      <link>https://vishvAsa.github.io/notes/computing/programming/programming_languages/doc_formats/toml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://vishvAsa.github.io/notes/computing/programming/programming_languages/doc_formats/toml/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;It is an alternative to YAML and JSON. It aims to be more human friendly than JSON and simpler that YAML. TOML is designed to map unambiguously to a hash table.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;ref&#34;&gt;Ref&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Comments in TOML look like this.&#xA;&#xA;################&#xA;# SCALAR TYPES #&#xA;################&#xA;&#xA;# Our root object (which continues for the entire document) will be a map,&#xA;# which is equivalent to a dictionary, hash or object in other languages.&#xA;&#xA;# The key, equals sign, and value must be on the same line&#xA;# (though some values can be broken over multiple lines).&#xA;key = &amp;#34;value&amp;#34;&#xA;string = &amp;#34;hello&amp;#34;&#xA;number = 42&#xA;float = 3.14&#xA;boolean = true&#xA;dateTime = 1979-05-27T07:32:00-08:00&#xA;scientificNotation = 1e+12&#xA;&amp;#34;key can be quoted&amp;#34; = true # Both &amp;#34; and &amp;#39; are fine&#xA;&amp;#34;key may contain&amp;#34; = &amp;#34;letters, numbers, underscores, and dashes&amp;#34;&#xA;&#xA;# A bare key must be non-empty, but an empty quoted key is allowed&#xA;&amp;#34;&amp;#34; = &amp;#34;blank&amp;#34;     # VALID but discouraged&#xA;&amp;#39;&amp;#39; = &amp;#39;blank&amp;#39;     # VALID but discouraged&#xA;&#xA;##########&#xA;# String #&#xA;##########&#xA;&#xA;# All strings must contain only valid UTF-8 characters.&#xA;# We can escape characters and some of them have a compact escape sequence.&#xA;# For example, \t add a tabulation. Refers to the spec to get all of them.&#xA;basicString = &amp;#34;are surrounded by quotation marks. \&amp;#34;I&amp;#39;m quotable\&amp;#34;. Name\tJos&amp;#34;&#xA;&#xA;multiLineString = &amp;#34;&amp;#34;&amp;#34;&#xA;are surrounded by three quotation marks&#xA;on each side and allow newlines.&amp;#34;&amp;#34;&amp;#34;&#xA;&#xA;literalString = &amp;#39;are surrounded by single quotes. Escaping are not allowed.&amp;#39;&#xA;&#xA;multiLineLiteralString = &amp;#39;&amp;#39;&amp;#39;&#xA;are surrounded by three single quotes on each side&#xA;and allow newlines. Still no escaping.&#xA;The first newline is trimmed in raw strings.&#xA;   All other whitespace&#xA;   is preserved. #! are preserved?&#xA;&amp;#39;&amp;#39;&amp;#39;&#xA;&#xA;# For binary data it is recommended that you use Base64, another ASCII or UTF8&#xA;# encoding. The handling of that encoding will be application specific.&#xA;&#xA;###########&#xA;# Integer #&#xA;###########&#xA;&#xA;## Integers can start with a +, a - or nothing.&#xA;## Leading zeros are not allowed. Hex, octal, and binary forms are not allowed.&#xA;## Values that cannot be expressed as a series of digits are not allowed.&#xA;int1 = +42&#xA;int2 = 0&#xA;int3 = -21&#xA;integerRange = 64&#xA;&#xA;## You can use underscores to enhance readability. Each&#xA;## underscore must be surrounded by at least one digit.&#xA;int4 = 5_349_221&#xA;int5 = 1_2_3_4_5     # VALID but discouraged&#xA;&#xA;#########&#xA;# Float #&#xA;#########&#xA;&#xA;# Floats are an integer followed by a fractional and/or an exponent part.&#xA;flt1 = 3.1415&#xA;flt2 = -5e6&#xA;flt3 = 6.626E-34&#xA;&#xA;###########&#xA;# Boolean #&#xA;###########&#xA;&#xA;bool1 = true&#xA;bool2 = false&#xA;boolMustBeLowercase = true&#xA;&#xA;############&#xA;# Datetime #&#xA;############&#xA;&#xA;date1 = 1979-05-27T07:32:00Z # UTC time, following RFC 3339/ISO 8601 spec&#xA;date2 = 1979-05-26T15:32:00+08:00 # with RFC 3339/ISO 8601 offset&#xA;date3 = 1979-05-27T07:32:00 # without offset&#xA;date4 = 1979-05-27 # without offset or time&#xA;&#xA;####################&#xA;# COLLECTION TYPES #&#xA;####################&#xA;&#xA;#########&#xA;# Array #&#xA;#########&#xA;&#xA;array1 = [ 1, 2, 3 ]&#xA;array2 = [ &amp;#34;Commas&amp;#34;, &amp;#34;are&amp;#34;, &amp;#34;delimiters&amp;#34; ]&#xA;array3 = [ &amp;#34;Don&amp;#39;t mix&amp;#34;, &amp;#34;different&amp;#34;, &amp;#34;types&amp;#34; ]&#xA;array4 = [ [ 1.2, 2.4 ], [&amp;#34;all&amp;#34;, &amp;#39;strings&amp;#39;, &amp;#34;&amp;#34;&amp;#34;are the same&amp;#34;&amp;#34;&amp;#34;, &amp;#39;&amp;#39;&amp;#39;type&amp;#39;&amp;#39;&amp;#39;] ]&#xA;array5 = [&#xA;  &amp;#34;Whitespace&amp;#34;, &amp;#34;is&amp;#34;, &amp;#34;ignored&amp;#34;&#xA;]&#xA;&#xA;#########&#xA;# Table #&#xA;#########&#xA;&#xA;# Tables (or hash tables or dictionaries) are collections of key/value&#xA;# pairs. They appear in square brackets on a line by themselves.&#xA;# Empty tables are allowed and simply have no key/value pairs within them.&#xA;[table]&#xA;&#xA;# Under that, and until the next table or EOF are the key/values of that table.&#xA;# Key/value pairs within tables are not guaranteed to be in any specific order.&#xA;[table-1]&#xA;key1 = &amp;#34;some string&amp;#34;&#xA;key2 = 123&#xA;&#xA;[table-2]&#xA;key1 = &amp;#34;another string&amp;#34;&#xA;key2 = 456&#xA;&#xA;# Dots are prohibited in bare keys because dots are used to signify nested tables.&#xA;# Naming rules for each dot separated part are the same as for keys.&#xA;[dog.&amp;#34;tater.man&amp;#34;]&#xA;type = &amp;#34;pug&amp;#34;&#xA;&#xA;# In JSON land, that would give you the following structure:&#xA;# { &amp;#34;dog&amp;#34;: { &amp;#34;tater.man&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;pug&amp;#34; } } }&#xA;&#xA;# Whitespace around dot-separated parts is ignored, however, best practice is to&#xA;# not use any extraneous whitespace.&#xA;[a.b.c]            # this is best practice&#xA;[ d.e.f ]          # same as [d.e.f]&#xA;[ j . &amp;#34;ʞ&amp;#34; . &amp;#39;l&amp;#39; ]  # same as [j.&amp;#34;ʞ&amp;#34;.&amp;#39;l&amp;#39;]&#xA;&#xA;# You don&amp;#39;t need to specify all the super-tables if you don&amp;#39;t want to. TOML knows&#xA;# how to do it for you.&#xA;# [x] you&#xA;# [x.y] don&amp;#39;t&#xA;# [x.y.z] need these&#xA;[x.y.z.w] # for this to work&#xA;&#xA;# As long as a super-table hasn&amp;#39;t been directly defined and hasn&amp;#39;t defined a&#xA;# specific key, you may still write to it.&#xA;[a.b]&#xA;c = 1&#xA;&#xA;[a]&#xA;d = 2&#xA;&#xA;# Will generate the following in JSON:&#xA;# { &amp;#34;a&amp;#34;: {&amp;#34;b&amp;#34;: {&amp;#34;c&amp;#34;: 1}, &amp;#34;d&amp;#34;: 2 } }&#xA;&#xA;# You cannot define any key or table more than once. Doing so is invalid.&#xA;&#xA;# DO NOT DO THIS&#xA;[a]&#xA;b = 1&#xA;&#xA;[a]&#xA;c = 2&#xA;&#xA;# DO NOT DO THIS EITHER&#xA;[a]&#xA;b = 1&#xA;&#xA;[a.b]&#xA;c = 2&#xA;&#xA;# All table names must be non-empty.&#xA;[]     # INVALID&#xA;[a.]   # INVALID&#xA;[a..b] # INVALID&#xA;[.b]   # INVALID&#xA;[.]    # INVALID&#xA;&#xA;################&#xA;# Inline table #&#xA;################&#xA;&#xA;inlineTables = { areEnclosedWith = &amp;#34;{ and }&amp;#34;, mustBeInline = true }&#xA;point = { x = 1, y = 2 }&#xA;&#xA;###################&#xA;# Array of Tables #&#xA;###################&#xA;&#xA;# An array of tables can be expressed by using a table name in double brackets.&#xA;# Each table with the same double bracketed name will be an item in the array.&#xA;# The tables are inserted in the order encountered.&#xA;&#xA;[[products]]&#xA;name = &amp;#34;array of table&amp;#34;&#xA;sku = 738594937&#xA;emptyTableAreAllowed = true&#xA;&#xA;[[products]]&#xA;&#xA;[[products]]&#xA;name = &amp;#34;Nail&amp;#34;&#xA;sku = 284758393&#xA;color = &amp;#34;gray&amp;#34;&#xA;&#xA;# You can create nested arrays of tables as well. Each double-bracketed&#xA;# sub-table will belong to the nearest table element above it.&#xA;&#xA;[[fruit]]&#xA;  name = &amp;#34;apple&amp;#34; # I am a property in fruit table/map&#xA;&#xA;  [fruit.geometry]&#xA;    shape = &amp;#34;round&amp;#34;&#xA;    note = &amp;#34;I am a property in geometry table/map&amp;#34;&#xA;&#xA;  [[fruit.color]]&#xA;    name = &amp;#34;red&amp;#34;&#xA;    note = &amp;#34;I am an array item in apple fruit&amp;#39;s table/map&amp;#34;&#xA;&#xA;  [[fruit.color]]&#xA;    name = &amp;#34;green&amp;#34;&#xA;    note = &amp;#34;I am in the same array as red&amp;#34;&#xA;&#xA;[[fruit]]&#xA;  name = &amp;#34;banana&amp;#34;&#xA;&#xA;  [[fruit.color]]&#xA;    name = &amp;#34;yellow&amp;#34;&#xA;    note = &amp;#34;I am an array item in banana fruit&amp;#39;s table/map&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;sources&#34;&gt;Sources&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://learnxinyminutes.com/docs/toml/&#34;&gt;learnXinY&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
