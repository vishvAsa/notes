[[data]]
Language = 'apache '
"Operand Type" = 'run'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
sudo apache2ctl restart
sudo systemctl restart apache2.service'''
Description = ''

[[data]]
Language = 'apache '
"Operand Type" = 'run'
Feature = 'see log'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
sudo tail -f /var/log/apache2/error.log
sudo tail -f /var/log/apache2/access.log'''
Description = ''

[[data]]
Language = 'apache '
"Operand Type" = 'configure'
Feature = 'files'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
apache2.conf: Contains settings that are global to Apache2. Loads configs from sites-enabled etc.. below.

sites-enabled: holds symlinks to virtual host configs in /etc/apache2/sites-available
/etc/apache2/conf-available - contains available configuration files.
conf-enabled: holds symlinks to the files in /etc/apache2/conf-available. 
mods-enabled: holds symlinks to module configs in /etc/apache2/mods-available
ports.conf
'''
Description = 'configured by placing directives in plain text configuration files. These directives are separated between the following files and directories'

[[data]]
Language = 'apache '
"Operand Type" = 'configure'
Feature = 'user group'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'www-data by default'

[[data]]
Language = 'apache '
"Operand Type" = 'configure'
Feature = 'virtual host'
Subfeature = 'enable/ disable'
Importance = ''
"Implementation Type" = ''
Syntax = '''
# add /etc/apache2/sites-available/mynewsite.conf
sudo a2ensite mynewsite
sudo a2dissite mynewsite
# restart apace'''
Description = ''

[[data]]
Language = 'apache '
"Operand Type" = 'configure'
Feature = 'module'
Subfeature = 'enable/ disable'
Importance = ''
"Implementation Type" = ''
Syntax = '''
sudo a2enmod auth_mysql
sudo a2dismod auth_mysql
# restart apache'''
Description = ''

[[data]]
Language = 'apache '
"Operand Type" = 'config directive'
Feature = 'context'
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = 'Defines the valid contexts in which a configuration directive can appear in.'

[[data]]
Language = 'apache '
"Operand Type" = 'config directive'
Feature = 'context'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<VirtualHost>
directory - <Directory>, <Location>, <Files>, <If>, and <Proxy>
.htaccess
server config - anywhere else'''
Description = ''

[[data]]
Language = 'apache '
"Operand Type" = 'directory config'
Feature = 'context'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'server config, virtual host'
Description = ''

[[data]]
Language = 'apache '
"Operand Type" = 'directory config'
Feature = 'concept'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = '''
Defines directory resources.
If not defined within a virtual host config, applies to all virtual hosts.'''

[[data]]
Language = 'apache '
"Operand Type" = 'directory config'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<Directory "/usr/local/httpd/htdocs">
  Options Indexes FollowSymLinks
</Directory>'''
Description = ''

[[data]]
Language = 'apache '
"Operand Type" = 'virtual host config'
Feature = 'context'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'server config'
Description = ''

[[data]]
Language = 'apache '
"Operand Type" = 'virtual host config'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<VirtualHost 10.1.2.3:80>
  ServerAdmin webmaster@host.example.com
  DocumentRoot "/www/docs/host.example.com"
  ServerName host.example.com
  ErrorLog "logs/host.example.com-error_log"
  TransferLog "logs/host.example.com-access_log"
</VirtualHost>'''
Description = ''

[[data]]
Language = 'apache '
"Operand Type" = 'basic directives'
Feature = 'domains to respond to'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
ServerName example.com
ServerAlias *.ubunturocks.com
'''
Description = 'Context:	server config, virtual host'

[[data]]
Language = 'apache '
"Operand Type" = 'basic directives'
Feature = 'contact'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'ServerAdmin xyz'
Description = 'Context:	server config, virtual host'

[[data]]
Language = 'apache '
"Operand Type" = 'virtual host config'
Feature = 'basic directives'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'DirectoryIndex ErrorDocument '
Description = ''

[[data]]
Language = 'apache '
"Operand Type" = 'proxy config'
Feature = 'context'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'server config, virtual host, directory'
Description = ''

[[data]]
Language = 'apache '
"Operand Type" = 'proxy config'
Feature = 'reverse'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
ProxyPass "/foo" "http://foo.example.com/bar"
ProxyPassReverse "/foo" "http://foo.example.com/bar"'''
Description = 'as far as client knows, the apache server is responding.'

[[data]]
Language = 'apache '
"Operand Type" = 'proxy config'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<Location "/mirror/foo/">
    ProxyPass "http://backend.example.com/"
</Location>'''
Description = ' local request for http://example.com/mirror/foo/bar to be internally converted into a proxy request to http://backend.example.com/bar.'

[[data]]
Language = 'apache '
"Operand Type" = 'proxy config'
Feature = 'forward'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
ProxyRequests On
ProxyVia On

<Proxy "*">
  Require host internal.example.com
</Proxy>'''
Description = 'Strictly limiting access is essential if you are using a forward proxy (using the ProxyRequests directive). Otherwise, your server can be used by any client to access arbitrary hosts while hiding his or her true identity. This is dangerous both for your network and for the Internet at large.'

[[data]]
Language = 'apache '
"Operand Type" = 'rewrite config'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = 'mod_rewrite a flexible to manipulate URLs using an unlimited number of rules.'

[[data]]
Language = 'apache '
"Operand Type" = 'rewrite config'
Feature = ''
Subfeature = 'enable'
Importance = ''
"Implementation Type" = ''
Syntax = 'RewriteEngine on'
Description = ''

[[data]]
Language = 'apache '
"Operand Type" = 'rewrite config'
Feature = ''
Subfeature = 'condition: restrict to base-path'
Importance = ''
"Implementation Type" = ''
Syntax = '    RewriteBase "/myapp/"'
Description = ''

[[data]]
Language = 'apache '
"Operand Type" = 'rewrite config'
Feature = ''
Subfeature = 'condition: general'
Importance = ''
"Implementation Type" = ''
Syntax = '''
        RewriteCond %{SERVER_NAME} =api.vedavaapi.org
'''
Description = ''

[[data]]
Language = 'apache '
"Operand Type" = 'rewrite config'
Feature = ''
Subfeature = 'force ssl'
Importance = ''
"Implementation Type" = ''
Syntax = '''
        RewriteCond %{SERVER_NAME} =api.vedavaapi.org
        RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent]
'''
Description = ''

[[data]]
Language = 'apache '
"Operand Type" = 'wsgi'
Feature = 'configure'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<VirtualHost *>
    ServerName example.com
    WSGIDaemonProcess yourapplication user=user1 group=group1 threads=5
    WSGIScriptAlias / /var/www/yourapplication/yourapplication.wsgi
   Alias /py/static /home/samskritam/vedavaapi_py_api/static
    <Directory /var/www/yourapplication>
        WSGIProcessGroup yourapplication
        WSGIApplicationGroup %{GLOBAL}
        Order deny,allow
        Allow from all
    </Directory>
</VirtualHost>'''
Description = 'WSGIScriptAlias points to the python code that runs.'

[[data]]
Language = 'Django python'
"Operand Type" = 'concept'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'Python HTTP server + html templating language. See protocol page for more info.'

[[data]]
Language = 'Django python'
"Operand Type" = 'settings'
Feature = 'define'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'Create settings.py'
Description = 'Python module with module level variables.'

[[data]]
Language = 'Django python'
"Operand Type" = 'settings'
Feature = 'middleware layers'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
# Order matters.
MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.doc.XViewMiddleware',
)
'''
Description = 'Like an onion, alter request and response to and from the view'

[[data]]
Language = 'Django python'
"Operand Type" = 'settings'
Feature = 'secret key'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = """
# Genereated by http://www.miniwebtool.com/django-secret-key-generator/
SECRET_KEY = 'sdf'"""
Description = 'Used in assymetric key cryptography used for exchanging session key'

[[data]]
Language = 'Django python'
"Operand Type" = 'settings'
Feature = 'debug'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
DEBUG = True
TEMPLATE_DEBUG = DEBUG'''
Description = ''

[[data]]
Language = 'Django python'
"Operand Type" = 'settings'
Feature = 'url dispatcher'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = "ROOT_URLCONF = 'python.module'"
Description = ''

[[data]]
Language = 'Django python'
"Operand Type" = 'settings'
Feature = 'template directory'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'TEMPLATE_DIRS = (strList)'
Description = ''

[[data]]
Language = 'Django python'
"Operand Type" = 'url dispatcher'
Feature = 'setup'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
from django.conf.urls import defaults
urlpatterns = defaults.patterns(prefixStr,
  (regEx, module.viewClass.asView(clsArg1=val)), 
  (regEx, 'module.viewFn', {argName: val}), 
..) # function call returns python list'''
Description = '''
Calls fn(request, unnamedPattern1.., 
patternName1=matchedStr ..)'''

[[data]]
Language = 'Django python'
"Operand Type" = 'template'
Feature = 'concept'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = '''
not simply Python embedded into HTML. 
provides tags which function similarly to some programming constructs – an if tag for boolean tests, a for tag for looping, etc. – but these are not simply executed as the corresponding Python code, and the template system will not execute arbitrary Python expressions. '''

[[data]]
Language = 'Django python'
"Operand Type" = 'template'
Feature = 'setup'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'A text file.'
Description = 'can generate any text-based format - html, xml, csv ..'

[[data]]
Language = 'Django python'
"Operand Type" = 'template'
Feature = 'variable'
Subfeature = 'insert value'
Importance = ''
"Implementation Type" = ''
Syntax = '{{var.name}}'
Description = '''
. Resolution in order: hashmap lookup, attribute lookup, method call, list index lookup
value is escaped.'''

[[data]]
Language = 'Django python'
"Operand Type" = 'template'
Feature = 'variable'
Subfeature = 'insert value'
Importance = ''
"Implementation Type" = ''
Syntax = '{{ data|safe }}'
Description = 'value is not escaped.'

[[data]]
Language = 'Django python'
"Operand Type" = 'template'
Feature = 'variable'
Subfeature = 'filter'
Importance = ''
"Implementation Type" = ''
Syntax = '''
{{var|filter}}
{{var|filter:args}}'''
Description = ''

[[data]]
Language = 'Django python'
"Operand Type" = 'template'
Feature = 'filter'
Subfeature = 'text'
Importance = ''
"Implementation Type" = ''
Syntax = '''
striptags addslashes (\') escape (&lt) linebreak (<p>) urlencode urlize  urlizetrunc
capfirst upper lower title 
pluralize linenumber
center rjust wordwrap 
cut'''
Description = ''

[[data]]
Language = 'Django python'
"Operand Type" = 'template'
Feature = 'filter'
Subfeature = 'numeric'
Importance = ''
"Implementation Type" = ''
Syntax = 'add:val divisibleby floatformat'
Description = ''

[[data]]
Language = 'Django python'
"Operand Type" = 'template'
Feature = 'filter'
Subfeature = 'date'
Importance = ''
"Implementation Type" = ''
Syntax = 'date:"D d M Y"'
Description = ''

[[data]]
Language = 'Django python'
"Operand Type" = 'template'
Feature = 'filter'
Subfeature = 'default'
Importance = ''
"Implementation Type" = ''
Syntax = 'default:val default_if_none yesno:T,F,?'
Description = ''

[[data]]
Language = 'Django python'
"Operand Type" = 'template'
Feature = 'filter'
Subfeature = 'collections'
Importance = ''
"Implementation Type" = ''
Syntax = '''
length wordcount
dictsort dictsortreversed join:sep  
first last'''
Description = ''

[[data]]
Language = 'Django python'
"Operand Type" = 'template'
Feature = 'for'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
{% for athlete in athlete_list %} ..
{% endfor %}'''
Description = ''

[[data]]
Language = 'Django python'
"Operand Type" = 'template'
Feature = 'if'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '{% if cond %} .. else endif'
Description = ''

[[data]]
Language = 'Django python'
"Operand Type" = 'template'
Feature = 'comment'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '{# greeting #}'
Description = ''

[[data]]
Language = 'Django python'
"Operand Type" = 'template'
Feature = 'inherit'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '{% extends "base.html" %}'
Description = ''

[[data]]
Language = 'Django python'
"Operand Type" = 'template'
Feature = 'block'
Subfeature = 'define/ override'
Importance = ''
"Implementation Type" = ''
Syntax = '{% block title %}..{% endblock %}'
Description = ''

[[data]]
Language = 'Django python'
"Operand Type" = 'template'
Feature = 'autoescape'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
{% autoescape off %}
{% endautoescape %}'''
Description = ''

[[data]]
Language = 'Django python'
"Operand Type" = 'template'
Feature = 'tag/ filter library'
Subfeature = 'load'
Importance = ''
"Implementation Type" = ''
Syntax = '{% load comments %}'
Description = 'Loading not inherited.'

[[data]]
Language = 'Django python'
"Operand Type" = 'view function'
Feature = 'define'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
from django import shortcuts
def Fn(request):
  .. return shortcuts.render_to_response("tmpl.html", argsMap)'''
Description = ''

[[data]]
Language = 'Django python'
"Operand Type" = 'view function'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'django.http.HttpResponse(str)'
Description = ''

[[data]]
Language = 'Django python'
"Operand Type" = 'view class'
Feature = 'View'
Subfeature = 'respond'
Importance = ''
"Implementation Type" = ''
Syntax = '''
class X(View):
dispatch(self, req, *args, **dict):
# return response.'''
Description = 'Delegate to get() and post().'

[[data]]
Language = 'Django python'
"Operand Type" = 'view class'
Feature = 'TemplateView'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
from django.views.generic.base import TemplateView
class X(TemplateView):
template_name = ".."
def get_context_data(self, **kwargs):
paramsMap = super(X,self).get_context_data(**kwargs)
return paramsMap
'''
Description = 'paramsMap["key"] will be available in the template as {{key}}'

[[data]]
Language = 'flask python'
"Operand Type" = 'concept'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'Python HTTP server + Jinja2 html templating language.'

[[data]]
Language = 'flask python'
"Operand Type" = 'app'
Feature = 'setup'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
from flask import Flask
# Module file locus determines flask root path.
app = Flask(__name__)

@app.route('/')
def hello_world():
   return 'Hello World’

if __name__ == '__main__':
   app.run()'''
Description = 'app.run(host, port, debug, options) - all params optional'

[[data]]
Language = 'flask python'
"Operand Type" = 'app'
Feature = 'setup'
Subfeature = 'enable CORS'
Importance = ''
"Implementation Type" = ''
Syntax = '''
from flask_cors import CORS
app = flask.Flask("run")
CORS(app=app,
     # injects the `Access-Control-Allow-Credentials` header in responses. This allows cookies and credentials to be submitted across domains.
     supports_credentials=True)'''
Description = '''
# Let Javascsipt hosted elsewhere access our API.
'''

[[data]]
Language = 'flask python'
"Operand Type" = 'app'
Feature = 'setup'
Subfeature = 'register blueprint'
Importance = ''
"Implementation Type" = ''
Syntax = '''
api_blueprint = Blueprint(name='api', import_name=__name__, url_prefix=URL_PREFIX)
app.register_blueprint(apiv1)
app.register_blueprint(simple_page, url_prefix='/pages').'''
Description = 'Not necessary if the app itself was supplied when constructing the Api object'

[[data]]
Language = 'flask python'
"Operand Type" = 'url rule'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
@app.route(‘/hello’)
@some_blueprint.route(...)'''
Description = ''

[[data]]
Language = 'flask python'
"Operand Type" = 'url rule'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
def hello_world():
   return ‘hello world’
app.add_url_rule(‘/’, ‘hello’, hello_world)'''
Description = ''

[[data]]
Language = 'flask python'
"Operand Type" = 'url rule'
Feature = 'dynamic'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''

@app.route('/hello/<name>')
def hello_name(name):
   return 'Hello %s!' % name

@app.route('/blog/<int:postID>')
def show_blog(postID):
   return 'Blog Number %d' % postID

@app.route('/rev/<float:revNo>')
def revision(revNo):
   return 'Revision Number %f' % revNo'''
Description = ''

[[data]]
Language = 'flask python'
"Operand Type" = 'url rule'
Feature = 'canonical url'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = """
@app.route('/python/')
def hello_python():
   return 'Hello Python'"""
Description = 'using /python or /python/ returns the same output. '

[[data]]
Language = 'flask python'
"Operand Type" = 'url rule'
Feature = 'specify methods'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''@app.route('/login',methods = ['POST', 'GET'])'''
Description = 'GET only is default'

[[data]]
Language = 'flask python'
"Operand Type" = 'url rule'
Feature = 'redirect'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
@app.route('/guest/<guest>')
def hello_guest(guest):
   return 'Hello %s as Guest' % guest

@app.route('/user/<name>')
def hello_user(name):
   if name =='admin':
      return redirect(url_for('hello_admin'))
   else:
      return redirect(url_for('hello_guest',guest = name))

Flask.redirect(location, statuscode, response)'''
Description = ''

[[data]]
Language = 'flask python'
"Operand Type" = 'url rule'
Feature = 'subdomain'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''

@app.route("/dynamic", subdomain="<username>")
def username_index(username):
    """Dynamic subdomains are also supported
    Try going to user1.your-domain.tld/dynamic"""
    return username + ".your-domain.tld"'''
Description = ''

[[data]]
Language = 'flask python'
"Operand Type" = 'get url for handler'
Feature = 'Flask restplus handlers'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
# current_user_handler corresponds to CurrentUserHandler class.
url_for('.current_user_handler')
'''
Description = ''

[[data]]
Language = 'flask python'
"Operand Type" = 'request'
Feature = '''
get method
get form data
'''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
@app.route('/login',methods = ['POST', 'GET'])
def login():
   if request.method == 'POST':
      user = request.form['nm']
      return redirect(url_for('success',name = user))
   else:
      user = request.args.get('nm')
      return redirect(url_for('success',name = user))'''
Description = '''request.form yields an ugly immutablemultidict with values like: ImmutableMultiDict([('data[0][children][0][py/object]', u'common.data_containers.JsonObjectNode')])'''

[[data]]
Language = 'flask python'
"Operand Type" = 'request'
Feature = 'get json dict'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'xyz = request.json'
Description = '''
Available if stringified json was sent in the AJAX call, with appropriate header:
Content-Type:application/json; charset=UTF-8 . '''

[[data]]
Language = 'flask python'
"Operand Type" = 'response'
Feature = 'general'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
 response = app.response_class(
        response=json.dumps(data),
        status=200,
        mimetype='application/json'
    )
    return response'''
Description = ''

[[data]]
Language = 'flask python'
"Operand Type" = 'response'
Feature = 'render template'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
@app.route('/')
def index():
   return render_template(‘hello.html’)
   return render_template('error.html'), 404'''
Description = ''

[[data]]
Language = 'flask python'
"Operand Type" = 'response'
Feature = 'render template'
Subfeature = 'set variables'
Importance = ''
"Implementation Type" = ''
Syntax = '''
      return render_template("viewbook.html",
                             bookpath=request.args.get('path'), title="Explore a Book")
'''
Description = ''

[[data]]
Language = 'flask python'
"Operand Type" = 'response'
Feature = 'return json'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''

@app.route('/summary')
def summary():
    d = make_summary()
    return jsonify(d)

@app.route('/_get_current_user')
def get_current_user():
    return jsonify(
        username=g.user.username,
        email=g.user.email,
        id=g.user.id
    )'''
Description = ''

[[data]]
Language = 'flask python'
"Operand Type" = 'response'
Feature = 'static file'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
@app.route('/static/<path:filepath>')
def root(filepath):
  return app.send_static_file('/static/' + filepath)
  return send_from_directory(repodir(), pagepath)
'''
Description = ''

[[data]]
Language = 'flask python'
"Operand Type" = 'response'
Feature = 'handle errors'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
@app.errorhandler(404)
def not_found(error):
    return render_template('error.html'), 404'''
Description = ''

[[data]]
Language = 'flask python'
"Operand Type" = 'cookie'
Feature = 'set'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
   resp = make_response(render_template('readcookie.html'))
   resp.set_cookie('userID', user)
'''
Description = ''

[[data]]
Language = 'flask python'
"Operand Type" = 'cookie'
Feature = 'get'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''name = request.cookies.get('userID')'''
Description = ''

[[data]]
Language = 'flask python'
"Operand Type" = 'session dict'
Feature = 'get, set , delete'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
@app.route('/')
def index():
   if 'username' in session:
      username = session['username']
  session['some_name'] = some_val
  session.pop('username', None)
'''
Description = ''

[[data]]
Language = 'flask python'
"Operand Type" = 'file upload'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = """
@app.route('/uploader', methods = ['GET', 'POST'])
def upload_file():
   if request.method == 'POST':
      f = request.files['file']
      f.save(secure_filename(f.filename))
      return 'file uploaded successfully'"""
Description = ''

[[data]]
Language = 'flask python'
"Operand Type" = 'test'
Feature = 'setup client'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
@pytest.fixture(scope='module')
def app_fixture(request):
  app = run.app.test_client()
  return app

'''
Description = ''

[[data]]
Language = 'flask python'
"Operand Type" = 'test'
Feature = 'get'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
def test_book_list(app_fixture):
  url = "ullekhanam/v1/dbs/ullekhanam_test/books"
  response = app_fixture.get(url)
  book_nodes = json.loads(response.data)
  assert book_nodes.__len__() > 0'''
Description = ''

[[data]]
Language = 'flask python'
"Operand Type" = 'test'
Feature = 'post'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
response= client.post('/test_function', 
                       data=json.dumps(dict(foo='bar')),
                       content_type='application/json')'''
Description = ''

[[data]]
Language = 'flask python'
"Operand Type" = 'test'
Feature = 'access session'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
  with test_client.session_transaction() as session:
    session["user"] = vedavaapi_bot_user.to_json_map()
'''
Description = ''

[[data]]
Language = 'flask restful py'
"Operand Type" = 'concept'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'flask library with REST API architecture style'

[[data]]
Language = 'flask restful py'
"Operand Type" = 'app'
Feature = 'setup'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = '''
same as flask.
Not necessary if the app itself was supplied when constructing the Api object'''

[[data]]
Language = 'flask restful py'
"Operand Type" = 'api'
Feature = 'setup'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'api = Api(app)'
Description = ''

[[data]]
Language = 'flask restful py'
"Operand Type" = 'api'
Feature = 'setup'
Subfeature = 'from blueprint'
Importance = ''
"Implementation Type" = ''
Syntax = '''
api_blueprint = Blueprint(name='api', import_name=__name__, url_prefix=URL_PREFIX)
api = flask_restplus.Api(app=api_blueprint)'''
Description = ''

[[data]]
Language = 'flask restful py'
"Operand Type" = 'api'
Feature = 'setup'
Subfeature = 'namespace'
Importance = ''
"Implementation Type" = ''
Syntax = '''
stats_ns = api.namespace('stats', 'Stats methods')
prats_ns = api.namespace('prats', 'Prats methods')'''
Description = ''

[[data]]
Language = 'flask restful py'
"Operand Type" = 'json resource Handler'
Feature = 'define'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''

class TodoSimple(Resource):
    def get(self, todo_id):
        return {todo_id: todos[todo_id]}

    def put(self, todo_id):
        todos[todo_id] = request.form['data']
        return {todo_id: todos[todo_id]}

api.add_resource(TodoSimple, '/<string:todo_id>')
'''
Description = ''

[[data]]
Language = 'flask restful py'
"Operand Type" = 'match URL to resource'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
api.add_resource(TodoList, '/todos')
api.add_resource(Todo,
    '/todo/<int:todo_id>', endpoint='todo_ep')'''
Description = '''
Resource segment parsing: 
<int:x>/<string:y>/...'''

[[data]]
Language = 'flask restful py'
"Operand Type" = 'match URL to resource'
Feature = 'with decorator'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
@api.route('/my-resource/<id>', endpoint='my-resource')
class TodoSimple(Resource):
    def get(self, todo_id):...'''
Description = ''

[[data]]
Language = 'flask restful py'
"Operand Type" = 'match URL to resource'
Feature = 'document fields'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
@api.route('/my-resource/<id>', endpoint='my-resource')
@api.doc(params={'id': 'An ID'})
class MyResource(Resource): ...'''
Description = ''

[[data]]
Language = 'flask restful py'
"Operand Type" = 'request'
Feature = 'parse'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
from flask_restful import reqparse

parser = reqparse.RequestParser()
parser.add_argument('rate', type=int, help='Rate to charge for this resource')
args = parser.parse_args()
args = parser.parse_args(strict=True)
'''
Description = ''

[[data]]
Language = 'flask restful py'
"Operand Type" = 'response'
Feature = 'error'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''abort(404, message="Todo {} doesn't exist".format(todo_id))'''
Description = ''

[[data]]
Language = 'flask restful py'
"Operand Type" = 'response'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
from the right method
return xyz 
return task, 201'''
Description = ''

[[data]]
Language = 'flask restful py'
"Operand Type" = 'response'
Feature = 'marshall output'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
from flask_restful import Resource, fields, marshal_with

resource_fields = {
    'name': fields.String,
    'address': fields.String,
    'date_updated': fields.DateTime(dt_format='rfc822'),
}

class Todo(Resource):
    @marshal_with(resource_fields, envelope='resource')
    def get(self, **kwargs):
        return db_get_todo()  # Some function that queries the db'''
Description = ''

[[data]]
Language = 'flask restplus py'
"Operand Type" = 'concept'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = '''
flask library with REST API architecture style. provides a coherent collection of decorators and tools to describe your API and expose its documentation properly (using Swagger).
Mostly backward compatible with flask_restful and flask. - so use same style'''

[[data]]
Language = 'flask restplus py'
"Operand Type" = 'setup'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
api = flask_restplus.Api(app=api_blueprint, version='1.0', title='POC API',
          description='Proof of Concept API')'''
Description = """
Same as flask restful, but set:
 doc='/doc/' while creating the API to set swagger documentation path.
 description='xyz <a href=\"asdf\">asdfa</a>'"""

[[data]]
Language = 'flask restplus py'
"Operand Type" = 'doc inheritence'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'Method documentation takes precedence over class documentation, and inherited documentation takes precedence over parent documentation.'

[[data]]
Language = 'flask restplus py'
"Operand Type" = 'general document'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''

@api.doc(responses={404: 'todo_id not found'}, params={'todo_id': 'The todo_id of the todo'})
@api.route('/<string:todo_id>')
class TodoSimple(Resource):
    def get(self, todo_id):
        """ This is included too!"""
        return {todo_id: todos[todo_id]}

    @api.doc(responses={204: 'Stat deleted'})
    def delete(self, todo_id):
        abort_if_stat_doesnt_exist(todo_id)
        del todos[todo_id]
        return '', 204'''
Description = ''

[[data]]
Language = 'flask restplus py'
"Operand Type" = 'json model'
Feature = 'define'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
parent = api.model('Parent', {
    'name': fields.String,
    'class': fields.String(discriminator=True)
})

child = api.inherit('Child', parent, {
    'extra': fields.String
})'''
Description = '''
Equivalent to passing schema:
{
    "properties": {
        "name": {"type": "string"},
        "class": {"type": "string"}
    },
    "discriminator": "class",
    "required": ["class"]
}'''

[[data]]
Language = 'flask restplus py'
"Operand Type" = 'response'
Feature = 'marshall and document'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
resource_fields = api.model('Resource', {
    'name': fields.String,
})

@api.route('/my-resource/<id>', endpoint='my-resource')
class MyResource(Resource):
    @api.marshal_with(resource_fields, as_list=True)
    def get(self):
        return get_objects()

    @api.marshal_with(resource_fields, code=201)
    def post(self):
        return create_object(), 201'''
Description = '''
works like the raw marshal_with() decorator with the difference that it documents the methods.
Api.marshal_list_with() decorator is strictly equivalent to Api.marshal_with(fields, as_list=True)().'''

[[data]]
Language = 'flask restplus py'
"Operand Type" = 'response'
Feature = 'document'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
    @api.response(400, 'Validation error')
    @api.response(200, 'Success', model)'''
Description = '''shortcut for @api.doc(responses='...').'''

[[data]]
Language = 'flask restplus py'
"Operand Type" = 'request'
Feature = 'document'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
@api.route('/my-resource/<id>', endpoint='my-resource')
@api.param('id', 'An ID')
class MyResource(Resource):
    pass
'''
Description = ''

[[data]]
Language = 'flask restplus py'
"Operand Type" = 'request'
Feature = 'arguments  parser'
Subfeature = 'get parser'
Importance = ''
"Implementation Type" = ''
Syntax = '''
parser = api.parser()

from flask_restplus import reqparse
parser = reqparse.RequestParser()
'''
Description = ''

[[data]]
Language = 'flask restplus py'
"Operand Type" = 'request'
Feature = 'arguments  parser'
Subfeature = 'type, location'
Importance = ''
"Implementation Type" = ''
Syntax = '''
parser.add_argument('param', type=int, help='Some param', location='form', required=True)
parser.add_argument('in_files', type=FileStorage, location='files')
parser.add_argument('PageSize', type=int, default=-2, location='args')
parser.add_argument('User-Agent', location='headers')
parser.add_argument('session_id', location='cookies')
parser.add_argument('xyz', location='json')'''
Description = '''Only use type=list when location='json'.'''

[[data]]
Language = 'flask restplus py'
"Operand Type" = 'request'
Feature = 'arguments  parser'
Subfeature = 'choice, default, requirement'
Importance = ''
"Implementation Type" = ''
Syntax = '''
parser.add_argument('page', type=int, required=False)
parser.add_argument('per_page', type=int, required=False,
                                  choices=[5, 10, 20, 30, 40, 50], default=10)'''
Description = ''

[[data]]
Language = 'flask restplus py'
"Operand Type" = 'request'
Feature = 'arguments  parser'
Subfeature = 'use'
Importance = ''
"Implementation Type" = ''
Syntax = '''
args = parser.parse_args()
args['public_name']'''
Description = ''

[[data]]
Language = 'flask restplus py'
"Operand Type" = 'request'
Feature = 'verify and document'
Subfeature = 'with json'
Importance = ''
"Implementation Type" = ''
Syntax = '''
resource_fields = api.model('Resource', {
    'name': fields.String,
})

@api.route('/my-resource/<id>')
class MyResource(Resource):
    @api.expect(resource_fields, [validate=True])
    def get(self):
        pass'''
Description = '''
Document and optionally verify.

'''

[[data]]
Language = 'flask restplus py'
"Operand Type" = 'request'
Feature = 'verify and document'
Subfeature = 'with parser'
Importance = ''
"Implementation Type" = ''
Syntax = '''
    @api.expect(some_parser, [validate=True])
    def get(self):
        pass'''
Description = ''

[[data]]
Language = 'flask restplus py'
"Operand Type" = 'request'
Feature = 'verify and document'
Subfeature = 'list'
Importance = ''
"Implementation Type" = ''
Syntax = '''
@api.route('/my-resource/<id>')
class MyResource(Resource):
    @api.expect([resource_fields])
    def get(self):
        pass'''
Description = ''

[[data]]
Language = 'jinja2 template'
"Operand Type" = 'statements'
Feature = 'general structure'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '{% ... %} for Statements'
Description = ''

[[data]]
Language = 'jinja2 template'
"Operand Type" = 'statements'
Feature = 'conditional'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
{% if marks>50 %}
      <h1> Your result is pass!</h1>
      {% else %}
      <h1>Your result is fail</h1>
      {% endif %}'''
Description = ''

[[data]]
Language = 'jinja2 template'
"Operand Type" = 'statements'
Feature = 'for'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
{% for key, value in result.iteritems() %}
         
            <tr>
               <th> {{ key }} </th>
               <td> {{ value }} </td>
            </tr>
            
         {% endfor %}'''
Description = ''

[[data]]
Language = 'jinja2 template'
"Operand Type" = 'statements'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '# ... ## for Line Statements'
Description = ''

[[data]]
Language = 'jinja2 template'
"Operand Type" = 'template'
Feature = 'define'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<title>{% block title %}{% endblock %}</title>
<h1>{{ self.title() }}</h1>
{% block body %}{% endblock %}'''
Description = ''

[[data]]
Language = 'jinja2 template'
"Operand Type" = 'template'
Feature = 'define'
Subfeature = 'refer to block'
Importance = ''
"Implementation Type" = ''
Syntax = '''
    {% if title %}
    <title>IndicLibrary: {{ title }}</title>
    {% else %}
    <title>IndicLibrary: Visual Manuscript Decoder</title>
    {% endif %}
'''
Description = ''

[[data]]
Language = 'jinja2 template'
"Operand Type" = 'template'
Feature = 'extend'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
{% extends "base.html" %}
{% if self.foo() %} - {% endif %}
{% block title %}Index{% endblock %}
{% block head %}
    {{ super() }}
    <style type="text/css">
        .important { color: #336699; }
    </style>
{% endblock %}'''
Description = ''

[[data]]
Language = 'jinja2 template'
"Operand Type" = 'expression'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
{{ ... }} for Expressions to print to the template output
'''
Description = ''

[[data]]
Language = 'jinja2 template'
"Operand Type" = 'functions'
Feature = 'get static url'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''url_for('static', filename = 'hello.js')'''
Description = ''

[[data]]
Language = 'jinja2 template'
"Operand Type" = 'comments'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
{# ... #} for Comments not included in the template output
'''
Description = ''

[[data]]
Language = 'js package management'
"Operand Type" = ''
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = '''See 'meta' sheet'''

[[data]]
Language = 'web components'
"Operand Type" = ''
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = '''
API-s to create custom, reusable, encapsulated HTML tags to use in web pages 
Build on the Web Component standards, will work across modern browsers'''

[[data]]
Language = 'web components'
"Operand Type" = 'install/ manage'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'See under js-packages.'

[[data]]
Language = 'web components'
"Operand Type" = 'use'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<!doctype html> <html>  <head>
    <script src="bower_components/webcomponentsjs/webcomponents-lite.js"></script>
    <link rel="import" href="bower_components/emoji-rain/emoji-rain.html">
  </head>
  <body>    <emoji-rain active></emoji-rain>  </body>
</html>'''
Description = ''

[[data]]
Language = 'web components'
"Operand Type" = 'use'
Feature = 'lazy import'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<link rel="import" href="../lazy-imports-mixin.html">
<link rel="lazy-import" href="bower_components/emoji-rain/emoji-rain.html">
'''
Description = 'Lazy import does not block web page loading. Works with Polymer'

[[data]]
Language = 'web components'
"Operand Type" = 'DOM subtree'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
const header = document.createElement('header');
const shadowRoot = header.attachShadow({mode: 'open'});
shadowRoot.innerHTML = '<h1>Hello Shadow DOM</h1>'; // Could also use appendChild().'''
Description = 'Aka shadow DOM.'

[[data]]
Language = 'web components'
"Operand Type" = 'define'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
class AppDrawer extends HTMLElement {...}
window.customElements.define('app-drawer', AppDrawer);'''
Description = ''

[[data]]
Language = 'web components'
"Operand Type" = 'define'
Feature = 'use libraries'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'bosonic polymer skatejs slim.js'

[[data]]
Language = 'polymer web components'
"Operand Type" = ''
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = 'Define custom webcomponents easily.'

[[data]]
Language = 'polymer web components'
"Operand Type" = 'system setup'
Feature = 'general'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
npm install -g polymer-cli
polymer serve --open
polymer build'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'system setup'
Feature = 'files'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
bower.json - specify dependencies
manifest.json - polymer app info
package.json - 
polymer.json - used by polymer-cli - define builds, source folder, dependency files, fragment-file list, entry point
src --> html files defining various DOM elements.
'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'system setup'
Feature = 'install deps'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'Use bower'

[[data]]
Language = 'polymer web components'
"Operand Type" = 'define + register'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<link rel="import"  href="https://polygit.org/components/polymer/polymer-element.html">
<script>  // Define the class for a new element called custom-element
  class CustomElement extends Polymer.Element {
    static get is() { return "custom-element"; }
    constructor() { super(); this.textContent = "I'm a custom-element.";
      }  }  // Register the new element with the browser
  customElements.define(CustomElement.is, CustomElement);
</script>'''
Description = 'A polymer web component is fully defined by its properties, methods, and events .'

[[data]]
Language = 'polymer web components'
"Operand Type" = 'define + register'
Feature = 'shadow dom'
Subfeature = 'setup'
Importance = ''
"Implementation Type" = ''
Syntax = '''
<link rel="import"  href="https://polygit.org/components/polymer/polymer-element.html">
<dom-module id="dom-element"> 
<template>    <p>sdfgas</p>  </template>
  <script>
    class DomElement extends Polymer.Element {
      static get is() { return "dom-element"; }
    }
    customElements.define(DomElement.is, DomElement);  
</script></dom-module>'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'define + register'
Feature = 'extend'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
lass ChildElement extends ParentElement {
  /* ... */
}
class ChildElement extends customElements.get('parent-element') {
  /* ... */
}'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'define + register'
Feature = 'mixin'
Subfeature = 'define'
Importance = ''
"Implementation Type" = ''
Syntax = '''
MyMixin = function(superClass) {
    return class extends superClass {
      // Code that you want common to elements.
      // If you're going to override a lifecycle method, remember that a) you
      // might need to call super but b) it might not exist
      connectedCallback() {
        if (super.connectedCallback) {
          super.connectedCallback();
        }
        /* ... */
'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'define + register'
Feature = 'mixin'
Subfeature = 'use'
Importance = ''
"Implementation Type" = ''
Syntax = '''
dom-module id="element-name">
  <template><!-- ... --></template>
  <script>
    // This could also be a sequence:
    //class MyElement extends AnotherMixin(MyMixin(Polymer.Element)) { … }
    class MyElement extends MyMixin(Polymer.Element) {
      static get is() { return 'element-name' }
      /* ... */
    }
    customElements.define(MyElement.is, MyElement);
  </script>
</dom-module>'''
Description = ''

[[data]]
Language = ''
"Operand Type" = ''
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = ''

[[data]]
Language = ''
"Operand Type" = ''
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = ''

[[data]]
Language = ''
"Operand Type" = ''
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = ''

[[data]]
Language = ''
"Operand Type" = ''
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = ''

[[data]]
Language = ''
"Operand Type" = ''
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = ''

[[data]]
Language = ''
"Operand Type" = ''
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'property'
Feature = 'define'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
      static get properties() {
        return {
  owner: { type: String, value: "Daniel"}
 };
}'''
Description = 'Note: property name dictEntry corresponds to html attribute dict-entry. Everything becomes lowercase.'

[[data]]
Language = 'polymer web components'
"Operand Type" = 'property'
Feature = 'define'
Subfeature = 'computed'
Importance = ''
"Implementation Type" = ''
Syntax = '''
fullName: {
  type: String,
  computed: 'computeFullName(first, last)'
}'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'property'
Feature = 'read/ set in template'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'See Dom template -> data binding'

[[data]]
Language = 'polymer web components'
"Operand Type" = '''
property definition
(non array, non object)'''
Feature = 'limit flow'
Subfeature = 'to calling element'
Importance = ''
"Implementation Type" = ''
Syntax = '''
        someProp: {
          type: ..,
          notify: true
        }'''
Description = '''
default: false.
Changes to this property in the sub-element gets propagated to the bound property in the calling element - if {{someProp}} is used in binding.'''

[[data]]
Language = 'polymer web components'
"Operand Type" = '''
property definition
(non array, non object)'''
Feature = 'limit flow'
Subfeature = 'from calling element'
Importance = ''
"Implementation Type" = ''
Syntax = 'readOnly: true'
Description = '''
default: false.
Changes to the bound property in the calling element cannot propagate to this property in the sub element. But vice versa is not affected by this setting. '''

[[data]]
Language = 'polymer web components'
"Operand Type" = '''
property definition
(array or object)'''
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'No flow control limitations for content changes.'

[[data]]
Language = 'polymer web components'
"Operand Type" = 'property definition'
Feature = 'update attribute'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
          reflectToAttribute: true,
'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'property definition'
Feature = 'force full change check'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'Use Polymer.MutableData mixin'
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'property definition'
Feature = 'listener'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
static get properties() {
  return {
    myProperty: {
      observer: '_myPropertyChanged'    }  }}
_myPropertyChanged(value, /*oldValue */) { /* ... */ }'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'property changes'
Feature = 'observable changes'
Subfeature = 'set'
Importance = ''
"Implementation Type" = ''
Syntax = '''
this.owner = 'Jane'; 
2-way data binding: 
<local-dom-child name="{{hostProperty.subProperty}}"></local-dom-child>
this.set('address.street', 'Half Moon Street');
this.push('users', { name: 'Maturin'});
this.setProperties({a: 10, b: 20}); // Fire once for both props
'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'property changes'
Feature = 'unobservable changes'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
this.address.street = 'Elm Street';
this.users.push({ name: 'Maturin'});'''
Description = '''Polymer performs dirty checking for objects and arrays using object equality. It doesn't produce any property effects if the value at the specified path hasn't changed.'''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'property changes'
Feature = 'unobservable changes'
Subfeature = 'notify change'
Importance = ''
"Implementation Type" = ''
Syntax = '''
this.notifyPath('address.street');
this.addresses = this.addresses.slice(); // clones'''
Description = '''For example, calling this.notifyPath('address') doesn't pick up a change to address.street if the address object itself remains unchanged. '''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'property'
Feature = 'access in js method'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
var value = this.get('myProp.subProp');
var item = this.get(['myArray', 11])'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'dom template'
Feature = 'shadow dom'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<template> 
<style> ... </style>
This is <b>{{owner}}</b>'s name-tag element.
</template>'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'dom template'
Feature = 'drop-down'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
  <link rel="import" href="../../paper-listbox/paper-listbox.html">
  <link rel="import" href="../../paper-tabs/paper-tabs.html">
  <link rel="import" href="../paper-dropdown-menu.html">
  <link rel="import" href="../paper-dropdown-menu-light.html">
<paper-dropdown-menu label="xyz" [disabled]>
  <paper-listbox slot="dropdown-content" selected="1">
    <paper-item>a</paper-item>...  </paper-listbox>
</paper-dropdown-menu>'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'dom template'
Feature = 'html append'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
importHref(href: string, onload: Function=, onerror: Function=, optAsync: boolean=)
Polymer.importHref(resolvedPageUrl, null, this._showPage404.bind(this), true);
'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'dom template'
Feature = 'layout'
Subfeature = 'drawer'
Importance = ''
"Implementation Type" = ''
Syntax = '''
<app-drawer-layout>
<app-drawer slot="drawer">
<app-toolbar>Menu</app-toolbar> ...
</app-drawer>
<app-header-layout has-scrolling-region>
...</app-header-layout>
</app-drawer-layout>'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'dom template'
Feature = 'property binding'
Subfeature = '2-way'
Importance = ''
"Implementation Type" = ''
Syntax = '<childElement someVar={{xyz}}>'
Description = '''
Allows: Changes to this property in the sub-element gets propagated to the bound property in the calling element and vice versa.
Creates a change listener in the calling element which also bubbles the event up.'''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'dom template'
Feature = 'property binding'
Subfeature = 'host to target'
Importance = ''
"Implementation Type" = ''
Syntax = '<childElement someVar=[[xyz]]>'
Description = '''
Changes to this property in the sub-element don't get propagated to the bound property in the calling element, but vice versa is possible with compatible settings.
ie Calling element doesn't have a change listener for this prop.'''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'dom template'
Feature = 'property binding'
Subfeature = 'input, bind'
Importance = ''
"Implementation Type" = ''
Syntax = '''
    <iron-input bind-value="{{owner}}">
      <input is="iron-input" placeholder="Your name here...">
    </iron-input>'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'dom template'
Feature = 'repeat'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<template>
 <template is="dom-repeat" items="{{employees}}">
        <div>Last name: <span>{{item.last}}</span></div>
</template>
  </template>'''
Description = '''
If using outside dom-managed template:
<link rel="import" href="components/polymer/lib/elements/dom-repeat.html">
<dom-repeat items=...>
  <template>
    ...
  </template>
</dom-repeat>
'''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'dom template'
Feature = 'conditional'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
  <template is="dom-if"  if="[[myProperty]]">
    <span>This content will appear when myProperty is truthy.</span>
  </template>
'''
Description = '''
If using outside dom-managed template:

<link rel="import" href="components/polymer/lib/elements/dom-if.html">
<dom-if if="[[myProperty]]">
...'''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'dom template'
Feature = 'style'
Subfeature = 'match attribute'
Importance = ''
"Implementation Type" = ''
Syntax = '''
:host {
        display: inline-block;
      }
:host([pressed]) iron-icon {
        fill: currentcolor;
      }'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'events'
Feature = 'lifecycle events'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'Handled by methods with those names. Call super.xyz() explicitly.'

[[data]]
Language = 'polymer web components'
"Operand Type" = 'events'
Feature = 'lifecycle events'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'ready'
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'events'
Feature = 'lifecycle events'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'constructor'
Description = 'Called when the element is upgraded (that is, when an element is created, or when a previously-created element becomes defined).'

[[data]]
Language = 'polymer web components'
"Operand Type" = 'events'
Feature = 'lifecycle events'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'connectedCallback'
Description = '''
Called when the element is added to a document.
Also when nodes change.'''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'events'
Feature = 'lifecycle events'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'disconnectedCallback'
Description = 'Called when the element is removed from a document.'

[[data]]
Language = 'polymer web components'
"Operand Type" = 'events'
Feature = 'lifecycle events'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'attributeChangedCallback'
Description = '''Called when any of the element's attributes are changed, appended, removed, or replaced,'''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'event'
Feature = 'setup gesture listen'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<link rel="import" href="polymer/lib/mixins/gesture-event-listeners.html">
  class IconToggle extends Polymer.GestureEventListeners(Polymer.Element) {
}'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'event'
Feature = 'listen'
Subfeature = 'with js'
Importance = ''
"Implementation Type" = ''
Syntax = '''
      this.addEventListener('tap', 'toggle');
      Polymer.Gestures.addListener(this, 'tap', () => this.toggle());'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'event'
Feature = 'listen'
Subfeature = 'with template annotation'
Importance = ''
"Implementation Type" = ''
Syntax = '    <button on-click="handleClick">Kick Me</button>'
Description = '''
calls handleClick method in the element.
Event target is changed to ShadowRoot, rather than the button as it bubbles out of the element.'''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'event'
Feature = 'handler'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<script>
  _filterChanged: function(e) {
    // case-sensitive filtering
    var filter = e.detail.value;
    this.filteredItems = ...;
  }  ...
</script>'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'event'
Feature = 'fire/ dispatch'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
this.dispatchEvent(new CustomEvent('kick', {detail: {kicked: true}}));
'''
Description = 'can be listened for like any other js event.'

[[data]]
Language = 'polymer web components'
"Operand Type" = 'event'
Feature = 'click'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'onclick="someMethod"'
Description = 'Listener will get event, where e.path has the origin path in the DOM tree.'

[[data]]
Language = 'polymer web components'
"Operand Type" = 'event'
Feature = 'node changes'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<link rel="import" href="/bower_components/polymer/lib/utils/flattened-nodes-observer.html">
<script>
class MyElement extends Polymer.Element {
  /* ... */
  connectedCallback: function() {
    super.connectedCallback();
    this._observer = new Polymer.FlattenedNodesObserver(this.$.drawer, function(info) {
    // info is {addedNodes: [...], removedNodes: [...]}
    });
  }
  disconnectedCallback: function() {
    super.disconnectedCallback();
    this._observer.disconnect();
  }}</script>'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'use'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<html lang="en">
  <head>
    <script src="https://polygit.org/webcomponentsjs+1.0.0-rc.5/components/webcomponentsjs/webcomponents-loader.js"></script>
    <link rel="import" href="custom-element.html">
  </head>
  <body>
    <custom-element prop2="asdf"></custom-element>
  </body>
</html>'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'sub-component'
Feature = 'use'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'Use in shadow dom as you would in regular html'

[[data]]
Language = 'polymer web components'
"Operand Type" = 'sub-node'
Feature = 'scroll to'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'Polymer.dom(this.root).querySelector(`[id="${dictEntryLinks[0].dictEntry._id}"]`).scrollIntoView();'
Description = 'linking to #InternalLink wont work.'

[[data]]
Language = 'polymer web components'
"Operand Type" = 'sub-node'
Feature = 'access in js'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'this.$.elementId'
Description = 'Nodes created dynamically using data binding (including those in dom-repeat and dom-if templates) are not added to the this.$ hash. '

[[data]]
Language = 'polymer web components'
"Operand Type" = 'sub-node'
Feature = 'access in js'
Subfeature = 'dynamic nodes'
Importance = ''
"Implementation Type" = ''
Syntax = '''
Polymer.dom(this.root).querySelector() // usual query syntax
this.$$(selector) returns first node only'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'simple bind'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<link rel="import" href="components/polymer/lib/elements/dom-bind.html">
...<body>
  <dom-bind> <template>
      <paper-input value="{{myText}}"></paper-input>
      <span>You typed: [[myText]]</span>
    </template></dom-bind>
</body>
<html>'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'iron-ajax'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<link rel="import" href="https://cdn.rawgit.com/download/polymer-cdn/1.5.0/lib/iron-ajax/iron-ajax.html">
 <dom-module id="show-repositories">    <template>
        <iron-ajax auto id="requestRepos" url="https://api.github.com/users/burczu/repos" params='{"type":"all"}' body='{}' handle-as="json" on-response="handleResponse">
        </iron-ajax>
    </template>
...</dom-module>
'''
Description = '''
Sets event.detail.response .
With auto set to true, the element performs a request whenever its url, params or body properties are changed.
You can trigger a request explicitly by calling generateRequest on the element.
'''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'iron-ajax'
Feature = 'properties'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'loading: true while lastRequest is in flight.'
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'combo box vaadin'
Feature = 'call'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
            <vaadin-combo-box id="queryBox" label="Query"  filter="{{query}}"  filtered-items="[[headwords]]" 
 on-value-changed="valueChanged"
allow-custom-value></vaadin-combo-box>
'''
Description = 'loading = true displays some UI hint that filter is being updated. Use property binding.'

[[data]]
Language = 'polymer web components'
"Operand Type" = 'combo box vaadin'
Feature = 'custom filtering'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<vaadin-combo-box filtered-items="[[filteredItems]]" on-filter-changed="_filterChanged">
</vaadin-combo-box>
In _filterChanged event handler:
    var filter = e.detail.value;
    this.filteredItems = ...;
'''
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = ''
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = 'See basics sheet for core JS'

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'implementation variations'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'JavaScript and DOM implementations vary across browsers - even from the standards. So, scripts must be tested on different target browsers.'

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'security'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = '''
First, scripts run in a sandbox in which they can only perform web-related actions, not general-purpose programming tasks like creating files. 
Second, scripts are constrained by the same origin policy: scripts from one web site do not have access to information such as usernames, passwords, or cookies sent to another site.'''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'development Chrome'
Feature = 'setup'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'Can associate with local sources, add break points, examine variables and elements'

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'development Chrome'
Feature = 'Interactive shell'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'Javascript console : Ctrl + Shift + J'

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'development'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'http://jsfiddle.net/'
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'development'
Feature = 'IDE'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'brackets.io'
Description = '''
Rich featured html css support
fast autocomplete'''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'development'
Feature = 'IDE'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'bluefish'

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'IO'
Feature = 'http'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
var xmlHttp = new XMLHttpRequest(); 
xmlHttp.onreadystatechange = processResponseFn;
xmlHttp.open( "GET", Url, true );
xmlHttp.send( null );'''
Description = 'The processResponse function should then check the xmlHttp.readyState and xmlHttp.status'

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'IO'
Feature = 'console'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
console.log(obj1 [, obj2, ..., objN]);
console.log(msg [, subst1, ..., substN]);
console.info("My first car was a", car, ". The object is: ", someObject);'''
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'browser IO'
Feature = 'alert'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'alert(msg)'
Description = '''Won't show up if called from within an alert() call!'''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'browser IO'
Feature = 'prompt'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'var x = prompt(optionalString);'
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'browser IO'
Feature = 'events : mouse'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
mousedown, mouseup, mouseout, mousemove, mouseover, click
// These include pageX, pageY properties.'''
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'browser IO'
Feature = 'event listener'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'removeEventListener()'
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'browser IO'
Feature = 'event listener'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
addEventListener(eventTypeStr, listener, bCapture)
xyz.addEventListener('kick', function (e) {
        console.log(e.detail.kicked); // true
    })'''
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'browser IO'
Feature = 'event listener'
Subfeature = 'onload'
Importance = ''
"Implementation Type" = ''
Syntax = 'window.onload(..)'
Description = '''can be overridden by another script's onload. Prefer adding a listener instead.'''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'browser IO'
Feature = 'event listener'
Subfeature = 'onload'
Importance = ''
"Implementation Type" = ''
Syntax = '''window.addEventListener('load', appendTool)'''
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'browser IO'
Feature = 'get selection'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'document.getSelection()'
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'browser IO'
Feature = 'read file'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
       document.getElementById('file').addEventListener('change', readFile, false);

       function readFile (evt) {
           var files = evt.target.files;
           var file = files[0];           
           var reader = new FileReader();
           reader.onload = function() {
             console.log(this.result);     
           }
           reader.readAsText(file)
        }'''
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'html DOM'
Feature = 'document'
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = 'A document is a special element node.'

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'html DOM'
Feature = 'document'
Subfeature = 'set html'
Importance = ''
"Implementation Type" = ''
Syntax = 'document.writeln()'
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'html DOM'
Feature = 'document'
Subfeature = 'get element node by id'
Importance = ''
"Implementation Type" = ''
Syntax = 'metadata = document.getElementById("metadata")'
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'html DOM'
Feature = 'document'
Subfeature = 'get element'
Importance = ''
"Implementation Type" = ''
Syntax = '''
var el = document.querySelector(".myclass");
var el = document.querySelector("div.user-panel.main input[name='login']");
'''
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'html DOM'
Feature = 'element node'
Subfeature = 'get element node by tagName'
Importance = ''
"Implementation Type" = ''
Syntax = '''getElementsByTagName('a')'''
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'html DOM'
Feature = 'element node'
Subfeature = 'inner html'
Importance = ''
"Implementation Type" = ''
Syntax = 'v.innerHTML = "sadfasd"'
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'html DOM'
Feature = 'element node'
Subfeature = 'child nodes : get'
Importance = ''
"Implementation Type" = ''
Syntax = 'v.childNodes'
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'html DOM'
Feature = 'element node'
Subfeature = 'child nodes : add'
Importance = ''
"Implementation Type" = ''
Syntax = '''
appendChild
document.body.appendChild(script);'''
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'html DOM'
Feature = 'element node'
Subfeature = 'attribute'
Importance = ''
"Implementation Type" = ''
Syntax = '''
v.setAttribute('rel', 'me')
element.attributeName = 'value'
'''
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'html DOM'
Feature = 'element node'
Subfeature = 'create'
Importance = ''
"Implementation Type" = ''
Syntax = '''var script = document.createElement('script');'''
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'html DOM'
Feature = 'element list'
Subfeature = 'to array'
Importance = ''
"Implementation Type" = ''
Syntax = '''
var array = Array.from(children);
'''
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'JSON'
Feature = 'call'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<script 
    type=""text/javascript"" 
    src=""http://..?..&callback=showMyVideos"">
</script>'''
Description = 'calls the callback JS Function.'

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'JSON'
Feature = 'call'
Subfeature = 'in script'
Importance = ''
"Implementation Type" = ''
Syntax = '''
var script = document.createElement('script');
script.type = 'text/javascript';
script.src = theUrlForTheApi;
document.body.appendChild(script);'''
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'JSON'
Feature = 'parse'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'var jobj = JSON.parse(someString);'
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'JSON'
Feature = 'serialize'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'var someStr = JSON.stringify(data, null, 2);'
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'local storage'
Feature = 'concept'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = '''
no expiration. cannot be read by server, unlike cookies.
localStorage is synchronous in nature, meaning when it loads it can block the main document from rendering.
3. localStorage is persistent. Not using a service or never visit a web site again, the data is still loaded when its browser started every time.'''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'local + session storage'
Feature = 'space limit'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = '''
Mobile Browser: (Chrome: 10MB, Android: 2MB, Firefox: 10MB, IOS Safari: 5MB)
Desktop Browser: (Chrome: 10MB, Opera: 10MB, Firefox: 10MB, Safari: 5MB, IE: 10MB)'''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'local + session storage'
Feature = 'check support'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
(typeof(Storage) !== "undefined");
(typeof(localStorage) !== "undefined");
(typeof(sessionStorage) !== "undefined");
(typeof(window.Storage) !== "undefined");
(typeof(window.localStorage) !== "undefined");
(typeof(window.sessionStorage) !== "undefined");'''
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'local storage'
Feature = 'set'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''localStorage.setItem('firstname', 'Keith');'''
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'session storage'
Feature = 'concept'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'sessionStorage // interface like localStorage'
Description = 'sessionStorage gets cleared when the page closed (session ends).'

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'local storage'
Feature = 'check existance'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
(name in localStorage)
(!!localStorage[name]);'''
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'indexed db'
Feature = 'concept'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = '''
JSON based. Can index.
It's like localStorage, so it's cross-session, meaning restarting browser or system won't affect what is stored in it. However, user / browser can clear it like clearing cookie. '''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'indexed db'
Feature = 'storage limits 2017'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = '''
stored on hard disk. firefox: asks user to store more than 50MB.
chrome (even Android 4.4+), opera : limit calculated automatically
IE: 250 MB, with user dialog at 10MB
'''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'indexed db'
Feature = 'setup and open'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
var request = indexedDB.open("MyTestDatabase");
var request = window.indexedDB.open("MyTestDatabase", 3);

var db;
request.onerror = function(event) {
  alert("Database error: " + event.target.errorCode);
};
request.onsuccess = function(event) {
  db = event.target.result;
};'''
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'indexed db'
Feature = 'setup db'
Subfeature = 'update collection/ object store version'
Importance = ''
"Implementation Type" = ''
Syntax = '''
request.onupgradeneeded = function(event) { 
  var db = event.target.result;

  // Create an objectStore for this database
  var objectStore = db.createObjectStore("name", { keyPath: "myKey" });
};'''
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'indexed db'
Feature = 'object store'
Subfeature = 'create index'
Importance = ''
"Implementation Type" = ''
Syntax = '''
  objectStore.createIndex("name", "name", { unique: false });
'''
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'indexed db'
Feature = 'object store or index'
Subfeature = 'iterate'
Importance = ''
"Implementation Type" = ''
Syntax = '''
objectStore.openCursor().onsuccess = function(event) {
  var cursor = event.target.result;
  if (cursor) {
    alert("Name for SSN " + cursor.key + " is " + cursor.value.name);
    cursor.continue();
  }
  else {
    alert("No more entries!");
  }
};'''
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'indexed db'
Feature = 'index'
Subfeature = 'get item'
Importance = ''
"Implementation Type" = ''
Syntax = '''
index.get("Donna").onsuccess = function(event) {
  alert("Donna's SSN is " + event.target.result.ssn);
};'''
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'indexed db'
Feature = 'index'
Subfeature = 'iterate keys'
Importance = ''
"Implementation Type" = ''
Syntax = '''
index.openKeyCursor().onsuccess = function(event) {
  var cursor = event.target.result;
  if (cursor) {
    // cursor.key is a name, like "Bill", and cursor.value is the SSN.
    // No way to directly get the rest of the stored object.
    alert("Name: " + cursor.key + ", SSN: " + cursor.value);
    cursor.continue();
  }
};'''
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'indexed db'
Feature = 'index'
Subfeature = 'iterate range'
Importance = ''
"Implementation Type" = ''
Syntax = '''
var boundKeyRange = IDBKeyRange.bound("Bill", "Donna", false, true);
index.openCursor(boundKeyRange).onsuccess = function(event) {
  var cursor = event.target.result;
  if (cursor) {
    // Do something with the matches.
    cursor.continue();
  }
};'''
Description = '''
// Only match "Donna"
var singleKeyRange = IDBKeyRange.only("Donna");
// Match anything past "Bill", including "Bill"
var lowerBoundKeyRange = IDBKeyRange.lowerBound("Bill");
// Match anything past "Bill", but don't include "Bill"
var lowerBoundOpenKeyRange = IDBKeyRange.lowerBound("Bill", true);
// Match anything up to, but not including, "Donna"
var upperBoundOpenKeyRange = IDBKeyRange.upperBound("Donna", true);
// Match anything between "Bill" and "Donna", but not including "Donna"
var boundKeyRange = IDBKeyRange.bound("Bill", "Donna", false, true);'''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'indexed db'
Feature = 'item'
Subfeature = 'add'
Importance = ''
"Implementation Type" = ''
Syntax = '''
    var customerObjectStore = db.transaction("customers", "readwrite").objectStore("customers");
      customerObjectStore.add(customerData);
transaction.oncomplete = function(event) {
};
transaction.onerror = function(event) {
};'''
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'indexed db'
Feature = 'item'
Subfeature = 'delete'
Importance = ''
"Implementation Type" = ''
Syntax = '''
var request = db.transaction(["customers"], "readwrite")
                .objectStore("customers")
                .delete("444-44-4444");
transaction.oncomplete = function(event) {
};
transaction.onerror = function(event) {
};'''
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'indexed db'
Feature = 'item'
Subfeature = 'get'
Importance = ''
"Implementation Type" = ''
Syntax = '''
var request = objectStore.get("444-44-4444");
request.onerror = function(event) {
};
request.onsuccess = function(event) {
  alert("Name for SSN 444-44-4444 is " + request.result.name);
};
'''
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'indexed db'
Feature = 'item'
Subfeature = 'update'
Importance = ''
"Implementation Type" = ''
Syntax = '''
  var requestUpdate = objectStore.put(data);
   requestUpdate.onerror = function(event) {
     // Do something with the error
   };
   requestUpdate.onsuccess = function(event) {
     // Success - the data is updated!
   };'''
Description = ''

[[data]]
Language = 'Javascript in browser'
"Operand Type" = 'service worker'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = '''
Rich offline experiences, periodic background syncs, push notifications—functionality that would normally require a native application—are coming to the web. Service workers provide the technical foundation that all these features rely on.
a script that your browser runs in the background, separate from a web page, opening the door to features that don't need a web page or user interaction'''

[[data]]
Language = 'js ajax'
"Operand Type" = 'concept'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'See protocol page'

[[data]]
Language = 'js ajax'
"Operand Type" = 'XMLHttpRequest'
Feature = 'concept'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = '''
an API that provides client functionality for transferring data between a client and a server.
Despite its name, XMLHttpRequest can be used to retrieve any type of data, not just XML, and it supports protocols other than HTTP (including file and ftp).'''

[[data]]
Language = 'js ajax'
"Operand Type" = 'XMLHttpRequest'
Feature = 'support'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = '''
Old versions of Internet Explorer (IE5 and IE6) do not support the XMLHttpRequest object.

To handle IE5 and IE6, check if the browser supports the XMLHttpRequest object, or else create an ActiveXObject:'''

[[data]]
Language = 'js ajax'
"Operand Type" = 'XMLHttpRequest'
Feature = 'initialize'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'var xhttp = new XMLHttpRequest();'
Description = ''

[[data]]
Language = 'js ajax'
"Operand Type" = 'XMLHttpRequest'
Feature = 'response listener'
Subfeature = 'ready state change'
Importance = ''
"Implementation Type" = ''
Syntax = '''
xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
       document.getElementById("demo").innerHTML = xhttp.responseText;
    }};'''
Description = ''

[[data]]
Language = 'js ajax'
"Operand Type" = 'XMLHttpRequest'
Feature = 'call'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
xhttp.open("GET", "filename", true);
xhttp.send();'''
Description = ''

[[data]]
Language = 'js ajax'
"Operand Type" = 'XMLHttpRequest'
Feature = 'properties'
Subfeature = 'read only'
Importance = ''
"Implementation Type" = ''
Syntax = '''
responseText
responseXML
status // eg. 200 for 0k, 404 for not found
statusText // text accompanying status'''
Description = ''

[[data]]
Language = 'js ajax'
"Operand Type" = 'FormData'
Feature = 'concept'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the XMLHttpRequest.send() method.'

[[data]]
Language = 'js ajax'
"Operand Type" = 'FormData'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
fd.append(name, value);
delete(), get(), getAll(), has(), set()
'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'concept'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = '''
Easier, cleaner way for JS to interact with html - Better syntax to make JSON calls, access and modify html elements.
(frameworks like angular even cleaner as they separate out presentation elements further - by extending html to support iteration etc..).'''

[[data]]
Language = 'jquery'
"Operand Type" = 'setup'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
 <script src="jquery/jquery.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'Returns a jQuery object - containing wrapped results of a query.'

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = 'selector function'
Subfeature = 'concept'
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'factory function $() is a synonym of jQuery() function'

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = 'selector function'
Subfeature = 'by id'
Importance = ''
"Implementation Type" = ''
Syntax = '''
$('#some-id')
$("#SomeElement").someFunction[.fn2().fn3()...]
$("#SomeElement.subElement")
$(this)'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = 'selector function'
Subfeature = 'by type'
Importance = ''
"Implementation Type" = ''
Syntax = '''
$('p')
$('div, p') '''
Description = 'select element(s)'

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = 'selector function'
Subfeature = 'by type + attribute'
Importance = ''
"Implementation Type" = ''
Syntax = '$("button[attrXYZ=valUVW]")'
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = 'selector function'
Subfeature = 'by css class'
Importance = ''
"Implementation Type" = ''
Syntax = ''' $('.some-class')'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = 'selector function'
Subfeature = 'multiple'
Importance = ''
"Implementation Type" = ''
Syntax = '''
$('p strong, .myclass')
$('*')'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = 'filter'
Subfeature = 'by position'
Importance = ''
"Implementation Type" = ''
Syntax = '''
$('li').first()
$('li').last()
$('li').eq(10)  // Get 11th element
$('ul:first')
'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = 'filter'
Subfeature = 'use selector syntax'
Importance = ''
"Implementation Type" = ''
Syntax = '''
elementList.filter(agrumentStr);
agrument is in the selector syntax:
':first' , ".someClass"
'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = 'filter'
Subfeature = 'by function'
Importance = ''
"Implementation Type" = ''
Syntax = '''
$("li").filter(function (index) {
return index == 1 || $(this).attr("class") == "middle";
}).addClass("selected");
'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = 'iterate'
Subfeature = 'map'
Importance = ''
"Implementation Type" = ''
Syntax = '''
var mappedItems = $("li").map(function (index) {
var replacement = $("<li>").text($(this).text()).get(0);
return replacement;
});
$("#results").append(mappedItems);'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = 'iterate'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
$("#upload-form :input").each(function(index, someNonJQueryElement) { 
... })
$("div[data-test]").each(function() {
  var jqueryElement = $(this);...
});
'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = 'get elements connected by DOM'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
$('li').parent()
$(...).prev().next()
$("#upload-form :input") // get input elements
$(this).children()
$('li').siblings()
'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = 'get elements connected by DOM'
Subfeature = 'find'
Importance = ''
"Implementation Type" = ''
Syntax = '$("p").find("span").addClass("selected");'
Description = 'Can use selector syntax'

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = 'create'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '$("<li>")'
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = 'create'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'var x = 1; $("button" + x).show()'
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = 'create'
Subfeature = 'from context'
Importance = ''
"Implementation Type" = ''
Syntax = '        var $this = $(this);'
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = 'attribute'
Subfeature = 'get, set'
Importance = ''
"Implementation Type" = ''
Syntax = '''
 var title = $("em").attr("title");
$("#myimg").attr("src", "/jquery/images/jquery.jpg");'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = 'attribute'
Subfeature = 'CSS change'
Importance = ''
"Implementation Type" = ''
Syntax = '''
$("#SomeElement").css({color: 'red', 'font-weight':'bold'})
 $("em").addClass("selected");
            $("#myid").addClass("highlight");'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = 'get content'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
.html()
.text()'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = 'update content'
Subfeature = 'from arg'
Importance = ''
"Implementation Type" = ''
Syntax = '''
$(...).html(..) // change inner html
$("#divid").text(title);'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = 'update content'
Subfeature = 'from html file'
Importance = ''
"Implementation Type" = ''
Syntax = '''
$('#stage').load('/jquery/result.html');
$("#div1").load("demo_test.txt #p1"); // By element id'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = 'update content'
Subfeature = 'ajax'
Importance = ''
"Implementation Type" = ''
Syntax = '''
$(selector).load( URL, [data], [callback] );
$("#div1").load("demo_test.txt", function(responseTxt, statusTxt, xhr){
        if(statusTxt == "success")
            alert("External content loaded successfully!");
        if(statusTxt == "error")
            alert("Error: " + xhr.status + ": " + xhr.statusText);
    });'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = 'append children'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
 $("#results").append(mappedItems);
'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = 'show/ hide'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
.hide() hide(300)
.show()'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = 'trigger callback'
Subfeature = 'click'
Importance = ''
"Implementation Type" = ''
Syntax = '''
$( "#buttonId" ).on( "click", function( event ) { ..});
$("#driver").click(function(event){...});'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = 'trigger callback'
Subfeature = 'submit'
Importance = ''
"Implementation Type" = ''
Syntax = '''
$("#myform").submit(function() {
   return false;
});'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = 'other functions'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
slideUp() slideDown()
fadeIn fadeOut fadeToggle()'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'jquery object'
Feature = 'check / test'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''if($(this).is('.specialClass')) {...}'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'plugin'
Feature = 'concept'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'plugin'
Feature = 'define'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
$.fn.greenify = function() {
    this.css( "color", "green" );
};'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'url query'
Feature = 'setup'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
    <script src="https://raw.githubusercontent.com/alrusdi/jquery-plugin-query-object/master/jquery.query-object.js" type="text/javascript"/>
'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'url query'
Feature = 'get value'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
var url = location.search;
> "?action=view&section=info&id=123&debug&testy[]=true&testy[]=false&testy[]"

var section = $.query.get('section');
> "info"
'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'url query'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'url query'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'url query'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'function argument'
Feature = 'context pointer'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
$(document).ready(function() {
   // this refers to window.document
});
$("div").click(function() {
   // this refers to a div DOM element
});
    $("#upload-form :input").each(function() {
        var $this = $(this);
});
'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'input'
Feature = 'get or set val'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
$(someInputElement).val
$("input").val( content );'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'document'
Feature = 'run after document loads'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
$(document).ready(function() { ... });
$(function() {}); // same as above'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'ajax'
Feature = 'concept'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'Easily create a XMLHttpRequest and do an ajax call'

[[data]]
Language = 'jquery'
"Operand Type" = 'ajax'
Feature = ' jQuery XMLHttpRequest (jqXHR)'
Subfeature = 'concept'
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = '''
 superset of the browser's native XMLHttpRequest object
When the transport mechanism is something other than XMLHttpRequest (for example, a script tag for a JSONP request) the jqXHR object simulates native XHR functionality where possible.'''

[[data]]
Language = 'jquery'
"Operand Type" = 'ajax'
Feature = 'format'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'var jqxhr = $.ajax( url [, settings ] )'
Description = '''
$.ajax is shorthand for jquery.ajax
Involves creation of a XMLHttpRequest object'''

[[data]]
Language = 'jquery'
"Operand Type" = 'ajax'
Feature = 'call'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
var jqxhr = $.ajax({
  url: "/api/getWeather",
  data: {zipcode: 97201  }, # sent to server. optional
  method: "POST", "GET", "PUT" (default GET)]
});'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'ajax'
Feature = 'call'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'var jqxhr = $.ajax( "example.php" )'
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'ajax'
Feature = 'xhr prototype'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
xhr: function() {
            var xhrobj = $.ajaxSettings.xhr();
return some xhr obj
}'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'ajax'
Feature = 'xhr prototype'
Subfeature = 'just set some fields'
Importance = ''
"Implementation Type" = ''
Syntax = '''
$.ajax({
   url: a_cross_domain_url,
   xhrFields: {
      withCredentials: true
   }
});'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'ajax'
Feature = 'xhr prototype'
Subfeature = 'set cross-domain'
Importance = ''
"Implementation Type" = ''
Syntax = '''
$.ajax({
   url: a_cross_domain_url,
   crossDomain: true,
   xhrFields: {
      withCredentials: true
   }
});'''
Description = 'Sends session cookies even if ajax call goes to a different server wrt the server which served this script.'

[[data]]
Language = 'jquery'
"Operand Type" = 'ajax'
Feature = 'response data conversion'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
$.ajax({
    url: "http://myurl/myservice",
    dataType: "jsonp myConversion",
    converters: {
        "text myConversion": function(value) {
            console.log("pre-processing...");
            /* do stuff */
            return value;
        }
    }
});'''
Description = 'default datatype: Intelligent Guess (xml, json, script, or html)'

[[data]]
Language = 'jquery'
"Operand Type" = 'ajax'
Feature = 'status listener'
Subfeature = 'add in returned jqxhr obj'
Importance = ''
"Implementation Type" = ''
Syntax = '''
var jqxhr = $.getJSON( "example.json", function() {
  console.log( "success" );
})
  .done(function() {
    console.log( "second success" );
  })
  .fail(function() {
    console.log( "error" );
  })
  .always(function() {
    console.log( "complete" );
  });'''
Description = 'jqXHR.done(function( data, textStatus, jqXHR ) {}) etc.. same as status listeners when '

[[data]]
Language = 'jquery'
"Operand Type" = 'ajax'
Feature = 'status listener'
Subfeature = 'specify in call settings'
Importance = ''
"Implementation Type" = ''
Syntax = '''
  success: Function( Anything data, String textStatus, jqXHR jqXHR ) { ..  } 
  error: Function( jqXHR jqXHR, String textStatus, String errorThrown )
'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'ajax'
Feature = 'status listener'
Subfeature = 'specify in call settings'
Importance = ''
"Implementation Type" = ''
Syntax = '''
$.ajax({
  statusCode: {
    404: function() {
      alert( "page not found" );
    }
  }
});'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'ajax'
Feature = 'set default call args'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
$.ajaxSetup({
  url: "ping.php"
});'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'ajax'
Feature = 'request data'
Subfeature = 'set json type'
Importance = ''
"Implementation Type" = ''
Syntax = '''
$.ajax({
    type: 'POST',
    data: JSON.stringify(arr),
    contentType: 'application/json; charset=utf-8',
});'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'ajax get'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
$.get("demo_test.asp", function(data, status){
        alert("Data: " + data + "\nStatus: " + status);
    });'''
Description = ''

[[data]]
Language = 'jquery'
"Operand Type" = 'ajax get json'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
$.getJSON( "ajax/test.json", function( data ) {
  var items = [];
  $.each( data, function( key, val ) {
    items.push( "<li id='" + key + "'>" + val + "</li>" );
  });
 }
jQuery.getJSON( url [, data ] [, success ] )'''
Description = '''
Returns key-value pairs. Does not do JSON.parse.
Shorthand for:
$.ajax({
  dataType: "json",
  url: url,
  data: data,
  success: success
});
Note: getJSON({url: xyz}) fails.'''

[[data]]
Language = 'jquery'
"Operand Type" = 'ajas post'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
        $.post('/textract/v1/pages/' + pageId + '/image_annotations', {
                data: JSON.stringify(updatedAnnotationNodes, null, 2)
                contentType: 'application/json; charset=utf-8',
            },
            function (nodes) { ...
        }, "json");
'''
Description = 'just a shortcut'

[[data]]
Language = 'JS react'
"Operand Type" = ''
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = '''
a declarative, efficient, and flexible JavaScript library for building user interfaces.
let you describe UI component tree as a function of state. single page js apps use and save much state.
The same class controls state and renders it - yet state - view separation is clear (just not in different files/ technologies - so UI and state may need to work on same file/ code).'''

[[data]]
Language = 'JS react'
"Operand Type" = 'develop'
Feature = 'debug UI'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'extension for chrome and firefox'

[[data]]
Language = 'JS react'
"Operand Type" = 'component'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = 'A component takes in parameters, called props, and returns a hierarchy of views to display (as a react element) via the render method.'

[[data]]
Language = 'JS react'
"Operand Type" = 'class component'
Feature = 'construct'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
class ShoppingList extends React.Component {
  constructor() {
    super();
    this.state = {
      value: null,
    };
  }
}'''
Description = ''

[[data]]
Language = 'JS react'
"Operand Type" = 'class component'
Feature = 'state'
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = '''setState({value: 'X'})'''
Description = '''
State is stored in this.state dict.
Whenever this.setState is called, an update to the component is scheduled, causing React to merge in the passed state update and rerender the component along with its descendants.'''

[[data]]
Language = 'JS react'
"Operand Type" = 'class component'
Feature = 'state'
Subfeature = ''
Importance = ''
"Implementation Type" = 'design'
Syntax = ''
Description = '''

When you want to aggregate data from multiple children or to have two child components communicate with each other, move the state upwards so that it lives in the parent component. The parent can then pass the state back down to the children via props, so that the child components are always in sync with each other and with the parent.'''

[[data]]
Language = 'JS react'
"Operand Type" = 'class component'
Feature = 'state'
Subfeature = ''
Importance = ''
"Implementation Type" = 'caveat'
Syntax = '''
const squares = this.state.squares.slice();
    squares[i] = 'X';
    this.setState({squares: squares});'''
Description = '''For performance, do a shallow copy of any list you're updating.'''

[[data]]
Language = 'JS react'
"Operand Type" = 'class component'
Feature = 'render'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
render() {
    return someReactElement;
  }'''
Description = ''

[[data]]
Language = 'JS react'
"Operand Type" = 'functional component'
Feature = 'construct'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
function Square(props) {
  return (   <button className="square" onClick={props.onClick}>
      {props.value}   </button>  );
}'''
Description = ''

[[data]]
Language = 'JS react'
"Operand Type" = 'react element'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = '''
a lightweight description of something (say a react component) to render.
A Javascript object.'''

[[data]]
Language = 'JS react'
"Operand Type" = 'react element'
Feature = 'instantiate with jsx'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
(
      <div className="shopping-list">
        <h1>Shopping List for {this.props.name}</h1>
      </div>
    )'''
Description = 'Shows property access too.'

[[data]]
Language = 'JS react'
"Operand Type" = 'react element'
Feature = 'instantiate with jsx'
Subfeature = 'JS expression'
Importance = ''
"Implementation Type" = ''
Syntax = '{expression}'
Description = ''

[[data]]
Language = 'JS react'
"Operand Type" = 'react element'
Feature = 'instantiate with jsx'
Subfeature = 'from react component'
Importance = ''
"Implementation Type" = ''
Syntax = '''
<Square value={i} />
 <ShoppingList name="Mark" />'''
Description = 'Square in example is a react component'

[[data]]
Language = 'JS react'
"Operand Type" = 'react element'
Feature = 'instantiate'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
React.createElement('div', {className: 'shopping-list'},
  React.createElement('h1', /* ... h1 children ... */),
  React.createElement('ul', /* ... ul children ... */)
);'''
Description = ''

[[data]]
Language = 'JS react'
"Operand Type" = 'react element'
Feature = 'instantiate'
Subfeature = 'access properties'
Importance = ''
"Implementation Type" = ''
Syntax = '{this.props.something}'
Description = '''
this points to the react component which is instantiating the react element.
props stores properties passed when rendering : eg. with 
 <Square value={i} />
'''

[[data]]
Language = 'JS react'
"Operand Type" = 'react element'
Feature = 'instantiate'
Subfeature = 'access state'
Importance = ''
"Implementation Type" = ''
Syntax = '        {this.state.something}'
Description = 'this points to the react component which is instantiating the react element.'

[[data]]
Language = 'JS react'
"Operand Type" = 'react button'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = 'a react element'

[[data]]
Language = 'JS react'
"Operand Type" = 'react button'
Feature = 'instantiate'
Subfeature = 'on click'
Importance = ''
"Implementation Type" = ''
Syntax = '''
<button className="square" onClick={() => this.someFun(3)}>
        {this.state.value}
      </button>'''
Description = 'this points to the react component which is instantiating the react element.'

[[data]]
Language = 'JS react'
"Operand Type" = 'react list'
Feature = 'instantiate'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<ol><li key={user.id}>{user.name}: {user.taskCount} tasks left</li>
</ol>'''
Description = '''
key property is important - lets react keep track of added or modified items - thereby enabling efficient rendering updates
By default uses array index.'''

[[data]]
Language = 'JS redux'
"Operand Type" = ''
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = '''
Redux emits state updates in response to actions.
Can be used with react (describes ui as function of state), angular js etc..'''

[[data]]
Language = 'angular js'
"Operand Type" = 'concept'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = '''
A JS framework to extend HTML attributes with (ng-)Directives, and binds data to HTML with Expressions : creating a more powerful view presentation language.

An app data-model "bound" with html elements.'''

[[data]]
Language = 'angular js'
"Operand Type" = 'html directives'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'caveat'
Syntax = ''
Description = '''
You can use data-ng-, instead of ng-, if you want to make your page HTML valid.

'''

[[data]]
Language = 'angular js'
"Operand Type" = 'setup app / angular element'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
 <script src="http://code.angularjs.org/1.0.4angular.min.js"></script>
<html ng-app> .. or
<div ng-app = ""> .. </div>'''
Description = ''

[[data]]
Language = 'angular js'
"Operand Type" = 'app data'
Feature = 'initialize'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<div ng-init="somelist = ['Chrome', 'Safari', 'IE'] ">
<div ng-app="" ng-init="firstName='John'">
'''
Description = 'value syntax is javascript like  - maps, lists etc.. '

[[data]]
Language = 'angular js'
"Operand Type" = 'app data'
Feature = 'bind to html controls'
Subfeature = 'map field'
Importance = ''
"Implementation Type" = 'caveat'
Syntax = '''
ng-model="fieldName"
ng-model="fieldName1.fieldName2"...'''
Description = 'If the property in the ng-model attribute does not exist, AngularJS will create one for you.'

[[data]]
Language = 'angular js'
"Operand Type" = 'app data'
Feature = 'bind to html controls'
Subfeature = 'input'
Importance = ''
"Implementation Type" = ''
Syntax = '''
  <p>Name: <input type="text" ng-model="name"></p>
    <input type="email" name="myAddress" ng-model="myText" required>
'''
Description = '''
If name is preset in javascript, it is shown as default value. User modifications are recorded into model.
name can be a list.'''

[[data]]
Language = 'angular js'
"Operand Type" = 'app data'
Feature = 'bind to html controls'
Subfeature = 'editable content'
Importance = ''
"Implementation Type" = ''
Syntax = '<div contentEditable="true" ng-model="content">Edit Me</div>'
Description = ''

[[data]]
Language = 'angular js'
"Operand Type" = 'app data'
Feature = 'bind to view'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '<p ng-bind="name"></p>'
Description = ''

[[data]]
Language = 'angular js'
"Operand Type" = 'app data'
Feature = 'bind to view'
Subfeature = 'expression'
Importance = ''
"Implementation Type" = ''
Syntax = '''
{{someAppDataField}}
{{topElementName.nextElementName.$valid}} '''
Description = '''
same as using ng-bind.
like JS expressions, except:
AngularJS expressions do not support conditionals, loops, and exceptions, while JavaScript expressions do.'''

[[data]]
Language = 'angular js'
"Operand Type" = 'app data'
Feature = 'bind to view'
Subfeature = 'loop'
Importance = ''
"Implementation Type" = ''
Syntax = '<li ng-repeat="name in names">{{name}}</li>'
Description = ''

[[data]]
Language = 'angular js'
"Operand Type" = 'app data'
Feature = 'bind to view'
Subfeature = 'filter'
Importance = ''
"Implementation Type" = ''
Syntax = '''
 {{ 1234567890 | number }} 
{{ list | filter:predicate | json }}'''
Description = ''

[[data]]
Language = 'angular js'
"Operand Type" = 'app data'
Feature = 'affect css'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = '''
ng-model directive adds/removes the following classes, according to the status of the form field:
ng-empty
ng-not-empty
ng-touched
ng-untouched
ng-valid
ng-invalid
ng-dirty
ng-pending
ng-pristine'''

[[data]]
Language = 'angular js'
"Operand Type" = 'app data'
Feature = 'validate'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
    <span ng-show="myForm.myAddress.$error.email">Not a valid e-mail address</span>
'''
Description = ''

[[data]]
Language = 'angular js'
"Operand Type" = 'app data'
Feature = 'get state'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<form ng-app="" name="myForm" ng-init="myText = 'post@myweb.com'">
    Email:
    <input type="email" name="myAddress" ng-model="myText" required>
{{myForm.myAddress.$valid}}    {{myForm.myAddress.$dirty}}
    {{myForm.myAddress.$touched}} </form>'''
Description = ''

[[data]]
Language = 'angular js'
"Operand Type" = 'custon directive'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<div w3-test-directive></div>
<w3-test-directive></w3-test-directive>
<div class="w3-test-directive"></div>
<!-- directive: w3-test-directive -->
'''
Description = 'w3-test-directive directive defined in js.'

[[data]]
Language = 'angular js'
"Operand Type" = 'app controller'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = 'JS object sets and acts on app data - defines functions over it.'

[[data]]
Language = 'angular js'
"Operand Type" = 'app controller'
Feature = 'setup'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
 <div ng-controller="InvoiceCntl">
.. <td><input type="integer" min="0" ng-model="qty" required ></td>..
</div>'''
Description = 'handled by js function InvoiceCntl()'

[[data]]
Language = 'angular js'
"Operand Type" = 'app controller'
Feature = 'button'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '<button ng-click="action()"> xyz </button>'
Description = ''

[[data]]
Language = 'angular js'
"Operand Type" = 'js'
Feature = 'app'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'var app = angular.module("myApp", []);'
Description = ''

[[data]]
Language = 'angular js'
"Operand Type" = 'js'
Feature = 'app controller'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
app.controller('personCtrl', function($scope) {
    $scope.firstName = "John";
    $scope.lastName = "Doe";
    $scope.fullName = function() {
        return $scope.firstName + " " + $scope.lastName;
    };
});'''
Description = ''

[[data]]
Language = 'angular js'
"Operand Type" = 'js'
Feature = 'app'
Subfeature = 'add directive'
Importance = ''
"Implementation Type" = ''
Syntax = '''
app.directive("newTagType", function() {
    return {
        restrict : "A", // only attribute style invocation
        template : "<h1>Made by a directive!</h1>"
    };
});'''
Description = '''
restrict values:
E for Element name
A for Attribute
C for Class
M for Comment'''

[[data]]
Language = 'angular js'
"Operand Type" = 'js'
Feature = 'element'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''var el = angular.element(document.getElementById('content'))'''
Description = ''

[[data]]
Language = 'angular js'
"Operand Type" = 'js'
Feature = 'scope'
Subfeature = 'concept'
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'binding part between the HTML (view) and the JavaScript (controller)'

[[data]]
Language = 'angular js'
"Operand Type" = 'js'
Feature = 'scope'
Subfeature = 'data model'
Importance = ''
"Implementation Type" = ''
Syntax = '''
scope = angElement.scope();
scope.$apply(function(scope) {
      scope.video_data = video_data;
    });'''
Description = ''

[[data]]
Language = 'google appengine Java'
"Operand Type" = 'url dispatcher'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<web-app version="2.5">
<servlet><servlet-name>trans</servlet-name>
<servlet-class>sanskritnlp.servlet.Transliterate</servlet-class>
</servlet>'''
Description = 'In file WEB-INF/web.xml'

[[data]]
Language = 'google appengine Java'
"Operand Type" = 'settings'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '<appengine-web-app><application>sanskritnlp</application><version>1</version><threadsafe>true</threadsafe></appengine-web-app>'
Description = 'In file WEB-INF/appengine-web.xml'

[[data]]
Language = 'google appengine Java'
"Operand Type" = 'libraries'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
Jar files in WEB-INF/lib .
Class files in WEB-INF/classes'''
Description = ''

[[data]]
Language = 'google appengine Java'
"Operand Type" = 'run'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
appengine-java/bin/appcfg.sh update DIR
Or Just use maven.'''
Description = 'DIR contains WEB-INF'

[[data]]
Language = 'google appengine Java'
"Operand Type" = 'maven'
Feature = 'run deployment server'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'mvn appengine:devserver'
Description = ''

[[data]]
Language = 'google appengine Java'
"Operand Type" = 'maven'
Feature = 'build'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'mvn clean install'
Description = ''

[[data]]
Language = 'google appengine Java'
"Operand Type" = 'maven'
Feature = 'deploy'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'appengine:update'
Description = ''

[[data]]
Language = 'google appengine Python'
"Operand Type" = 'run'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
appcfg.py update DIR
'''
Description = ''

[[data]]
Language = 'google appengine Python'
"Operand Type" = 'settings'
Feature = 'general'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
application: NAME
version: 1
runtime: python
api_version: 1
threadsafe: true'''
Description = 'in app.yaml'

[[data]]
Language = 'google appengine Python'
"Operand Type" = 'settings'
Feature = 'main'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'main.py copied.'
Description = ''

[[data]]
Language = 'google appengine Python'
"Operand Type" = 'url dispatcher'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
handlers:
- url: .*/
  static_files: vishvas/index.html
  upload: vishvas

- url: /
  static_dir: vishvas

'''
Description = 'in app.yaml'

[[data]]
Language = 'google oauth'
"Operand Type" = 'Client ID for Web application'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'https://console.developers.google.com/apis/credentials?project=sanskritnlp'
Description = 'Also lists allowed redirects.'

[[data]]
Language = 'google photos'
"Operand Type" = 'compress and recover space'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'https://photos.google.com/settings'
Description = ''

[[data]]
Language = 'web tools '
"Operand Type" = '''
sample size calculator
(statistical significance)'''
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'http://www.evanmiller.org/ab-testing/sample-size.html'
Description = ''

[[data]]
Language = 'web tools '
"Operand Type" = 'fill pdf-s'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'https://www.pdfescape.com/'
Description = ''

[[data]]
Language = 'mediawiki'
"Operand Type" = 'beaureaucrats'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'https://www.mediawiki.org/wiki/Special:ListUsers/sysop'
Description = ''

[[data]]
Language = 'mediawiki'
"Operand Type" = 'sysops'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'https://www.mediawiki.org/wiki/Special:ListUsers/sysop'
Description = 'Dropdown lists other special users'

[[data]]
Language = 'mediawiki'
"Operand Type" = 'user contributions'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'https://sa.wiktionary.org/w/index.php?title=special:contributions/NehalDaveND&offset=&limit=500&target=NehalDaveND'
Description = ''

[[data]]
Language = 'mediawiki'
"Operand Type" = 'notify about message'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '{{tb|Username}}'
Description = '''leave this in a user's talk page to notify him about a message to him at another user's talk page.'''

[[data]]
Language = 'mediawiki'
"Operand Type" = 'redirect'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '#REDIRECT [[pagename]]'
Description = ''

[[data]]
Language = 'mediawiki'
"Operand Type" = 'category'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '[[वर्गः:इकारान्त पुल्लिङ्गम्]]'
Description = ''

[[data]]
Language = 'mediawiki'
"Operand Type" = 'transclude'
Feature = 'template'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
{{template name|parameter|| myparam = this is a test |...}}
{{:महाभारतम्-03-आरण्यकपर्व-159}} - regular article'''
Description = ''

[[data]]
Language = 'mediawiki'
"Operand Type" = 'template'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
xyz {{{1}}}, {{{2}}} asdf {{{xxx}}}
<noinclude>
{{documentation}}
</noinclude>
'''
Description = ''

[[data]]
Language = 'mediawiki'
"Operand Type" = 'interwiki-language links'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '[[language prefix:pagename]]'
Description = ''

[[data]]
Language = 'archive'
"Operand Type" = 'itemmanager'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'https://archive.org/item-mgr.php?identifier=paNDit-papers'
Description = ''

[[data]]
Language = 'statistics calculator'
"Operand Type" = 'A/ B test - confidence interval, precision'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'http://www.evanmiller.org/ab-testing/sample-size.html#!62%3B80%3B5%3B2.2%3B1'
Description = ''

[[data]]
Language = 'js closure'
"Operand Type" = 'concept'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'broad, well-tested, modular, and cross-browser JavaScript library. You can pull just what you need from a large set of reusable UI widgets and controls, and from lower-level utilities for DOM manipulation, server communication, animation, data structures, unit testing, rich-text editing, and more.'

[[data]]
Language = 'js closure'
"Operand Type" = 'shell html'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<html>
  <head>
    <script src="closure-library/closure/goog/base.js"></script>
    <script src="hello.js"></script>
  </head>
  <body onload="sayHi()">
  </body>
</html>'''
Description = ''

[[data]]
Language = 'js closure'
"Operand Type" = 'page js'
Feature = 'structure'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
goog.require('goog.dom');

function sayHi() {
  var newHeader = goog.dom.createDom('h1', {'style': 'background-color:#EEE'},
    'Hello world!');
  goog.dom.appendChild(document.body, newHeader);
}'''
Description = ''

[[data]]
Language = 'js closure'
"Operand Type" = 'page js'
Feature = 'add listener'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'goog.events.listen(this.input, goog.events.EventType.KEYPRESS, function(e) { ...});'
Description = ''

[[data]]
Language = 'js closure'
"Operand Type" = 'page js'
Feature = 'get element'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''var parent = goog.dom.getElement('taxonomy-selection-group');'''
Description = ''

[[data]]
Language = 'Google apps script'
"Operand Type" = ''
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = 'script.google.com'
Description = 'JavaScript cloud scripting language that provides easy ways to automate tasks across Google products and third party services and build web applications.'

[[data]]
Language = 'Google apps script'
"Operand Type" = 'document'
Feature = 'create'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
var doc = DocumentApp.create('Hello, world!');
'''
Description = ''

[[data]]
Language = 'Google apps script'
"Operand Type" = 'email'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
  var email = Session.getActiveUser().getEmail();
var subject = doc.getName();
  var body = 'Link to your doc: ' + url;
  GmailApp.sendEmail(email, subject, body);'''
Description = ''

[[data]]
Language = 'chrome extension'
"Operand Type" = 'run'
Feature = 'load unpacked'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'chrome://extensions in developer mode '
Description = ''

[[data]]
Language = 'chrome extension'
"Operand Type" = 'run'
Feature = 'update'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'chrome://extensions at the top'
Description = ''

[[data]]
Language = 'chrome extension'
"Operand Type" = 'run'
Feature = 'console debug'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'open background.html from chrome://extensions'
Description = ''

[[data]]
Language = 'chrome extension'
"Operand Type" = 'manifest.json'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
  {
    "name": "Getting Started Example",
    "version": "1.0",
    "description": "Build an Extension!",
    "background": {
      "scripts": ["background.js"],
      "persistent": false
    },
    "manifest_version": 2
  }'''
Description = ''

[[data]]
Language = 'chrome extension'
"Operand Type" = 'manifest.json'
Feature = 'permissions'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
"permissions": [
"contextMenus", "identity", "storage", "tabs", "notifications", "http://*/*", "https://*/*"
],
'''
Description = ''

[[data]]
Language = 'chrome extension'
"Operand Type" = 'manifest.json'
Feature = 'extension settings'
Subfeature = 'icons'
Importance = ''
"Implementation Type" = ''
Syntax = '''
    "icons" : {
        "48" : "icon48.png",
        "128" : "icon128.png"
    },
'''
Description = ''

[[data]]
Language = 'chrome extension'
"Operand Type" = 'manifest.json'
Feature = 'shortcut'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
    "commands": {
      "_execute_browser_action": {
        "suggested_key": {
          "default": "Ctrl+Shift+F",
          "mac": "MacCtrl+Shift+F"
        },
        "description": "Opens hello.html"
      }
    }'''
Description = ''

[[data]]
Language = 'chrome extension'
"Operand Type" = 'js'
Feature = 'storage API'
Subfeature = 'set'
Importance = ''
"Implementation Type" = ''
Syntax = '''
chrome.storage.sync.set({color: '#3aa757'}, function() {
      console.log("The color is green.");
    });'''
Description = ''

[[data]]
Language = 'chrome extension'
"Operand Type" = 'js'
Feature = 'storage API'
Subfeature = 'get'
Importance = ''
"Implementation Type" = ''
Syntax = '''
 chrome.storage.sync.get('color', function(data) {
    changeColor.style.backgroundColor = data.color;
    changeColor.setAttribute('value', data.color);
  });'''
Description = ''

[[data]]
Language = 'chrome extension'
"Operand Type" = 'js'
Feature = 'tab'
Subfeature = 'query'
Importance = ''
"Implementation Type" = ''
Syntax = '''
chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {
      chrome.tabs.executeScript(
          tabs[0].id,
          {code: 'document.body.style.backgroundColor = "' + color + '";'});
    });'''
Description = ''

[[data]]
Language = 'chrome extension'
"Operand Type" = 'js'
Feature = 'tab'
Subfeature = 'modify html'
Importance = ''
"Implementation Type" = ''
Syntax = '''
      chrome.tabs.executeScript(
          tabs[0].id,
          {code: 'document.body.style.backgroundColor = "' + color + '";'});
    }'''
Description = ''

[[data]]
Language = 'chrome extension'
"Operand Type" = 'js'
Feature = 'tab'
Subfeature = 'message'
Importance = ''
"Implementation Type" = ''
Syntax = '''
 chrome.tabs.sendMessage(tabs[0].id, {"action": "startLightbox"});
chrome.runtime.onMessage.addListener(
  function(request, sender, sendResponse) { ..});'''
Description = ''

[[data]]
Language = 'chrome extension'
"Operand Type" = 'generic html'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
  <html> <head> <style>
button { height: 30px;
          width: 30px;
          outline: none;}
      </style> </head> <body>
      <button id="changeColor"></button>
    <script src="popup.js"></script>
    </body>
  </html>'''
Description = 'used for defining toolbar button popup, settings page'

[[data]]
Language = 'chrome extension'
"Operand Type" = 'background script'
Feature = 'events'
Subfeature = 'onInstalled'
Importance = ''
"Implementation Type" = ''
Syntax = '''
  chrome.runtime.onInstalled.addListener(function() {...}
'''
Description = ''

[[data]]
Language = 'chrome extension'
"Operand Type" = 'toolbar button'
Feature = 'visible always'
Subfeature = ''
Importance = ''
"Implementation Type" = 'manifest declaration'
Syntax = '''

    "browser_action": {
        "default_icon": "icon16.png",
        "default_popup": "options.html"
    },
'''
Description = ''

[[data]]
Language = 'chrome extension'
"Operand Type" = 'toolbar button'
Feature = 'conditional visibility'
Subfeature = ''
Importance = ''
"Implementation Type" = 'manifest declaration'
Syntax = '''
"page_action": {
      "default_popup": "popup.html"
    }'''
Description = ''

[[data]]
Language = 'chrome extension'
"Operand Type" = 'toolbar button'
Feature = 'settings'
Subfeature = 'icon, title, popup'
Importance = ''
"Implementation Type" = 'manifest declaration'
Syntax = '''
"default_icon": {                    // optional
            "16": "images/icon16.png",           // optional
            "24": "images/icon24.png",           // optional
            "32": "images/icon32.png"            // optional
          },
          "default_title": "Google Mail",      // optional;tooltip
          "default_popup": "popup.html"        // optional'''
Description = ''

[[data]]
Language = 'chrome extension'
"Operand Type" = 'toolbar button'
Feature = 'set badge text'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'chrome.browserAction.setBadgeText( {text: "loading", tabId: 2 }, function OPTcallback)'
Description = ''

[[data]]
Language = 'chrome extension'
"Operand Type" = 'settings page'
Feature = 'use'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'chrome extension settings page'
Description = ''

[[data]]
Language = 'chrome extension'
"Operand Type" = 'settings page'
Feature = 'settings'
Subfeature = ''
Importance = ''
"Implementation Type" = 'manifest'
Syntax = ' "options_page": "options.html",'
Description = ''

[[data]]
Language = 'chrome extension'
"Operand Type" = 'settings page'
Feature = 'html'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
 <!DOCTYPE html>
  <html>
    <body>
      <div id="buttonDiv">      </div>
    </body>
    <script src="options.js"></script>
  </html>'''
Description = ''

[[data]]
Language = 'chrome extension'
"Operand Type" = 'settings page'
Feature = 'js'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
button.addEventListener('click', function() {...
        })
      });'''
Description = ''

[[data]]
Language = 'chrome extension'
"Operand Type" = 'context menu js'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'location'
Syntax = 'background js'
Description = ''

[[data]]
Language = 'chrome extension'
"Operand Type" = 'context menu js'
Feature = 'contexts'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '["page","selection","link","editable", "image","video","audio"];'
Description = ''

[[data]]
Language = 'chrome extension'
"Operand Type" = 'context menu js'
Feature = 'create'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'var id = chrome.contextMenus.create({"title": title, "contexts":[context], "onclick": genericOnClick});'
Description = ''

[[data]]
Language = 'chrome extension'
"Operand Type" = 'context menu js'
Feature = 'create'
Subfeature = 'child'
Importance = ''
"Implementation Type" = ''
Syntax = '''
var parent = chrome.contextMenus.create({"title": "Test parent item"});
var child1 = chrome.contextMenus.create(
  {"title": "Child 1", "parentId": parent, "onclick": genericOnClick});'''
Description = ''

[[data]]
Language = 'haproxy'
"Operand Type" = 'concept'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'fast load balancer, proxy.'

[[data]]
Language = 'haproxy'
"Operand Type" = 'config'
Feature = 'frontend'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
frontend http-in
         bind *:7465 ssl crt /etc/haproxy/MY_DOMAIN.pem
         default_backend couchdbs
         reqadd X-Forwarded-Proto:\ https
         acl secure dst_port eq 7465
         rsprep ^Set-Cookie:\ (.*) Set-Cookie:\ \1;\ Secure if secure
         rspadd Strict-Transport-Security:\ max-age=31536000 if secure
         redirect scheme https code 301 if !{ ssl_fc }

'''
Description = 'cert is formed by combining fullchain.pem and private.pem'

[[data]]
Language = 'haproxy'
"Operand Type" = 'config'
Feature = 'backend'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''

backend couchdbs
        option httpchk GET /_up
        http-check disable-on-404
        server couchdb1 127.0.0.1:5984 check inter 5s'''
Description = ''

[[data]]
Language = 'play scala'
"Operand Type" = ''
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = '''
Heavy in features, complexity, compilation: compared to some others which don't bother with templating and such. Even a basic app requires lot of gruck.
Has been quite fluid in shifting from version to version - requiring maintenance cost.
Reactive (event handling based) web server where threads are mostly kept free of blockages (hence fast).
Easy to write reactive non-blocking code - but must follow certain pattern.'''

[[data]]
Language = 'play scala'
"Operand Type" = 'routes'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
GET    /                     v1.post.PostController.list
GET    /:id                 v1.post.PostController.show(id)
POST    /:id                v1.post.PostController.update(id)
->     /v1/posts                    posts.routes'''
Description = ''

[[data]]
Language = 'play scala'
"Operand Type" = 'resources'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'Just put in the config folder.'

[[data]]
Language = 'play scala'
"Operand Type" = 'parallelism'
Feature = 'ExecutionContext'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'implicit val context = play.api.libs.concurrent.Execution.Implicits.defaultContext'
Description = ''

[[data]]
Language = 'play scala'
"Operand Type" = 'Result'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = 'A way to represent HTTP response'

[[data]]
Language = 'play scala'
"Operand Type" = 'Result'
Feature = 'instantiate'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
Results.OK(someStr)
Results.NotFound("")
'''
Description = ''

[[data]]
Language = 'play scala'
"Operand Type" = 'Action'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = 'a (play.api.mvc.Request => play.api.mvc.Result) or Request => Future[Result] function, which, within a Controller object, are used for handling HTTP requests'

[[data]]
Language = 'play scala'
"Operand Type" = 'Action'
Feature = 'create'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
def echo = Action { request =>
  Ok("Got request [" + request + "]")
}
def echo = Action.async { request =>
  Future.successful(Ok("Got request [" + request + "]"))
}'''
Description = 'Both Action.apply and Action.async create Action objects that are handled internally in the same way - asynchronously.  The .async builder is just a facility to simplify creating actions based on APIs that return a Future, in which case one might want the Action to return another Future object.'

[[data]]
Language = 'play scala'
"Operand Type" = 'Action'
Feature = 'redirect'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
def index = Action {
  Redirect("/user/home")
}
def index = Action {
  Redirect("/user/home", MOVED_PERMANENTLY)
}'''
Description = ''

[[data]]
Language = 'play scala'
"Operand Type" = 'Action'
Feature = 'Dummy page'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'def index(name:String) = TODO'
Description = ''

[[data]]
Language = 'play scala'
"Operand Type" = 'Action'
Feature = 'swagger doc'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
  @ApiResponses(Array(
    new ApiResponse(code = 400, message = "Invalid root supplied"),
    new ApiResponse(code = 404, message = "Root not found")))
  def show(@ApiParam(allowableValues = "sAXAraNa,sarvanAma,safkhyA,safkhyeya,pUraNa", value="Click on 'Try it out'!") prakaara: String,
           @ApiParam(allowableValues = "pum,napum,swrI", value="Click on 'Try it out'!") linga: String,
           @ApiParam(value = "root in WX", example= "rAma") root: String,
           @ApiParam(value = "Click on 'Try it out'! (8 is sambodhana-prathamA)", allowableValues= "1,2,3,4,5,6,7,8") vibhaktiIn: String,
           @ApiParam(value = "Click on 'Try it out'!", allowableValues= "1,2,3") vachana: String
          ): Action[AnyContent] = Action(implicit request => {... }
'''
Description = ''

[[data]]
Language = 'play scala'
"Operand Type" = 'controller'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = '''
an object with methods that "generates" Action functions. These can be used to specify route-handling.
Caveat: the application code should avoid blocking in controllers. Client will wait, but server thread will not be blocked and can handle other clients fast.'''

[[data]]
Language = 'play scala'
"Operand Type" = 'controller'
Feature = 'setup'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
class SubantaavaliiController extends Controller {
...}'''
Description = ''

[[data]]
Language = 'play scala'
"Operand Type" = 'controller'
Feature = 'setup'
Subfeature = 'inject wsclient'
Importance = ''
"Implementation Type" = ''
Syntax = '''
@Api(value = "Archive item to podcast . Click on the API to try it out!")
class Application @Inject() (ws: WSClient) extends Controller {
}'''
Description = 'call other HTTP services from within a Play application via its WS library'

[[data]]
Language = 'akka http scala'
"Operand Type" = ''
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = '''
HTTP front for the akka actor system - no built-in templating language.
offers several different API levels for “doing the same thing”.'''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'route'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = '''
type Route = 
RequestContext => Future[RouteResult]
'''
Description = 'A way of specifying how a request should be handled.'

[[data]]
Language = 'akka http scala'
"Operand Type" = 'route'
Feature = 'instantiate'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
val route: Route = { ctx => ctx.complete("yeah") } // use an anonymous fn
val route: Route = _.complete("yeah") 
val route = complete("yeah") // use directive
val route = someDirectiveTree'''
Description = ''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'route'
Feature = 'handle request'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
requestContext.complete(...) - complete the request now
Do asynchronous processing and instantly return a Future[RouteResult] to be eventually completed later
requestContext.reject(...) = wont handle request
requestContext.fail(...) or by just throwing an exception'''
Description = ''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'Directive'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = 'building block used for creating arbitrarily complex route structures. '

[[data]]
Language = 'akka http scala'
"Operand Type" = 'Directive'
Feature = 'composition'
Subfeature = 'concatenation'
Importance = ''
"Implementation Type" = ''
Syntax = '''
concat(a, b, c) - same as a ~ b ~ c
'''
Description = '''
 forgetting the ~ (tilde) character in between directives can result in perfectly valid Scala code that compiles but does not work as expected. 
Prefer concat.'''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'Directive'
Feature = 'composition'
Subfeature = 'nesting'
Importance = ''
"Implementation Type" = ''
Syntax = '''
name(arguments) { extractions =>
  ... // inner route
}
val getOrPut = get | put
val route = (path("order" / IntNumber) & getOrPut & extractMethod) {...}'''
Description = ''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'Directive'
Feature = 'test'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
Get("/?color=blue&backgroundColor=red") ~> route ~> check {
  responseAs[String] shouldEqual "The color is 'blue' and the background is 'red'"
}
Get("/?color=blue") ~> Route.seal(route) ~> check {
  status shouldEqual StatusCodes.NotFound
  responseAs[String] shouldEqual "Request is missing required query parameter 'backgroundColor'"
}'''
Description = ''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'Request filtering Directive'
Feature = 'match request method'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
val route =
  (get | put) {
    complete("Received GET")
  } ~
  complete("Received something else")'''
Description = 'Similarly post.'

[[data]]
Language = 'akka http scala'
"Operand Type" = 'Request filtering Directive'
Feature = 'path'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
path("foo" / "bar") 
path("order" / IntNumber) { id => innerRoute(id) }
path("hello" / Segment) 
'''
Description = ''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'Request filtering Directive'
Feature = 'path'
Subfeature = 'prefix'
Importance = ''
"Implementation Type" = ''
Syntax = '''
pathPrefix("ball") {
      pathEnd {
        complete("/ball")
      } ~
        path(IntNumber) { int =>
          complete(if (int % 2 == 0) "even ball" else "odd ball")
        }
    }'''
Description = ''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'Request filtering Directive'
Feature = 'path'
Subfeature = 'prefix pattern'
Importance = ''
"Implementation Type" = ''
Syntax = 'pathPrefixTest("foo" | "bar") {...}'
Description = ''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'Request filtering Directive'
Feature = 'path'
Subfeature = 'end'
Importance = ''
"Implementation Type" = ''
Syntax = '''
pathPrefix("foo") {
    pathEndOrSingleSlash {
      complete("/foo")
    }
}'''
Description = 'Same as pathEnd | pathSingleSlash'

[[data]]
Language = 'akka http scala'
"Operand Type" = 'Request filtering Directive'
Feature = 'cookie'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
 cookie("userName") { nameCookie => ...}
optionalCookie("userName") {
    case Some(nameCookie) => complete(s"The logged in user is '${nameCookie.value}'")
    case None             => complete("No user logged in")
  }'''
Description = ''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'Response transformer Directive'
Feature = 'header'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
respondWithHeader(RawHeader.create("something", "xyz")) {
              complete("ok")
            }'''
Description = '''NOte: Can't set Content Type like this.'''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'Response transformer Directive'
Feature = 'cookie'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
deleteCookie("userName") {
    complete("The user was logged out")
  }
setCookie(HttpCookie("userName", value = "paul")) {..}'''
Description = ''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'Value extractor directive'
Feature = 'path'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
extractUnmatchedPath { p =>
    complete(p.toString)
  }'''
Description = ''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'Value extractor directive'
Feature = 'parameter'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
parameter('color) { color =>
    complete(s"The color is '$color'")
  }
parameters('color, 'backgroundColor) { (color, backgroundColor) =>
    complete(s"The color is '$color' ")  }
'''
Description = ''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'Value extractor directive'
Feature = 'parameters'
Subfeature = 'default'
Importance = ''
"Implementation Type" = ''
Syntax = '''parameters('color, 'backgroundColor ? "defaultVal") {..}'''
Description = ''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'Value extractor directive'
Feature = 'parameters'
Subfeature = 'deserialize'
Importance = ''
"Implementation Type" = ''
Syntax = '''parameters('color, 'count.as[Int]) { ...}'''
Description = ''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'Value extractor directive'
Feature = 'parameters'
Subfeature = 'Repeated'
Importance = ''
"Implementation Type" = ''
Syntax = '''
parameters('color, 'city.*)  { ... }
parameters('color, 'distance.as[Int].*) {..}'''
Description = ''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'Value extractor directive'
Feature = 'parameters'
Subfeature = 'csv'
Importance = ''
"Implementation Type" = ''
Syntax = 'parameter("names".as(CsvSeq[String])) {...}'
Description = ''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'Value extractor directive'
Feature = 'parameters'
Subfeature = 'form'
Importance = ''
"Implementation Type" = ''
Syntax = '''
val route =
  formFields('color, 'age.as[Int]) { (color, age) =>
    complete(s"The color is '$color' and the age ten years ago was ${age - 10}")
  }'''
Description = ''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'Value extractor directive'
Feature = 'json'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
post {
      entity(as[Order]) { order => // will unmarshal JSON to Order
        val itemsCount = order.items.size
        val itemNames = order.items.map(_.name).mkString(", ")
        complete(s"Ordered $itemsCount items: $itemNames")
      }
    }'''
Description = ''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'Value validator'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'validate(Locale.getISOLanguages.contains(languageCode), s"languageCode $languageCode not found in Locale.getISOLanguages.")'
Description = ''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'Future Directive'
Feature = 'on success'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
 onSuccess(Future { "Ok" }) { extraction =>
      complete(extraction)
    }'''
Description = ''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'Future Directive'
Feature = 'on complete'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
def divide(a: Int, b: Int): Future[Int] = Future { a / b}
 onComplete(divide(a, b)) {
      case scala.util.Success(value) => complete(s"The result was $value")
      case scala.util.Failure(ex)    => complete((InternalServerError, s"An error occurred: ${ex.getMessage}"))
    }'''
Description = ''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'leaf Directive'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = 'RouteDirective'
Description = '''
Occur only at leaf level.
Contrary to all other directives (except most FileAndResourceDirectives) they do not produce instances of type Directive[L <: HList] but rather “plain” routes of type Route.'''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'leaf Directive'
Feature = 'complete'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
    complete(HttpResponse(entity = "foo"))
      complete(StatusCodes.OK)
      complete(StatusCodes.Created -> "bar")
      complete(201 -> "bar")
      complete(StatusCodes.Created, headers=List(`Content-Type`(`text/plain(UTF-8)`)), value="bar")
complete {
           HttpResponse(entity = HttpEntity(ContentType(MediaTypes.`application/json`), """{"id":"1"}"""))
         }'''
Description = 'Completes a request.'

[[data]]
Language = 'akka http scala'
"Operand Type" = 'leaf Directive'
Feature = 'complete: redirect'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
        redirect("/foo/", StatusCodes.PermanentRedirect)
'''
Description = ''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'leaf Directive'
Feature = 'fail'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
    failWith(new RuntimeException("Oops."))
'''
Description = ''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'leaf Directive'
Feature = 'reject'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
reject
      reject(ValidationRejection("Restricted!"))
'''
Description = ''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'leaf Directive'
Feature = 'file from directory'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
 getFromDirectory("/tmp")
 getFromResourceDirectory("tmp")'''
Description = ''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'Directives class'
Feature = 'define'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
class HelloService(hello: ActorRef)(implicit executionContext: ExecutionContext)
  extends Directives with DefaultJsonFormats {
  val route = ...
  def getHello =
    path("hello") {
      get {
        complete { (hello ? AnonymousHello).mapTo[Greeting] }
      }
    } 
}'''
Description = ''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'App'
Feature = 'define with routes'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
object Rest extends App with RouteConcatenation {
  implicit val system = ActorSystem("akka-http-sample")
  sys.addShutdownHook(system.terminate())

  implicit val materializer = ActorMaterializer()
  implicit val executionContext = system.dispatcher
  val hello = system.actorOf(Props[HelloActor])
  val routes =
    cors() (new HelloService(hello).route ~
      SwaggerDocService.routes)
  Http().bindAndHandle(routes, "0.0.0.0", 9090)
}
'''
Description = ''

[[data]]
Language = 'akka http scala'
"Operand Type" = 'App'
Feature = 'define with requestHandler'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
val requestHandler: HttpRequest => HttpResponse = {
      case HttpRequest(GET, Uri.Path("/crash"), _, _, _) =>
        sys.error("BOOM!")
}
    val bindingFuture = Http().bindAndHandleSync(requestHandler, "localhost", 8080)
StdIn.readLine() // let it run until user presses return
    bindingFuture
      .flatMap(_.unbind()) // trigger unbinding from the port
      .onComplete(_ => system.terminate()) // and shutdown when done

'''
Description = ''

[[data]]
Language = 'akka http scala client'
"Operand Type" = 'HttpRequest'
Feature = 'instantiate'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
val request = HttpRequest(uri = Uri(uri))
val req = HttpRequest(uri = "/ignored", headers = List(`Raw-Request-URI`("/a/b%2Bc")))

val formData = FormData(("user_id", user_id), ("user_secret", user_secret))
val r = HttpRequest(POST, url, headers, formData.toEntity)
'''
Description = ''

[[data]]
Language = 'akka http scala client'
"Operand Type" = ''
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = ''

[[data]]
Language = 'Youtube'
"Operand Type" = 'Download playlist'
Feature = 'as mp3'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
youtube-dl --extract-audio --audio-format mp3 --playlist-start 1 -o "navya-nyAya-ALvAr-%(playlist_index)04d.%(ext)s" https://www.youtube.com/playlist?list=PL7_6YPlfLKeRttlUiKQFoIpM1eNhyhUmt
youtube-dl --extract-audio --audio-format mp3 -o "%(title)s.%(ext)s" <url to playlist>'''
Description = ''

[[data]]
Language = 'DNS record'
"Operand Type" = 'mail'
Feature = 'Register sender'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'TXT        @        v=spf1 a mx include:_spf.google.com ~all	'
Description = '''
~all = soft fail for all else
a = ips in A records for current domain'''

[[data]]
Language = 'DNS record'
"Operand Type" = 'map to IP'
Feature = 'base domain'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'A	@	103.240.32.243'
Description = ''

[[data]]
Language = 'DNS record'
"Operand Type" = 'map to IP'
Feature = 'sub domain'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'CNAME	api	@	1 Hour'
Description = ''

[[data]]
Language = 'jekyll'
"Operand Type" = ''
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = '''
Static site generator
Supported by github pages.'''

[[data]]
Language = 'jekyll'
"Operand Type" = 'setup'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'gem install jekyll bundle'
Description = ''

[[data]]
Language = 'jekyll'
"Operand Type" = 'setup'
Feature = 'create site'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'jekyll new siteName'
Description = ''

[[data]]
Language = 'jekyll'
"Operand Type" = 'setup'
Feature = 'update dependencies'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
# after updating gem file
bundle install'''
Description = ''

[[data]]
Language = 'jekyll'
"Operand Type" = 'serve'
Feature = 'first time'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'bundle exec jekyll serve'
Description = ''

[[data]]
Language = 'jekyll'
"Operand Type" = 'serve'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'jekyll serve [--draft]'
Description = ''

[[data]]
Language = 'jekyll'
"Operand Type" = 'serve'
Feature = 'on github'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = '''
Set site path in config.
push to gh-pages branch.
Note: does not use bundler, only sees config.yml.'''

[[data]]
Language = 'jekyll'
"Operand Type" = 'setup'
Feature = 'folders/ files'
Subfeature = 'drafts'
Importance = ''
"Implementation Type" = ''
Syntax = '_drafts'
Description = ''

[[data]]
Language = 'jekyll'
"Operand Type" = 'setup'
Feature = 'folders/ files'
Subfeature = 'blog posts'
Importance = ''
"Implementation Type" = ''
Syntax = '_posts/ (+ subfolders)'
Description = '''
(blog-posts with files like 2017-02-12-some-title.md)
'''

[[data]]
Language = 'jekyll'
"Operand Type" = 'setup'
Feature = 'folders/ files'
Subfeature = 'built static files'
Importance = ''
"Implementation Type" = ''
Syntax = '_site/'
Description = ''

[[data]]
Language = 'jekyll'
"Operand Type" = 'setup'
Feature = 'folders/ files'
Subfeature = 'page files'
Importance = ''
"Implementation Type" = ''
Syntax = 'index.md, about.md ...'
Description = ''

[[data]]
Language = 'jekyll'
"Operand Type" = 'setup'
Feature = 'folders/ files'
Subfeature = 'configuration'
Importance = ''
"Implementation Type" = ''
Syntax = '''
_config.yml
Gemfile - ruby dependencies'''
Description = ''

[[data]]
Language = 'jekyll'
"Operand Type" = 'setup'
Feature = 'folders/ files'
Subfeature = 'layout'
Importance = ''
"Implementation Type" = ''
Syntax = '_layout/'
Description = ''

[[data]]
Language = 'jekyll'
"Operand Type" = 'setup'
Feature = 'folders/ files'
Subfeature = 'includes'
Importance = ''
"Implementation Type" = ''
Syntax = '_includes/'
Description = ''

[[data]]
Language = 'jekyll'
"Operand Type" = 'setup'
Feature = 'folders/ files'
Subfeature = 'data'
Importance = ''
"Implementation Type" = ''
Syntax = '_data/'
Description = 'yml, json or csv'

[[data]]
Language = 'jekyll'
"Operand Type" = 'configuration'
Feature = 'basic info'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
title: xyz
baseurl: "" # subpath of site
url: "" ...'''
Description = '''
_config.yml
'''

[[data]]
Language = 'jekyll'
"Operand Type" = 'configuration'
Feature = 'ruby dependencies'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'gem "jekyll", "~> 3.6.0"'
Description = 'in Gemfile'

[[data]]
Language = 'jekyll'
"Operand Type" = 'configuration'
Feature = 'plugins'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
plugins:
  - jekyll-feed'''
Description = ''

[[data]]
Language = 'jekyll'
"Operand Type" = 'configuration'
Feature = 'default page metadata'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
defaults:
  -
    scope:
      path: "*pages/hindutvam/*"
      type: "posts"
    values:
      "layout": "post"'''
Description = '''
Order matters: place more specific scope higher.

Note: In a certain context, "*pages/hindutvam/*" works unlike "*/pages/hindutvam/*"
'''

[[data]]
Language = 'jekyll'
"Operand Type" = 'page'
Feature = 'metadata'
Subfeature = 'location'
Importance = ''
"Implementation Type" = ''
Syntax = '''
---
layout: post|whateverTheLayoutgives....
title: "..."
date: 2017-12-12
categories: topCat subCat
permalink: "/xyz/"
---
Post content'''
Description = 'Top of the page'

[[data]]
Language = 'jekyll'
"Operand Type" = 'page'
Feature = 'metadata'
Subfeature = 'format'
Importance = ''
"Implementation Type" = ''
Syntax = 'YAML or JSON'
Description = ''

[[data]]
Language = 'jekyll'
"Operand Type" = 'page'
Feature = 'metadata'
Subfeature = 'permalink'
Importance = ''
"Implementation Type" = ''
Syntax = '''
permalink: "/xyz/"
permalink: /:categories/:year/:month/:day/:title[.random_ext]'''
Description = ''

[[data]]
Language = 'jekyll'
"Operand Type" = 'page'
Feature = 'final url'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'Determined from date, title, categories, permalink.'

[[data]]
Language = 'jekyll'
"Operand Type" = 'layout'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
---
layout: "base"
---
… HTML code ...
{% incldue header.html someVar="someVal" %}
{{site.title}}
{{page.someKey}}
{{layout.someKey}}
{{page.title}}
{{content}}
'''
Description = ''

[[data]]
Language = 'jekyll'
"Operand Type" = 'global variables'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
site page layout 
content (in layout files)
paginator'''
Description = ''

[[data]]
Language = 'jekyll'
"Operand Type" = 'site variables'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
site.posts pages static_files related_posts 
html_pages html_files
site.data.fileName
collections
documents
categories tags
url'''
Description = ''

[[data]]
Language = 'jekyll'
"Operand Type" = 'site variables'
Feature = 'file'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'file.path name basename extname'
Description = 'Can define additional metadata using defaults.'

[[data]]
Language = 'jekyll'
"Operand Type" = 'page variables'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'page.content title excerpt url date id categoriestags path next previous'
Description = ''

[[data]]
Language = 'jekyll'
"Operand Type" = 'paginator variables'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'per_page posts total_posts total_pages page ...'
Description = ''

[[data]]
Language = 'jekyll'
"Operand Type" = 'theme gem'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = 'some of the site’s directories (such as the assets, _layouts, _includes, and _sass directories) are stored in the theme’s gem, hidden but used.'

[[data]]
Language = 'jekyll'
"Operand Type" = 'theme gem'
Feature = 'show files'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'See Ruby rows in basic sheet'

[[data]]
Language = 'jekyll'
"Operand Type" = 'theme gem'
Feature = 'override'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'make a copy in your _layouts or _includes directory of the specific file you wish to modify and modify'

[[data]]
Language = 'jekyll'
"Operand Type" = 'theme gem'
Feature = 'create'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'jekyll new-theme some-theme-name'
Description = ''

[[data]]
Language = 'jekyll'
"Operand Type" = 'theme gem'
Feature = 'package'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'gem build jekyll-theme-awesome.gemspec'
Description = ''

[[data]]
Language = 'jekyll'
"Operand Type" = 'theme gem'
Feature = 'push'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'gem push jekyll-theme-awesome-*.gem'
Description = ''

[[data]]
Language = 'liquid template language'
"Operand Type" = ''
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = 'Used in Jekyll.'

[[data]]
Language = 'liquid template language'
"Operand Type" = 'assign'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '{% assign item_in_list_fn = include.item %}'
Description = 'Be wary of using in includes - variable names may clash with including files.'

[[data]]
Language = 'liquid template language'
"Operand Type" = 'operators'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ' == != > < >= <= or and contains'
Description = 'PS: You cannot change the order of operations using parentheses — parentheses are invalid characters in Liquid '

[[data]]
Language = 'liquid template language'
"Operand Type" = 'include function'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = '''
A function which prints stuff.
Can be recursive (up to allowed limit.)
Scope of top variables is same as includer context.'''

[[data]]
Language = 'liquid template language'
"Operand Type" = 'include function'
Feature = 'definition'
Subfeature = 'passed value'
Importance = ''
"Implementation Type" = ''
Syntax = '{{include.someVar}}'
Description = ''

[[data]]
Language = 'liquid template language'
"Operand Type" = 'print expression value'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '{{ site.data.fileName }}'
Description = ''

[[data]]
Language = 'liquid template language'
"Operand Type" = 'comment'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '{% comment %}if currentLevel == 0 {% endcomment %}'
Description = ''

[[data]]
Language = 'liquid template language'
"Operand Type" = 'conditional'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
{% if page.title == "xyz" [or|and ...] %}
..
{% elsif ... %}
..
{% endif %}'''
Description = ''

[[data]]
Language = 'liquid template language'
"Operand Type" = 'loop'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
{% for post in site.posts %}
  {{ post.title }} <br>{ post.url }}
{% endfor %}'''
Description = ''

[[data]]
Language = 'internet archive'
"Operand Type" = 'configure'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'ia configure'
Description = ''

[[data]]
Language = 'internet archive'
"Operand Type" = 'concept'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = '''
Based on python code.
Slightly buggy. (IA database is separately buggy - eg: marking wrong files as "original".)'''

[[data]]
Language = 'internet archive'
"Operand Type" = 'list + filter + delete'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'ia list ITEMNAME |grep ogg|xargs -i ia delete mahAbhArata-mUla-paThanam-GP-1 {} --cascade'
Description = ''

[[data]]
Language = 'internet archive'
"Operand Type" = 'delete'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'ia delete ITEMNAME 001-008.mp3 001-009.mp3  --cascade -H x-archive-keep-old-version:0'
Description = ''

[[data]]
Language = 'internet archive'
"Operand Type" = 'upload'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'ia upload mahAbhArata-mUla-paThanam-GP-drafts *.mp3 --checksum'
Description = ''

[[data]]
Language = 'internet archive'
"Operand Type" = 'download'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'ia download mahA-darshana-devuDu-narasimha-shAstrI --glob="*.mp3"'
Description = ''

[[data]]
Language = 'hugo'
"Operand Type" = 'concept'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = '''
static site gengerator.
much faster than jekyll'''

[[data]]
Language = 'hugo'
"Operand Type" = 'setup'
Feature = 'config.toml'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
baseURL = "https://ashtadhyayi.github.io/ui/"
languageCode = "en-us"
title = "अष्टाध्यायी - मूलस्रोतः"
theme = "ananke"
publishDir = "docs"
ignorefiles = [ "vritti/scripts/.*" ]
[params]
  githubEditMePathBase = "https://github.com/sanskrit/ashtadhyayi/edit/master/"
  env = "production"'''
Description = ''

[[data]]
Language = 'hugo'
"Operand Type" = 'setup'
Feature = 'taxonomies'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
[taxonomies]
  category = "categories"
  tag = "tags"
  sutra = "sutras"'''
Description = ''

[[data]]
Language = 'hugo'
"Operand Type" = 'directory structure'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
content
data
layouts (overrides themes/ankake/layouts)
static
themes'''
Description = ''

[[data]]
Language = 'hugo'
"Operand Type" = 'directory structure'
Feature = 'layout'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
_default
someContentType
partials (headers, footers etc.. to be included in other htmls)'''
Description = ''

[[data]]
Language = 'hugo'
"Operand Type" = 'layouts'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
baseof.html
list.html
single.html'''
Description = ''

[[data]]
Language = 'hugo'
"Operand Type" = 'Template variables'
Feature = 'page'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '.Params.title'
Description = ''

[[data]]
Language = 'hugo'
"Operand Type" = 'Template variables'
Feature = 'site'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '.Site.title'
Description = ''

[[data]]
Language = 'hugo'
"Operand Type" = 'Template variables'
Feature = 'context'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '.scope'
Description = ''

[[data]]
Language = 'hugo'
"Operand Type" = 'Template variables'
Feature = 'custom'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '$address '
Description = ''

[[data]]
Language = 'hugo'
"Operand Type" = 'Template variables'
Feature = 'map'
Subfeature = 'index'
Importance = ''
"Implementation Type" = ''
Syntax = '    {{ index .Params "description" }}'
Description = ''

[[data]]
Language = 'hugo'
"Operand Type" = 'template'
Feature = 'url'
Subfeature = 'relative'
Importance = ''
"Implementation Type" = ''
Syntax = '{{ "data/pages.tsv" | relURL }}'
Description = ''

[[data]]
Language = 'hugo'
"Operand Type" = 'template'
Feature = 'loop'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
{{ range .Site.Data.page_defaults }}
...
{{ end }}
'''
Description = ''

[[data]]
Language = 'hugo'
"Operand Type" = 'template'
Feature = 'conditional'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
{{ if (isset .Params "description") }}
    {{ index .Params "description" }}
{{ else if (isset .Params "summary") }}
    {{ index .Params "summary" }}
{{ else }}
    {{ .Summary }}
{{ end }}'''
Description = ''

[[data]]
Language = 'hugo'
"Operand Type" = 'template'
Feature = 'conditional'
Subfeature = 'or'
Importance = ''
"Implementation Type" = ''
Syntax = '''
{{ if or (.Get "caption") (.Get "attribution")}}
...
'''
Description = ''

[[data]]
Language = 'hugo'
"Operand Type" = 'template'
Feature = 'print'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'console.debug({{.scope | jsonify}});'
Description = ''

[[data]]
Language = 'hugo'
"Operand Type" = 'template'
Feature = 'include'
Subfeature = 'cached'
Importance = ''
"Implementation Type" = ''
Syntax = '{{ partialCached "site-footer.html" . }}'
Description = ''

[[data]]
Language = 'hugo'
"Operand Type" = 'template'
Feature = 'include'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '{{ partial "site-footer.html" . }}'
Description = ''

[[data]]
Language = 'hugo'
"Operand Type" = 'template'
Feature = 'block'
Subfeature = 'include'
Importance = ''
"Implementation Type" = ''
Syntax = '{{ block "footer" . }}{{ "Default stuff"}}{{ end }}'
Description = ''

[[data]]
Language = 'hugo'
"Operand Type" = 'template'
Feature = 'string'
Subfeature = 'replace regex'
Importance = ''
"Implementation Type" = ''
Syntax = '$file_name := replaceRE "_" " " (replaceRE ".+/" "" (.Get "src")) '
Description = ''

[[data]]
Language = 'hugo'
"Operand Type" = 'template'
Feature = 'block'
Subfeature = 'define'
Importance = ''
"Implementation Type" = ''
Syntax = '''
{{ define "main" }}
someHTML
{{ end }}
'''
Description = ''

[[data]]
Language = 'youtube-dl'
"Operand Type" = 'yt playlist'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'youtube-dl --extract-audio --audio-format mp3 -o "srijan talk %(upload_date)s %(playlist_index)04d: %(title).50s.%(ext)s" https://www.youtube.com/channel/UC3nhAUpe7aBm1rFCBgoWWcA/videos --playlist-reverse'
Description = ''

[[data]]
Language = 'youtube-dl'
"Operand Type" = 'yt video'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = ''

[[data]]
Language = 'vpn'
"Operand Type" = 'ncbs'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'cd /home/vvasuki/sysconf/kunchikA/ncbsvpn; sudo openvpn client.conf'
Description = ''

[[data]]
Language = 'vpn'
"Operand Type" = 'protonvpn'
Feature = 'setup'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'sudo protonvpn init'
Description = 'use openvpn id and pw from site'

[[data]]
Language = 'vpn'
"Operand Type" = 'protonvpn'
Feature = 'connect'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'sudo protonvpn connect'
Description = ''

[[data]]
Language = 'vpn'
"Operand Type" = 'protonvpn'
Feature = 'disconnect'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'sudo protonvpn disconnect'
Description = ''

[[data]]
Language = 'wget'
"Operand Type" = 'download files'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'wget -r -A "*u.htm" http://gretil.sub.uni-goettingen.de/'
Description = ''

[[data]]
Language = 'wget'
"Operand Type" = 'download files'
Feature = 'no clobber, exclude dirs'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'wget -nc -r -A "*.html,*.htm" -X /learning_tools/ashtadhyayi,/learning_tools/sarvanisutrani  https://sanskritdocuments.org/'
Description = ''
