[[data]]
Language = 'polymer web components'
"Operand Type" = ''
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = 'Define custom webcomponents easily.'

[[data]]
Language = 'polymer web components'
"Operand Type" = 'system setup'
Feature = 'general'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
npm install -g polymer-cli
polymer serve --open
polymer build'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'system setup'
Feature = 'files'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
bower.json - specify dependencies
manifest.json - polymer app info
package.json - 
polymer.json - used by polymer-cli - define builds, source folder, dependency files, fragment-file list, entry point
src --> html files defining various DOM elements.
'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'system setup'
Feature = 'install deps'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'Use bower'

[[data]]
Language = 'polymer web components'
"Operand Type" = 'define + register'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<link rel="import"  href="https://polygit.org/components/polymer/polymer-element.html">
<script>  // Define the class for a new element called custom-element
  class CustomElement extends Polymer.Element {
    static get is() { return "custom-element"; }
    constructor() { super(); this.textContent = "I'm a custom-element.";
      }  }  // Register the new element with the browser
  customElements.define(CustomElement.is, CustomElement);
</script>'''
Description = 'A polymer web component is fully defined by its properties, methods, and events .'

[[data]]
Language = 'polymer web components'
"Operand Type" = 'define + register'
Feature = 'shadow dom'
Subfeature = 'setup'
Importance = ''
"Implementation Type" = ''
Syntax = '''
<link rel="import"  href="https://polygit.org/components/polymer/polymer-element.html">
<dom-module id="dom-element"> 
<template>    <p>sdfgas</p>  </template>
  <script>
    class DomElement extends Polymer.Element {
      static get is() { return "dom-element"; }
    }
    customElements.define(DomElement.is, DomElement);  
</script></dom-module>'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'define + register'
Feature = 'extend'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
lass ChildElement extends ParentElement {
  /* ... */
}
class ChildElement extends customElements.get('parent-element') {
  /* ... */
}'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'define + register'
Feature = 'mixin'
Subfeature = 'define'
Importance = ''
"Implementation Type" = ''
Syntax = '''
MyMixin = function(superClass) {
    return class extends superClass {
      // Code that you want common to elements.
      // If you're going to override a lifecycle method, remember that a) you
      // might need to call super but b) it might not exist
      connectedCallback() {
        if (super.connectedCallback) {
          super.connectedCallback();
        }
        /* ... */
'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'define + register'
Feature = 'mixin'
Subfeature = 'use'
Importance = ''
"Implementation Type" = ''
Syntax = '''
dom-module id="element-name">
  <template><!-- ... --></template>
  <script>
    // This could also be a sequence:
    //class MyElement extends AnotherMixin(MyMixin(Polymer.Element)) { â€¦ }
    class MyElement extends MyMixin(Polymer.Element) {
      static get is() { return 'element-name' }
      /* ... */
    }
    customElements.define(MyElement.is, MyElement);
  </script>
</dom-module>'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'property'
Feature = 'define'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
      static get properties() {
        return {
  owner: { type: String, value: "Daniel"}
 };
}'''
Description = 'Note: property name dictEntry corresponds to html attribute dict-entry. Everything becomes lowercase.'

[[data]]
Language = 'polymer web components'
"Operand Type" = 'property'
Feature = 'define'
Subfeature = 'computed'
Importance = ''
"Implementation Type" = ''
Syntax = '''
fullName: {
  type: String,
  computed: 'computeFullName(first, last)'
}'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'property'
Feature = 'read/ set in template'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'See Dom template -> data binding'

[[data]]
Language = 'polymer web components'
"Operand Type" = '''
property definition
(non array, non object)'''
Feature = 'limit flow'
Subfeature = 'to calling element'
Importance = ''
"Implementation Type" = ''
Syntax = '''
        someProp: {
          type: ..,
          notify: true
        }'''
Description = '''
default: false.
Changes to this property in the sub-element gets propagated to the bound property in the calling element - if {{someProp}} is used in binding.'''

[[data]]
Language = 'polymer web components'
"Operand Type" = '''
property definition
(non array, non object)'''
Feature = 'limit flow'
Subfeature = 'from calling element'
Importance = ''
"Implementation Type" = ''
Syntax = 'readOnly: true'
Description = '''
default: false.
Changes to the bound property in the calling element cannot propagate to this property in the sub element. But vice versa is not affected by this setting. '''

[[data]]
Language = 'polymer web components'
"Operand Type" = '''
property definition
(array or object)'''
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'No flow control limitations for content changes.'

[[data]]
Language = 'polymer web components'
"Operand Type" = 'property definition'
Feature = 'update attribute'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
          reflectToAttribute: true,
'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'property definition'
Feature = 'force full change check'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'Use Polymer.MutableData mixin'
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'property definition'
Feature = 'listener'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
static get properties() {
  return {
    myProperty: {
      observer: '_myPropertyChanged'    }  }}
_myPropertyChanged(value, /*oldValue */) { /* ... */ }'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'property changes'
Feature = 'observable changes'
Subfeature = 'set'
Importance = ''
"Implementation Type" = ''
Syntax = '''
this.owner = 'Jane'; 
2-way data binding: 
<local-dom-child name="{{hostProperty.subProperty}}"></local-dom-child>
this.set('address.street', 'Half Moon Street');
this.push('users', { name: 'Maturin'});
this.setProperties({a: 10, b: 20}); // Fire once for both props
'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'property changes'
Feature = 'unobservable changes'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
this.address.street = 'Elm Street';
this.users.push({ name: 'Maturin'});'''
Description = '''Polymer performs dirty checking for objects and arrays using object equality. It doesn't produce any property effects if the value at the specified path hasn't changed.'''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'property changes'
Feature = 'unobservable changes'
Subfeature = 'notify change'
Importance = ''
"Implementation Type" = ''
Syntax = '''
this.notifyPath('address.street');
this.addresses = this.addresses.slice(); // clones'''
Description = '''For example, calling this.notifyPath('address') doesn't pick up a change to address.street if the address object itself remains unchanged. '''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'property'
Feature = 'access in js method'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
var value = this.get('myProp.subProp');
var item = this.get(['myArray', 11])'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'dom template'
Feature = 'shadow dom'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<template> 
<style> ... </style>
This is <b>{{owner}}</b>'s name-tag element.
</template>'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'dom template'
Feature = 'drop-down'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
  <link rel="import" href="../../paper-listbox/paper-listbox.html">
  <link rel="import" href="../../paper-tabs/paper-tabs.html">
  <link rel="import" href="../paper-dropdown-menu.html">
  <link rel="import" href="../paper-dropdown-menu-light.html">
<paper-dropdown-menu label="xyz" [disabled]>
  <paper-listbox slot="dropdown-content" selected="1">
    <paper-item>a</paper-item>...  </paper-listbox>
</paper-dropdown-menu>'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'dom template'
Feature = 'html append'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
importHref(href: string, onload: Function=, onerror: Function=, optAsync: boolean=)
Polymer.importHref(resolvedPageUrl, null, this._showPage404.bind(this), true);
'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'dom template'
Feature = 'layout'
Subfeature = 'drawer'
Importance = ''
"Implementation Type" = ''
Syntax = '''
<app-drawer-layout>
<app-drawer slot="drawer">
<app-toolbar>Menu</app-toolbar> ...
</app-drawer>
<app-header-layout has-scrolling-region>
...</app-header-layout>
</app-drawer-layout>'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'dom template'
Feature = 'property binding'
Subfeature = '2-way'
Importance = ''
"Implementation Type" = ''
Syntax = '<childElement someVar={{xyz}}>'
Description = '''
Allows: Changes to this property in the sub-element gets propagated to the bound property in the calling element and vice versa.
Creates a change listener in the calling element which also bubbles the event up.'''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'dom template'
Feature = 'property binding'
Subfeature = 'host to target'
Importance = ''
"Implementation Type" = ''
Syntax = '<childElement someVar=[[xyz]]>'
Description = '''
Changes to this property in the sub-element don't get propagated to the bound property in the calling element, but vice versa is possible with compatible settings.
ie Calling element doesn't have a change listener for this prop.'''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'dom template'
Feature = 'property binding'
Subfeature = 'input, bind'
Importance = ''
"Implementation Type" = ''
Syntax = '''
    <iron-input bind-value="{{owner}}">
      <input is="iron-input" placeholder="Your name here...">
    </iron-input>'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'dom template'
Feature = 'repeat'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<template>
 <template is="dom-repeat" items="{{employees}}">
        <div>Last name: <span>{{item.last}}</span></div>
</template>
  </template>'''
Description = '''
If using outside dom-managed template:
<link rel="import" href="components/polymer/lib/elements/dom-repeat.html">
<dom-repeat items=...>
  <template>
    ...
  </template>
</dom-repeat>
'''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'dom template'
Feature = 'conditional'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
  <template is="dom-if"  if="[[myProperty]]">
    <span>This content will appear when myProperty is truthy.</span>
  </template>
'''
Description = '''
If using outside dom-managed template:

<link rel="import" href="components/polymer/lib/elements/dom-if.html">
<dom-if if="[[myProperty]]">
...'''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'dom template'
Feature = 'style'
Subfeature = 'match attribute'
Importance = ''
"Implementation Type" = ''
Syntax = '''
:host {
        display: inline-block;
      }
:host([pressed]) iron-icon {
        fill: currentcolor;
      }'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'events'
Feature = 'lifecycle events'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'Handled by methods with those names. Call super.xyz() explicitly.'

[[data]]
Language = 'polymer web components'
"Operand Type" = 'events'
Feature = 'lifecycle events'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'ready'
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'events'
Feature = 'lifecycle events'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'constructor'
Description = 'Called when the element is upgraded (that is, when an element is created, or when a previously-created element becomes defined).'

[[data]]
Language = 'polymer web components'
"Operand Type" = 'events'
Feature = 'lifecycle events'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'connectedCallback'
Description = '''
Called when the element is added to a document.
Also when nodes change.'''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'events'
Feature = 'lifecycle events'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'disconnectedCallback'
Description = 'Called when the element is removed from a document.'

[[data]]
Language = 'polymer web components'
"Operand Type" = 'events'
Feature = 'lifecycle events'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'attributeChangedCallback'
Description = '''Called when any of the element's attributes are changed, appended, removed, or replaced,'''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'event'
Feature = 'setup gesture listen'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<link rel="import" href="polymer/lib/mixins/gesture-event-listeners.html">
  class IconToggle extends Polymer.GestureEventListeners(Polymer.Element) {
}'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'event'
Feature = 'listen'
Subfeature = 'with js'
Importance = ''
"Implementation Type" = ''
Syntax = '''
      this.addEventListener('tap', 'toggle');
      Polymer.Gestures.addListener(this, 'tap', () => this.toggle());'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'event'
Feature = 'listen'
Subfeature = 'with template annotation'
Importance = ''
"Implementation Type" = ''
Syntax = '    <button on-click="handleClick">Kick Me</button>'
Description = '''
calls handleClick method in the element.
Event target is changed to ShadowRoot, rather than the button as it bubbles out of the element.'''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'event'
Feature = 'handler'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<script>
  _filterChanged: function(e) {
    // case-sensitive filtering
    var filter = e.detail.value;
    this.filteredItems = ...;
  }  ...
</script>'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'event'
Feature = 'fire/ dispatch'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
this.dispatchEvent(new CustomEvent('kick', {detail: {kicked: true}}));
'''
Description = 'can be listened for like any other js event.'

[[data]]
Language = 'polymer web components'
"Operand Type" = 'event'
Feature = 'click'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'onclick="someMethod"'
Description = 'Listener will get event, where e.path has the origin path in the DOM tree.'

[[data]]
Language = 'polymer web components'
"Operand Type" = 'event'
Feature = 'node changes'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<link rel="import" href="/bower_components/polymer/lib/utils/flattened-nodes-observer.html">
<script>
class MyElement extends Polymer.Element {
  /* ... */
  connectedCallback: function() {
    super.connectedCallback();
    this._observer = new Polymer.FlattenedNodesObserver(this.$.drawer, function(info) {
    // info is {addedNodes: [...], removedNodes: [...]}
    });
  }
  disconnectedCallback: function() {
    super.disconnectedCallback();
    this._observer.disconnect();
  }}</script>'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'use'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<html lang="en">
  <head>
    <script src="https://polygit.org/webcomponentsjs+1.0.0-rc.5/components/webcomponentsjs/webcomponents-loader.js"></script>
    <link rel="import" href="custom-element.html">
  </head>
  <body>
    <custom-element prop2="asdf"></custom-element>
  </body>
</html>'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'sub-component'
Feature = 'use'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = ''
Description = 'Use in shadow dom as you would in regular html'

[[data]]
Language = 'polymer web components'
"Operand Type" = 'sub-node'
Feature = 'scroll to'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'Polymer.dom(this.root).querySelector(`[id="${dictEntryLinks[0].dictEntry._id}"]`).scrollIntoView();'
Description = 'linking to #InternalLink wont work.'

[[data]]
Language = 'polymer web components'
"Operand Type" = 'sub-node'
Feature = 'access in js'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'this.$.elementId'
Description = 'Nodes created dynamically using data binding (including those in dom-repeat and dom-if templates) are not added to the this.$ hash. '

[[data]]
Language = 'polymer web components'
"Operand Type" = 'sub-node'
Feature = 'access in js'
Subfeature = 'dynamic nodes'
Importance = ''
"Implementation Type" = ''
Syntax = '''
Polymer.dom(this.root).querySelector() // usual query syntax
this.$$(selector) returns first node only'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'simple bind'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<link rel="import" href="components/polymer/lib/elements/dom-bind.html">
...<body>
  <dom-bind> <template>
      <paper-input value="{{myText}}"></paper-input>
      <span>You typed: [[myText]]</span>
    </template></dom-bind>
</body>
<html>'''
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'iron-ajax'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<link rel="import" href="https://cdn.rawgit.com/download/polymer-cdn/1.5.0/lib/iron-ajax/iron-ajax.html">
 <dom-module id="show-repositories">    <template>
        <iron-ajax auto id="requestRepos" url="https://api.github.com/users/burczu/repos" params='{"type":"all"}' body='{}' handle-as="json" on-response="handleResponse">
        </iron-ajax>
    </template>
...</dom-module>
'''
Description = '''
Sets event.detail.response .
With auto set to true, the element performs a request whenever its url, params or body properties are changed.
You can trigger a request explicitly by calling generateRequest on the element.
'''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'iron-ajax'
Feature = 'properties'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'loading: true while lastRequest is in flight.'
Description = ''

[[data]]
Language = 'polymer web components'
"Operand Type" = 'combo box vaadin'
Feature = 'call'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
            <vaadin-combo-box id="queryBox" label="Query"  filter="{{query}}"  filtered-items="[[headwords]]" 
 on-value-changed="valueChanged"
allow-custom-value></vaadin-combo-box>
'''
Description = 'loading = true displays some UI hint that filter is being updated. Use property binding.'

[[data]]
Language = 'polymer web components'
"Operand Type" = 'combo box vaadin'
Feature = 'custom filtering'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
<vaadin-combo-box filtered-items="[[filteredItems]]" on-filter-changed="_filterChanged">
</vaadin-combo-box>
In _filterChanged event handler:
    var filter = e.detail.value;
    this.filteredItems = ...;
'''
Description = ''

