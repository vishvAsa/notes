<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>&#43;Parallel computing on Vishvas&#39;s notes</title>
    <link>file:///storage/emulated/0/notesData/notes/computing/programming/programmingLanguages/parallel/</link>
    <description>Recent content in &#43;Parallel computing on Vishvas&#39;s notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="file:///storage/emulated/0/notesData/notes/computing/programming/programmingLanguages/parallel/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Condor</title>
      <link>file:///storage/emulated/0/notesData/notes/computing/programming/programmingLanguages/parallel/condor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>file:///storage/emulated/0/notesData/notes/computing/programming/programmingLanguages/parallel/condor/</guid>
      <description>This is a common job-scheduler. Once you specify the job in a certain file, condor tries to execute it on some processor (in a cluster) and retrieve the result.
Priority and restarts Commonly jobs dispatched by condor are low priority - so if a higher priority process comes in, the condor job is stopped and moved to a different processor. If the program has checkpointing facilites, the job simply continues from where it stopped : Eg: Compiled languages.</description>
    </item>
    
    <item>
      <title>ORC</title>
      <link>file:///storage/emulated/0/notesData/notes/computing/programming/programmingLanguages/parallel/orc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>file:///storage/emulated/0/notesData/notes/computing/programming/programmingLanguages/parallel/orc/</guid>
      <description>Distinctive features of the language Purpose of design Inspired by functional programming languages.
Distributed computing: There&amp;rsquo;ll be many services on the internet, need a language to orchestrate them. So, good internet mashup language.
Good for concisely reasoning about distrubted systems.
Sites Everything is a site: a possibly remote function without side-effect which may not respond. Even +, -, if(..) etc.. are sites. These may return sites too. Actual site call is not executed until all arguments are available.</description>
    </item>
    
  </channel>
</rss>