[[data]]
"Operand Type" = 'route'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = '''
type Route = 
RequestContext => Future[RouteResult]
'''
Description = 'A way of specifying how a request should be handled.'

[[data]]
"Operand Type" = 'route'
Feature = 'instantiate'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
val route: Route = { ctx => ctx.complete("yeah") } // use an anonymous fn
val route: Route = _.complete("yeah") 
val route = complete("yeah") // use directive
val route = someDirectiveTree'''
Description = ''

[[data]]
"Operand Type" = 'route'
Feature = 'handle request'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
requestContext.complete(...) - complete the request now
Do asynchronous processing and instantly return a Future[RouteResult] to be eventually completed later
requestContext.reject(...) = wont handle request
requestContext.fail(...) or by just throwing an exception'''
Description = ''

[[data]]
"Operand Type" = 'Directive'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = ''
Description = 'building block used for creating arbitrarily complex route structures. '

[[data]]
"Operand Type" = 'Directive'
Feature = 'composition'
Subfeature = 'concatenation'
Importance = ''
"Implementation Type" = ''
Syntax = '''
concat(a, b, c) - same as a ~ b ~ c
'''
Description = '''
 forgetting the ~ (tilde) character in between directives can result in perfectly valid Scala code that compiles but does not work as expected. 
Prefer concat.'''

[[data]]
"Operand Type" = 'Directive'
Feature = 'composition'
Subfeature = 'nesting'
Importance = ''
"Implementation Type" = ''
Syntax = '''
name(arguments) { extractions =>
  ... // inner route
}
val getOrPut = get | put
val route = (path("order" / IntNumber) & getOrPut & extractMethod) {...}'''
Description = ''

[[data]]
"Operand Type" = 'Directive'
Feature = 'test'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
Get("/?color=blue&backgroundColor=red") ~> route ~> check {
  responseAs[String] shouldEqual "The color is 'blue' and the background is 'red'"
}
Get("/?color=blue") ~> Route.seal(route) ~> check {
  status shouldEqual StatusCodes.NotFound
  responseAs[String] shouldEqual "Request is missing required query parameter 'backgroundColor'"
}'''
Description = ''

[[data]]
"Operand Type" = 'Request filtering Directive'
Feature = 'match request method'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
val route =
  (get | put) {
    complete("Received GET")
  } ~
  complete("Received something else")'''
Description = 'Similarly post.'

[[data]]
"Operand Type" = 'Request filtering Directive'
Feature = 'path'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
path("foo" / "bar") 
path("order" / IntNumber) { id => innerRoute(id) }
path("hello" / Segment) 
'''
Description = ''

[[data]]
"Operand Type" = 'Request filtering Directive'
Feature = 'path'
Subfeature = 'prefix'
Importance = ''
"Implementation Type" = ''
Syntax = '''
pathPrefix("ball") {
      pathEnd {
        complete("/ball")
      } ~
        path(IntNumber) { int =>
          complete(if (int % 2 == 0) "even ball" else "odd ball")
        }
    }'''
Description = ''

[[data]]
"Operand Type" = 'Request filtering Directive'
Feature = 'path'
Subfeature = 'prefix pattern'
Importance = ''
"Implementation Type" = ''
Syntax = 'pathPrefixTest("foo" | "bar") {...}'
Description = ''

[[data]]
"Operand Type" = 'Request filtering Directive'
Feature = 'path'
Subfeature = 'end'
Importance = ''
"Implementation Type" = ''
Syntax = '''
pathPrefix("foo") {
    pathEndOrSingleSlash {
      complete("/foo")
    }
}'''
Description = 'Same as pathEnd | pathSingleSlash'

[[data]]
"Operand Type" = 'Request filtering Directive'
Feature = 'cookie'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
 cookie("userName") { nameCookie => ...}
optionalCookie("userName") {
    case Some(nameCookie) => complete(s"The logged in user is '${nameCookie.value}'")
    case None             => complete("No user logged in")
  }'''
Description = ''

[[data]]
"Operand Type" = 'Response transformer Directive'
Feature = 'header'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
respondWithHeader(RawHeader.create("something", "xyz")) {
              complete("ok")
            }'''
Description = '''NOte: Can't set Content Type like this.'''

[[data]]
"Operand Type" = 'Response transformer Directive'
Feature = 'cookie'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
deleteCookie("userName") {
    complete("The user was logged out")
  }
setCookie(HttpCookie("userName", value = "paul")) {..}'''
Description = ''

[[data]]
"Operand Type" = 'Value extractor directive'
Feature = 'path'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
extractUnmatchedPath { p =>
    complete(p.toString)
  }'''
Description = ''

[[data]]
"Operand Type" = 'Value extractor directive'
Feature = 'parameter'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
parameter('color) { color =>
    complete(s"The color is '$color'")
  }
parameters('color, 'backgroundColor) { (color, backgroundColor) =>
    complete(s"The color is '$color' ")  }
'''
Description = ''

[[data]]
"Operand Type" = 'Value extractor directive'
Feature = 'parameters'
Subfeature = 'default'
Importance = ''
"Implementation Type" = ''
Syntax = '''parameters('color, 'backgroundColor ? "defaultVal") {..}'''
Description = ''

[[data]]
"Operand Type" = 'Value extractor directive'
Feature = 'parameters'
Subfeature = 'deserialize'
Importance = ''
"Implementation Type" = ''
Syntax = '''parameters('color, 'count.as[Int]) { ...}'''
Description = ''

[[data]]
"Operand Type" = 'Value extractor directive'
Feature = 'parameters'
Subfeature = 'Repeated'
Importance = ''
"Implementation Type" = ''
Syntax = '''
parameters('color, 'city.*)  { ... }
parameters('color, 'distance.as[Int].*) {..}'''
Description = ''

[[data]]
"Operand Type" = 'Value extractor directive'
Feature = 'parameters'
Subfeature = 'csv'
Importance = ''
"Implementation Type" = ''
Syntax = 'parameter("names".as(CsvSeq[String])) {...}'
Description = ''

[[data]]
"Operand Type" = 'Value extractor directive'
Feature = 'parameters'
Subfeature = 'form'
Importance = ''
"Implementation Type" = ''
Syntax = '''
val route =
  formFields('color, 'age.as[Int]) { (color, age) =>
    complete(s"The color is '$color' and the age ten years ago was ${age - 10}")
  }'''
Description = ''

[[data]]
"Operand Type" = 'Value extractor directive'
Feature = 'json'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
post {
      entity(as[Order]) { order => // will unmarshal JSON to Order
        val itemsCount = order.items.size
        val itemNames = order.items.map(_.name).mkString(", ")
        complete(s"Ordered $itemsCount items: $itemNames")
      }
    }'''
Description = ''

[[data]]
"Operand Type" = 'Value validator'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = 'validate(Locale.getISOLanguages.contains(languageCode), s"languageCode $languageCode not found in Locale.getISOLanguages.")'
Description = ''

[[data]]
"Operand Type" = 'Future Directive'
Feature = 'on success'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
 onSuccess(Future { "Ok" }) { extraction =>
      complete(extraction)
    }'''
Description = ''

[[data]]
"Operand Type" = 'Future Directive'
Feature = 'on complete'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
def divide(a: Int, b: Int): Future[Int] = Future { a / b}
 onComplete(divide(a, b)) {
      case scala.util.Success(value) => complete(s"The result was $value")
      case scala.util.Failure(ex)    => complete((InternalServerError, s"An error occurred: ${ex.getMessage}"))
    }'''
Description = ''

[[data]]
"Operand Type" = 'leaf Directive'
Feature = ''
Subfeature = ''
Importance = ''
"Implementation Type" = 'concept'
Syntax = 'RouteDirective'
Description = '''
Occur only at leaf level.
Contrary to all other directives (except most FileAndResourceDirectives) they do not produce instances of type Directive[L <: HList] but rather “plain” routes of type Route.'''

[[data]]
"Operand Type" = 'leaf Directive'
Feature = 'complete'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
    complete(HttpResponse(entity = "foo"))
      complete(StatusCodes.OK)
      complete(StatusCodes.Created -> "bar")
      complete(201 -> "bar")
      complete(StatusCodes.Created, headers=List(`Content-Type`(`text/plain(UTF-8)`)), value="bar")
complete {
           HttpResponse(entity = HttpEntity(ContentType(MediaTypes.`application/json`), """{"id":"1"}"""))
         }'''
Description = 'Completes a request.'

[[data]]
"Operand Type" = 'leaf Directive'
Feature = 'complete: redirect'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
        redirect("/foo/", StatusCodes.PermanentRedirect)
'''
Description = ''

[[data]]
"Operand Type" = 'leaf Directive'
Feature = 'fail'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
    failWith(new RuntimeException("Oops."))
'''
Description = ''

[[data]]
"Operand Type" = 'leaf Directive'
Feature = 'reject'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
reject
      reject(ValidationRejection("Restricted!"))
'''
Description = ''

[[data]]
"Operand Type" = 'leaf Directive'
Feature = 'file from directory'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
 getFromDirectory("/tmp")
 getFromResourceDirectory("tmp")'''
Description = ''

[[data]]
"Operand Type" = 'Directives class'
Feature = 'define'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
class HelloService(hello: ActorRef)(implicit executionContext: ExecutionContext)
  extends Directives with DefaultJsonFormats {
  val route = ...
  def getHello =
    path("hello") {
      get {
        complete { (hello ? AnonymousHello).mapTo[Greeting] }
      }
    } 
}'''
Description = ''

[[data]]
"Operand Type" = 'App'
Feature = 'define with routes'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
object Rest extends App with RouteConcatenation {
  implicit val system = ActorSystem("akka-http-sample")
  sys.addShutdownHook(system.terminate())

  implicit val materializer = ActorMaterializer()
  implicit val executionContext = system.dispatcher
  val hello = system.actorOf(Props[HelloActor])
  val routes =
    cors() (new HelloService(hello).route ~
      SwaggerDocService.routes)
  Http().bindAndHandle(routes, "0.0.0.0", 9090)
}
'''
Description = ''

[[data]]
"Operand Type" = 'App'
Feature = 'define with requestHandler'
Subfeature = ''
Importance = ''
"Implementation Type" = ''
Syntax = '''
val requestHandler: HttpRequest => HttpResponse = {
      case HttpRequest(GET, Uri.Path("/crash"), _, _, _) =>
        sys.error("BOOM!")
}
    val bindingFuture = Http().bindAndHandleSync(requestHandler, "localhost", 8080)
StdIn.readLine() // let it run until user presses return
    bindingFuture
      .flatMap(_.unbind()) // trigger unbinding from the port
      .onComplete(_ => system.terminate()) // and shutdown when done

'''
Description = ''

