<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>






  
  
  
  
  
  
  <title>683 Homework Assignment</title>
</head>


<body style="color: black; background-color: white;" link="#0440dd" vlink="#0440dd">







<h3 align="center"><font color="#0000ff" size="+2">Homework Assignment #2: Constraint Satisfaction<br>







Due: October 15, 2007</font></h3>







<span style="font-style: italic; text-decoration: underline;">My
answers are in italics. All code may be found in the Edlab machines in the path /courses/cs600/cs683/vvasuki/hw2 <br>

-- vishvAs vAsuki</span>
<ol>







  <li> (12%) Show that any CSP that has a finite domain for each
variable
can be transformed into a CSP with only
binary constraints. Follow these steps:
    
    
    
    
    
    
    <ol>







      <li> Show how a single ternary constraint such as "A+B=C"
can be turned
into three binary constraints by using an auxiliary variable. (<i>Hint:</i>
consider a new variable AB whose domain is <i>pairs</i> of
numbers.)</li>







      
      
      
      
      
      
      <ul>







        <li style="font-style: italic;">Consider a CSP
with finite domains for each variable. Let T be the set of all
constraints. Let V be the set of variables. Consider variables A, B and
C, which are subject to the ternary constraint t(A,B,C). Let the domains of A, B and C be d(A), d(B) and d(C).</li>







        <li style="font-style: italic;">Now, alter the
above CSP as follows:</li>







        
        
        
        
        
        
        <ul>







          <li style="font-style: italic;">Add an auxiliary
variable, x(A,B). Its domain will be the product of the sets d(A) and d(B).</li>







          <li style="font-style: italic;">Remove the constraint t(A,B,C).</li>






          <li style="font-style: italic;">Add a binary constraint which
connects x(A,B) and A, such that, if x(A,B) is assigned the value
(a,b), then A will be assigned the value a.</li>






          <li style="font-style: italic;">Add a binary constraint which connects
x(A,B) and B, such that, if x(A,B) is assigned the value (a,b), then B
will be assigned the value b.</li>






          <li style="font-style: italic;">Add a binary constraint which connects
x(A,B) and C, such that, if x(A,B) is assigned the value (a,b), then C
will be allowed all values which would have been allowed by the constraint t(A,B,C).</li>







        
        
        
        
        
        
        </ul>






        <li style="font-style: italic;">Now, the altered CSP, is equivalent to the original CSP for the following reasons:</li>






        
        
        
        
        
        
        <ul style="font-style: italic;">






          <li>All variables remain subject to all constraints
except&nbsp;t(A,B,C).</li>






          <li>Also, the set of values from the cartesian product d(A)d(B)d(C) which satisfies t(A,B,C) remains exactly
the same after CSP is altered, due to the creation of the new binary constraints.</li>






          <li>Hence: Any assignment of values to V, which was
admissible in the original CSP should be admissible in the new CSP.
And, any assignment of values to V, which was inadmissible in the
original CSP should be inadmissible in the new CSP.</li>






        
        
        
        
        
        
        </ul>






        <li style="font-style: italic;">Hence, we have shown that a single ternary constraint such as "A+B=C"
can be turned
into three binary constraints by using an auxiliary variable.</li>







      
      
      
      
      
      
      </ul>







      <li> Next, show how constraints with more than three
variables can be
treated similarly.</li>






      
      
      
      
      
      
      <ul>






        <li style="font-style: italic;">Consider a CSP
with finite domains for each variable. Let T be the set of all
constraints. Let V be the set of variables. Consider n variables v1,
v2, ... vn, which are subject to the n-ary constraint n(v1,v2,...vn).
Let the domains of a variable vx be d(vx).</li>






        <li style="font-style: italic;">Arbitrarily select a subset of
those variables, S, whose size is |n-1|. Let the variable included in
n(v1,v2,...vn), but not in S, be vy.</li>






        <li style="font-style: italic;">Alter the CSP as follows:</li>






        
        
        
        
        
        
        <ul>






          <li style="font-style: italic;">Add an auxiliary
variable, x(S). Its domain will be the cartesian product of the domains of all variables which belong to S.</li>






          <li style="font-style: italic;">Remove the constraint&nbsp;n(v1,v2,...vn).</li>






          <li style="font-style: italic;">For each variable vx in S, add a binary constraint which connects
x(S) and vx, such that, vx will be constrained to take up whatever value vx holds in the assignment to the variable x(S).</li>






          <li style="font-style: italic;">Add a binary constraint which connects
x(S) and vy, such that, if x(S) is assigned the value val(S), then vy
will be allowed all values which would have been allowed by the constraint n(v1,v2,...vn).</li>






        
        
        
        
        
        
        </ul>






        <li style="font-style: italic;">Now, the altered CSP, is equivalent to the original CSP for the following reasons:</li>






        
        
        
        
        
        
        <ul style="font-style: italic;">






          <li>All variables remain subject to all constraints
except&nbsp;n(v1,v2,...vn).</li>






          <li>Also, the set of values from the cartesian
product&nbsp;of the domains of all variables which belong to S, which
satisfies&nbsp;n(v1,v2,...vn) remains exactly
the same after CSP is altered, due to the creation of the new binary
constraints.</li>






          <li>Hence: Any assignment of values to V, which was
admissible in the original CSP should be admissible in the new CSP.
And, any assignment of values to V, which was inadmissible in the
original CSP should be inadmissible in the new CSP.</li>






        
        
        
        
        
        
        </ul>






        <li style="font-style: italic;">Hence, we have shown that a single n-ary constraint
can be turned
into n binary constraints by using an auxiliary variable.</li>






      
      
      
      
      
      
      </ul>







      <li> Finally, show how unary constraints can be eliminated
by altering
the domains of variables.</li>







      
      
      
      
      
      
      <ul style="font-style: italic;">







        <li>Consider a CSP with finite domains for each variable.
Let C be the set of all constraints. Let V be the set of variables.</li>







        <li>Consider a variable A, subject to a unary constraint
u(A), with the finite domain d(A).</li>







        <li>Now, alter the CSP as follows:</li>







        
        
        
        
        
        
        <ul>







          <li>A unary constraint, by definition, restricts the
value of a single variable.</li>







          <li>For each value v in d(A), do the following:</li>







          
          
          
          
          
          
          <ul>







            <li>If v violates u(A), remove it from d(A).
Otherwise, keep it in d(A).</li>







          
          
          
          
          
          
          </ul>







        
        
        
        
        
        
        </ul>







        
        
        
        
        
        
        <ul>







          <li>Now, remove u(A) from the set C.</li>







        
        
        
        
        
        
        </ul>







        <li>We now have a CSP which is equivalent to the original
CSP due to the following reasons:</li>







        
        
        
        
        
        
        <ul>







          <li>All variables remain subject to all constraints
except u(A). Also, the set of values from d(A) which satisfy u(A)
remains exactly
the same after the domain is altered.</li>







          <li>Hence: Any assignment of values to V, which was
admissible in the original CSP should be admissible in the new CSP.
And, any assignment of values to V, which was inadmissible in the
original CSP should be inadmissible in the new CSP.</li>







        
        
        
        
        
        
        </ul>







        <li>Above, we described a procedure to eliminate a single
unary constraint, and showed that the application of that procedure
results in an equivalent CSP.</li>







        <li>If we were to apply the above procedure to every
unary constraint in a given CSP, we will be left with an equivalent CSP
without any unary constraint.</li>







      
      
      
      
      
      
      </ul>







    
    
    
    
    
    
    </ol>







    <br style="font-style: italic;">







    <span style="font-style: italic;">We show that any CSP
with finite domains for each variable can be&nbsp;transformed into
a CSP with only
binary constraints.</span>
    
    
    
    
    
    
    <ul>







      <li style="font-style: italic;">Consider a CSP with
finite domains for each variable.</li>







      <li style="font-style: italic;">Eliminate unary
constraints by using the procedure described in answer to question 1.3.</li>







      <li style="font-style: italic;">Convert constraints
which involve more than two variable into binary constraints using
the procedure described in answer to question 1.2.</li>







      <li style="font-style: italic;">We are now left with
only binary constraints.</li>







    
    
    
    
    
    
    </ul>







    <span style="font-style: italic;">Hence, we have
proved that, if the above procedure is applied, any CSP that has a
finite domain for each variable
can be transformed into a CSP with only
binary constraints. </span>
    
    
    
    
    
    
    <ol style="font-style: italic;">







    
    
    
    
    
    
    </ol>








  </li>







  <li> (88%) Sudoku is a fairly old puzzle that is now a
worldwide phenomenon.
You can type "sudoku" into Google, or go to <a href="http://www.sudoku.com">www.sudoku.com</a>
for the basics (see "How to Play") and the <a href="http://en.wikipedia.org/wiki/Sudoku">Wikipedia article</a>
to get more information than you could possibly imagine.
Key facts about standard Sudoku puzzles:
    
    
    
    
    
    
    <ul>







      <li> Every puzzle has a unique solution. </li>







      <li> Every puzzle is solvable without trial-and-error,
given suitable inference methods. </li>







      <li> The designated difficulty of a puzzle is usually
determined by the
difficulty of the inference methods required to solve it. </li>







    
    
    
    
    
    
    </ul>







    
    
    
    
    
    
    <p>In addition to the rules, many web sites offer extensive
discussion of
methods that humans can use to solve Sudoku without using
trial-and-error
search. </p>







    
    
    
    
    
    
    <p>You need to write a program that can solve Sudoku
problem instances. To test your program, you should apply it to the
following 16 puzzles:
    
    
    
    
    
    
    <table>







      <tbody>







        <tr>







          <td>Puzzle <a href="sudoku/puz-001.txt">001</a>
&nbsp;&nbsp; </td>







          <td>Puzzle <a href="sudoku/puz-002.txt">002</a>
&nbsp;&nbsp; </td>







          <td>Puzzle <a href="sudoku/puz-010.txt">010</a>
&nbsp;&nbsp; </td>







          <td>Puzzle <a href="sudoku/puz-015.txt">015</a>
&nbsp;&nbsp; </td>







        </tr>







        <tr>







          <td>Puzzle <a href="sudoku/puz-025.txt">025</a>
          </td>







          <td>Puzzle <a href="sudoku/puz-026.txt">026</a>
          </td>







          <td>Puzzle <a href="sudoku/puz-048.txt">048</a>
          </td>







          <td>Puzzle <a href="sudoku/puz-051.txt">051</a>
          </td>







        </tr>







        <tr>







          <td>Puzzle <a href="sudoku/puz-062.txt">062</a>
          </td>







          <td>Puzzle <a href="sudoku/puz-076.txt">076</a>
          </td>







          <td>Puzzle <a href="sudoku/puz-081.txt">081</a>
          </td>







          <td>Puzzle <a href="sudoku/puz-082.txt">082</a>
          </td>







        </tr>







        <tr>







          <td>Puzzle <a href="sudoku/puz-090.txt">090</a>
          </td>







          <td>Puzzle <a href="sudoku/puz-095.txt">095</a>
          </td>







          <td>Puzzle <a href="sudoku/puz-099.txt">099</a>
          </td>







          <td>Puzzle <a href="sudoku/puz-100.txt">100</a>
          </td>







        </tr>







      
      
      
      
      
      
      </tbody>
    
    
    
    
    
    
    </table>







    </p>







    
    
    
    
    
    
    <p>These puzzles are from "Sudoku: Easy
to Hard", by Will Shortz. The original collection includes 100
puzzles (from 1-25 are 'light and easy', 26-50
are 'moderate', 51-75 are 'demanding', and 76-100 are 'beware!
very challenging'.<br>







Each puzzle is stored in a file that looks as follows: </p>







    
    
    
    
    
    
    <pre>- 1 9 - - - - - -<br>- - 8 - - 3 - 5 -<br>- 7 - 6 - - - 8 -<br>- - 1 - - 6 8 - 9<br>8 - - - 4 - - - 7<br>9 4 - - - - - 1 -<br>- - - - - 2 - - -<br>- - - - 8 - 5 6 1<br>- - 3 7 - - - 9 -<br></pre>







    
    
    
    
    
    
    <p><b>Go through the following steps:</b> </p>







    
    
    
    
    
    
    <p><b>1.</b> (5)
Devise a suitable representation for binary CSPs with inequality
constraints.
A problem should be
represented as (a) a list of variables; (b) a domain for each variable
represented as a list of possible values; and (c) a list of
constraints, each
including two variables. Since the constraints are all inequality
constraints, there is no need to explicitly represnt the type of
constraint.
Describe briefly your general representation.<br>






    <br>






    <span style="font-style: italic;">I intend to program with Java, an
object oriented programming language. The following general
representaion for CSP's can be implemented with any similar language.</span><br style="font-style: italic;">






    </p>






    
    
    
    
    
    
    <ul style="font-style: italic;">






      <li>Objects of the abtract class/ interface List will represent an arbitrary list of objects.</li>





      <li>I represent each variable with an object of the class
Variable. Every such object will include a List object which will hold
a list of all values in the domain of that variable.</li>






      <li>Every possible value will be represented by an object of the class Value.</li>






      <li>Every constraint will be represented by an object of the
class Constraint, which will contain Variable objects corresponding to
the two variables being constrained.</li>





      <li>Every instance of the CSP problem will be represented by an
object of the class CSP. Every such object will contain references to a
List object, which will hold a list of all Variable objects, and also
another List object, which will hold a list of all Constraint objects.</li>






      <li>Furthermore, for programming convenience, each Variable
object will contain a List object, which will hold a list of
constraints connected to the corresponding variable.</li>




      <li>My code incorporates the classes described above, and some extensions.</li>






    
    
    
    
    
    
    </ul>







    
    
    
    
    
    
    <p><b>2.</b> (9) Write code defining Sudoku as a
CSP, such that the procedure <tt>make-sudoku-csp</tt>
returns a Sudoku CSP for the case where
no initial digits are supplied. Your CSP should have 9*36 + 9*36 + 9*18
= 810 unique binary constraints. Now write a procedure, <tt>make-sudoku-puzzle</tt>,
that reads a puzzle
represented as above and returns a corresponding CSP. This CSP should
be similar to the one returned by <tt>make-sudoku-csp</tt>,
except that
the domains of variables that have an input value (other than <tt>-</tt>)
should be restricted to that input value.<br>




    <br>




    </p>




    
    
    
    
    <ul>




      <li><span style="font-style: italic;">I have written code to do
the above. The methods make_sudoku_puzzle and make_sudoku_csp may be
found in the class Sudoku. Please note that, for the program to
function in an arbitrary computer, Sudoku.FILE_PATH may need to be
altered.</span></li>




    
    
    
    
    </ul>




    
    
    
    
    <p> </p>







    
    
    
    
    
    
    <p><b>3.</b> (24)
Implement your own version of <tt>backtracking-search</tt>
similar to the one
shown in Figure 5.3 in the textbook. Try to solve a few of the Sudoku
instances
using this algorithm and make sure that it works. </p>







    
    
    
    
    
    
    <p>Now instrument <tt>backtracking-search</tt>
so that it counts the total number of <i>guesses</i> made.
Whenever the backtracking algorithm
prepares to loop through a list of <i>k</i>&gt;0
possible values,
we will say that <i>k</i>-1 guesses are made. (This way,
the algorithm is still charged for guessing even if it is lucky
and its first value choice succeeds.)
Show the numbers of guesses made for each of the 16 instances in
the above collection. Try both plain backtracking and backtacking with
the MRV (minimum remaining values) heuristic.<br>




    <br>




    </p>




    
    
    
    
    <ul>




      <li><span style="font-style: italic;">I have written code to do the above. The methods plain_backtracking_search and</span><span style="font-style: italic;"> mrv_backtracking_search</span><span style="font-style: italic;"> may be found in the class Sudoku.</span></li>



      <li><span style="font-style: italic;">The following trace shows the number of guesses required by&nbsp;</span><span style="font-style: italic;">plain_backtracking_search and </span><span style="font-style: italic;">to solve the problem (As expected, the number of "guesses", remains the same for </span><span style="font-style: italic;">mrv_backtracking_search.</span><span style="font-style: italic;">):</span></li>



      
      
      
      <ul>



        <li><span style="font-style: italic;">Oct 14, 2007 4:10:30 PM csp.Sudoku runTests<br>



INFO: puz-001.txt<br>



Oct 14, 2007 4:10:31 PM csp.Sudoku solvePuzzle<br>



INFO: number of guesses:632<br>



Oct 14, 2007 4:10:31 PM csp.Sudoku runTests<br>



INFO: puz-002.txt<br>



Oct 14, 2007 4:10:31 PM csp.Sudoku solvePuzzle<br>



INFO: number of guesses:1200<br>



Oct 14, 2007 4:10:31 PM csp.Sudoku runTests<br>



INFO: puz-010.txt<br>



Oct 14, 2007 4:10:31 PM csp.Sudoku solvePuzzle<br>



INFO: number of guesses:976<br>



Oct 14, 2007 4:10:31 PM csp.Sudoku runTests<br>



INFO: puz-015.txt<br>



Oct 14, 2007 4:10:31 PM csp.Sudoku solvePuzzle<br>



INFO: number of guesses:2832<br>



Oct 14, 2007 4:10:31 PM csp.Sudoku runTests<br>



INFO: puz-025.txt<br>



Oct 14, 2007 4:10:35 PM csp.Sudoku solvePuzzletxt"<br>



INFO: number of guesses:639880<br>



Oct 14, 2007 4:10:35 PM csp.Sudoku runTests<br>



INFO: puz-026.txt<br>



Oct 14, 2007 4:10:35 PM csp.Sudoku solvePuzzle<br>



INFO: number of guesses:18040<br>



Oct 14, 2007 4:10:35 PM csp.Sudoku runTests<br>



INFO: puz-048.txt<br>



Oct 14, 2007 4:10:37 PM csp.Sudoku solvePuzzle<br>



INFO: number of guesses:301728<br>



Oct 14, 2007 4:10:37 PM csp.Sudoku runTests<br>



INFO: puz-051.txt<br>



Oct 14, 2007 4:10:38 PM csp.Sudoku solvePuzzle<br>



INFO: number of guesses:92752<br>



Oct 14, 2007 4:10:38 PM csp.Sudoku runTests<br>



INFO: puz-062.txt<br>



Oct 14, 2007 4:10:38 PM csp.Sudoku solvePuzzle<br>



INFO: number of guesses:2864<br>



Oct 14, 2007 4:10:38 PM csp.Sudoku runTests<br>



INFO: puz-076.txt<br>



Oct 14, 2007 4:10:38 PM csp.Sudoku solvePuzzle<br>



INFO: number of guesses:40360<br>



Oct 14, 2007 4:10:38 PM csp.Sudoku runTests<br>



INFO: puz-081.txt<br>



Oct 14, 2007 4:10:39 PM csp.Sudoku solvePuzzle<br>



INFO: number of guesses:31328<br>



Oct 14, 2007 4:10:39 PM csp.Sudoku runTests<br>



INFO: puz-082.txt<br>



Oct 14, 2007 4:10:40 PM csp.Sudoku solvePuzzle<br>



INFO: number of guesses:101328<br>



Oct 14, 2007 4:10:40 PM csp.Sudoku runTests<br>



INFO: puz-090.txt<br>



Oct 14, 2007 4:10:40 PM csp.Sudoku solvePuzzle<br>



INFO: number of guesses:41744<br>



Oct 14, 2007 4:10:40 PM csp.Sudoku runTests<br>



INFO: puz-095.txt<br>



Oct 14, 2007 4:10:40 PM csp.Sudoku solvePuzzle<br>



INFO: number of guesses:21112<br>



Oct 14, 2007 4:10:40 PM csp.Sudoku runTests<br>



INFO: puz-099.txt<br>



Oct 14, 2007 4:10:40 PM csp.Sudoku solvePuzzle<br>



INFO: number of guesses:2360<br>



Oct 14, 2007 4:10:40 PM csp.Sudoku runTests<br>



INFO: puz-100.txt<br>



Oct 14, 2007 4:10:42 PM csp.Sudoku solvePuzzle<br>



INFO: number of guesses:184112<br>



          <br>



          </span></li>



      
      
      
      </ul>




    
    
    
    
    </ul>




    
    
    
    
    <p> </p>







    
    
    
    
    
    
    <p><b>4.</b> (40) We would like our solver never
to resort to guessing.
For this to happen, we will need better inference methods.
In this context, an <i>inference method</i> is a function
that examines the current state of the CSP
and deduces additional facts about the remaining unassigned variables
-- either
ruling out one or more values for a variable or asserting a particular
value.
The method can then modify the current state accordingly.
Notice that every time a method modifies the current state,
other methods (or indeed the method itself) may become applicable
again. A <i>waterfall</i> is a set of methods that is
applied
repeatedly, until all the methods fail to do anything useful. </p>







    
    
    
    
    
    
    <p>Modify <tt>backtracking-search</tt> so that
it applies a waterfall to modify the current state before making a
recursive call. (Be sure to
have the program keep track of what the waterfall does so that it can
be undone!) </p>







    
    
    
    
    
    
    <p>Initially, your waterfall should
contain no inference methods, so nothing will change.
Then add as your first inference method the arc consistency algorithm
AC-3 shown in Figure 5.7 in the textbook. Show the numbers of guesses
made for each of the 16 instances when you use AC-3 as the only
inference method. </p>







    
    
    
    
    
    
    <p>Now, find some Sudoku inference methods on the web (ones
written in English,
of course, not programs!). For each, describe how it works
with an example; explain whether it is already covered
by AC-3 and using MRV;
and, if it is not covered, implement it and add it to your waterfall.
After each addition, check the number of guesses for each of the 16
puzzles.
Ideally, you will be able to get the numbers to zero for all puzzles.
If not, it may be possible to define your own inference methods
by examining the current state at each point where
a guess is made, to see what a smart human would do at that point
(if one happens to be available).<br>



    <br>



    </p>



    
    
    
    <ul>



      <li><span style="font-style: italic;">I note that arc
consistancy, in the case of sudoku, implies constriction of the domain
of the tail of the arc only if the domain of the head of the arc is a
singleton. I have implemented AC-3 specific to the class of problems
specified by the question 2.1. I have also ensured the use of the MRV heuristic. The numbers of guesses made when AC-3 is
the sole member of the waterfall is shown below:</span></li>


      
      
      <ul>


        <li><span style="font-style: italic;">Oct 14, 2007 10:25:00 PM csp.Sudoku runTests<br>


INFO: puz-001.txt<br>


Oct 14, 2007 10:25:00 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:0<br>


Oct 14, 2007 10:25:00 PM csp.Sudoku runTests<br>


INFO: puz-002.txt<br>


Oct 14, 2007 10:25:01 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:0<br>


Oct 14, 2007 10:25:01 PM csp.Sudoku runTests<br>


INFO: puz-010.txt<br>


Oct 14, 2007 10:25:01 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:0<br>


Oct 14, 2007 10:25:01 PM csp.Sudoku runTests<br>


INFO: puz-015.txt<br>


Oct 14, 2007 10:25:01 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:0<br>


Oct 14, 2007 10:25:01 PM csp.Sudoku runTests<br>


INFO: puz-025.txt<br>


Oct 14, 2007 10:25:02 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:0<br>


Oct 14, 2007 10:25:02 PM csp.Sudoku runTests<br>


INFO: puz-026.txt<br>


Oct 14, 2007 10:25:02 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:4<br>


Oct 14, 2007 10:25:02 PM csp.Sudoku runTests<br>


INFO: puz-048.txt<br>


Oct 14, 2007 10:25:02 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:5<br>


Oct 14, 2007 10:25:02 PM csp.Sudoku runTests<br>


INFO: puz-051.txt<br>


Oct 14, 2007 10:25:02 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:2<br>


Oct 14, 2007 10:25:02 PM csp.Sudoku runTests<br>


INFO: puz-062.txt<br>


Oct 14, 2007 10:25:03 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:1<br>


Oct 14, 2007 10:25:03 PM csp.Sudoku runTests<br>


INFO: puz-076.txt<br>


Oct 14, 2007 10:25:03 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:2<br>


Oct 14, 2007 10:25:03 PM csp.Sudoku runTests<br>


INFO: puz-081.txt<br>


Oct 14, 2007 10:25:04 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:5<br>


Oct 14, 2007 10:25:04 PM csp.Sudoku runTests<br>


INFO: puz-082.txt<br>


Oct 14, 2007 10:25:04 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:6<br>


Oct 14, 2007 10:25:04 PM csp.Sudoku runTests<br>


INFO: puz-090.txt<br>


Oct 14, 2007 10:25:04 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:0<br>


Oct 14, 2007 10:25:04 PM csp.Sudoku runTests<br>


INFO: puz-095.txt<br>


Oct 14, 2007 10:25:04 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:2<br>


Oct 14, 2007 10:25:04 PM csp.Sudoku runTests<br>


INFO: puz-099.txt<br>


Oct 14, 2007 10:25:04 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:4<br>


Oct 14, 2007 10:25:04 PM csp.Sudoku runTests<br>


INFO: puz-100.txt<br>


Oct 14, 2007 10:25:05 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:6<br>


          </span></li>


      
      
      </ul>


      <li><span style="font-style: italic;">Before I was formally
introduduced to the notion of path consistancy, I used path
consistancy in solving sudoku puzzles. I assume that it is a common
trick used by Sudoku players. Path consistency, in the case of problems
of the class specified by 2.1, works as follows: If two variables share
an identical domain of size two, no third variable which is constrained
by both these variables may include in its domain the members of the
other two variables' domains. Sudoku example: If square (0,0) and (0,1)
have the domain {1,9}, the square (0,5) cannot take either of the
values 1 and 9. I tried implementing 4-consistency, but it did not
result in any improvement. On the addition of path consistency to the
waterfall, I note further decrease in the number of guesses required:</span></li>


      
      
      <ul>


        <li><span style="font-style: italic;">Oct 14, 2007 11:22:47 PM csp.Sudoku runTests<br>


INFO: puz-001.txt<br>


Oct 14, 2007 11:22:48 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:0<br>


Oct 14, 2007 11:22:48 PM csp.Sudoku runTests<br>


INFO: puz-002.txt<br>


Oct 14, 2007 11:22:49 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:0<br>


Oct 14, 2007 11:22:49 PM csp.Sudoku runTests<br>


INFO: puz-010.txt<br>


Oct 14, 2007 11:22:49 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:0<br>


Oct 14, 2007 11:22:49 PM csp.Sudoku runTests<br>


INFO: puz-015.txt<br>


Oct 14, 2007 11:22:50 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:0<br>


Oct 14, 2007 11:22:50 PM csp.Sudoku runTests<br>


INFO: puz-025.txt<br>


Oct 14, 2007 11:22:50 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:0<br>


Oct 14, 2007 11:22:50 PM csp.Sudoku runTests<br>


INFO: puz-026.txt<br>


Oct 14, 2007 11:22:51 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:0<br>


Oct 14, 2007 11:22:51 PM csp.Sudoku runTests<br>


INFO: puz-048.txt<br>


Oct 14, 2007 11:22:51 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:1<br>


Oct 14, 2007 11:22:51 PM csp.Sudoku runTests<br>


INFO: puz-051.txt<br>


Oct 14, 2007 11:22:52 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:0<br>


Oct 14, 2007 11:22:52 PM csp.Sudoku runTests<br>


INFO: puz-062.txt<br>


Oct 14, 2007 11:22:53 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:1<br>


Oct 14, 2007 11:22:53 PM csp.Sudoku runTests<br>


INFO: puz-076.txt<br>


Oct 14, 2007 11:22:53 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:1<br>


Oct 14, 2007 11:22:53 PM csp.Sudoku runTests<br>


INFO: puz-081.txt<br>


Oct 14, 2007 11:22:54 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:0<br>


Oct 14, 2007 11:22:54 PM csp.Sudoku runTests<br>


INFO: puz-082.txt<br>


Oct 14, 2007 11:22:54 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:4<br>


Oct 14, 2007 11:22:54 PM csp.Sudoku runTests<br>


INFO: puz-090.txt<br>


Oct 14, 2007 11:22:55 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:0<br>


Oct 14, 2007 11:22:55 PM csp.Sudoku runTests<br>


INFO: puz-095.txt<br>


Oct 14, 2007 11:22:55 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:2<br>


Oct 14, 2007 11:22:55 PM csp.Sudoku runTests<br>


INFO: puz-099.txt<br>


Oct 14, 2007 11:22:56 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:3<br>


Oct 14, 2007 11:22:56 PM csp.Sudoku runTests<br>


INFO: puz-100.txt<br>


Oct 14, 2007 11:22:56 PM csp.Sudoku solvePuzzle<br>


INFO: number of guesses:3<br>


          <br>


          </span></li>


      
      
      </ul>


    
    
    </ul>


    
    
    <p><b>5.</b> (10)
Design and implement a Sudoku puzzle generator that can generate
puzzles of a desired difficulty. Explain your approach and provide
sample puzzles of various degrees of difficulty.
For extra fun, you may pass the hardest puzzles you can create to your
friends to see if their solvers can solve them without guessing.</p>


  </li>


  
  
  <ul>


    <li><span style="font-style: italic;">I have implemented a Sudoku
puzzle generator (Sudoku.makePuzzle method) with 4 difficulty levels
ranging from 0 to 3. The 3rd level is the hardest. It is modelled after
the puzzles and the difficulty levels provided with this assignment. I
have observed that those 16 puzzles were of varying levels of
difficulty and that their difficulty was related to the number of
guesses a CSP solver with constraint propogration in the form of
maintenance of arc-consistency and path-consistency had to make. I also
think that since the puzzles were picked from a book meant for human
solvers, they may more accurately reflect the level of difficulty
perceived by humans.</span></li>


    <li><span style="font-style: italic;">I generate puzzles by
randomly picking a puzzle of the desired difficulty from the set of 16
puzzles provided with this paper, randomly changing the numbers filled
therein, and then randomly reflecting the resultant puzzle accross
the&nbsp;axes and the origin of a </span><span style="font-style: italic;">rectangular</span><span style="font-style: italic;"> coordinate system centered at the middle of the puzzle.</span></li>
    <li><span style="font-style: italic;">My puzzle generator is
capable of generating&nbsp;9!(4x) unique puzzles of a given difficulty
level, where x is the number of examples of a particular difficulty
class provided in this question paper.<br>
      </span></li>


    <li><span style="font-style: italic;">Examples of puzzles of the four difficulty levels generated, with their solutions, are given below:</span></li>


    
    
    <ul>


      <li><span style="font-style: italic;">Oct 15, 2007 1:16:58 AM csp.Sudoku makePuzzle<br>


INFO: <br>


- - 5 3 6 7 - - 4 <br>


- 3 - 4 - 9 - 5 - <br>


1 - 4 8 5 - - 6 - <br>


4 1 - 6 - - 7 - - <br>


7 5 2 9 - 3 - - - <br>


- - 9 1 - - - 2 3 <br>


2 9 - - - - 6 3 - <br>


- - - - - - 8 7 - <br>


5 - 6 - - - 9 - - <br>


        <br>


Oct 15, 2007 1:16:59 AM csp.Sudoku makePuzzle<br>


INFO: <br>


9 2 5 3 6 7 1 8 4 <br>


6 3 8 4 1 9 2 5 7 <br>


1 7 4 8 5 2 3 6 9 <br>


4 1 3 6 2 5 7 9 8 <br>


7 5 2 9 8 3 4 1 6 <br>


8 6 9 1 7 4 5 2 3 <br>


2 9 7 5 4 8 6 3 1 <br>


3 4 1 2 9 6 8 7 5 <br>


5 8 6 7 3 1 9 4 2 <br>


        <br>


Oct 15, 2007 1:16:59 AM csp.Sudoku makePuzzle<br>


INFO: number of guesses:0<br>


Oct 15, 2007 1:17:01 AM csp.Sudoku makePuzzle<br>


INFO: <br>


8 - - - - 9 - - - <br>


- - - 7 6 - - - - <br>


- 6 - - - - 3 - - <br>


- 4 3 8 - - 2 - - <br>


- - - 1 - 4 - - 9 <br>


7 - - - - - - - - <br>


- 8 - - 9 - 6 4 - <br>


- - 1 - - - - - - <br>


- - - - 3 5 - 9 - <br>


        <br>


Oct 15, 2007 1:17:02 AM csp.Sudoku makePuzzle<br>


INFO: <br>


8 2 7 3 1 9 4 5 6 <br>


5 3 4 7 6 2 9 8 1 <br>


1 6 9 5 4 8 3 7 2 <br>


9 4 3 8 7 6 2 1 5 <br>


6 5 8 1 2 4 7 3 9 <br>


7 1 2 9 5 3 8 6 4 <br>


3 8 5 2 9 1 6 4 7 <br>


4 9 1 6 8 7 5 2 3 <br>


2 7 6 4 3 5 1 9 8 <br>


        <br>


Oct 15, 2007 1:17:02 AM csp.Sudoku makePuzzle<br>


INFO: number of guesses:1<br>


Oct 15, 2007 1:17:03 AM csp.Sudoku makePuzzle<br>


INFO: <br>


- - 5 - - 3 9 - - <br>


7 - - - - - - - 6 <br>


- - - 2 - - - - - <br>


1 - - - - 2 - - - <br>


8 - - - - 4 3 - - <br>


- - 3 - - - - - 1 <br>


- - 9 - - - - - 7 <br>


5 - - 4 1 - - 2 9 <br>


- - 2 - - 8 6 - - <br>


        <br>


Oct 15, 2007 1:17:03 AM csp.Sudoku makePuzzle<br>


INFO: <br>


2 6 5 7 8 3 9 1 4 <br>


7 9 8 5 4 1 2 3 6 <br>


3 4 1 2 6 9 7 8 5 <br>


1 7 4 6 3 2 5 9 8 <br>


8 5 6 1 9 4 3 7 2 <br>


9 2 3 8 5 7 4 6 1 <br>


6 8 9 3 2 5 1 4 7 <br>


5 3 7 4 1 6 8 2 9 <br>


4 1 2 9 7 8 6 5 3 <br>


        <br>


Oct 15, 2007 1:17:03 AM csp.Sudoku makePuzzle<br>


INFO: number of guesses:0<br>


Oct 15, 2007 1:17:05 AM csp.Sudoku makePuzzle<br>


INFO: <br>


6 - - - 1 3 - - - <br>


- - - 5 8 4 9 - - <br>


- 8 - 9 - - - - - <br>


7 - - - - - - - - <br>


- - 5 - - - 2 4 - <br>


- - - - - - - 8 6 <br>


- 7 - - - - - - - <br>


8 - - - - 1 - - 3 <br>


4 - 3 7 5 6 - 2 1 <br>


        <br>


Oct 15, 2007 1:17:06 AM csp.Sudoku makePuzzle<br>


INFO: <br>


6 5 9 2 1 3 4 7 8 <br>


3 1 7 5 8 4 9 6 2 <br>


2 8 4 9 6 7 1 3 5 <br>


7 3 8 6 4 2 5 1 9 <br>


1 6 5 8 3 9 2 4 7 <br>


9 4 2 1 7 5 3 8 6 <br>


5 7 1 3 2 8 6 9 4 <br>


8 2 6 4 9 1 7 5 3 <br>


4 9 3 7 5 6 8 2 1 <br>


        <br>


Oct 15, 2007 1:17:06 AM csp.Sudoku makePuzzle<br>


INFO: number of guesses:1<br>


        <br>


        </span></li>


    
    
    </ul>


  
  
  </ul>







</ol>








</body>
</html>
